name: Enhanced MCP Agent Automation & Validation Gateway

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, labeled]
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      run_discovery:
        description: 'Run MCP discovery scan'
        required: false
        default: 'false'
        type: boolean
      validation_level:
        description: 'Validation level (basic/full/comprehensive)'
        required: false
        default: 'full'
        type: choice
        options:
          - basic
          - full
          - comprehensive
      force_validation:
        description: 'Force validation even for non-agent PRs'
        required: false
        default: 'false'
        type: boolean
  schedule:
    # Weekly MCP discovery on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  NODE_ENV: development
  MCP_SERVER_PORT: 3001

jobs:
  pre-merge-validation-gate:
    name: "üö™ Pre-Merge Validation Gateway"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      gate-status: ${{ steps.gate.outputs.status }}
      requires-mcp-validation: ${{ steps.gate.outputs.requires-mcp-validation }}
      blocking-issues: ${{ steps.gate.outputs.blocking-issues }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Validation Requirements
        id: gate
        run: |
          echo "üö™ Analyzing PR for validation requirements..."
          
          # Initialize validation requirements
          REQUIRES_MCP_VALIDATION="false"
          BLOCKING_ISSUES=""
          GATE_STATUS="pending"
          
          # Check if this is a copilot/agent PR
          PR_AUTHOR="${{ github.actor }}"
          if [ "$PR_AUTHOR" = "copilot" ] || [ "$PR_AUTHOR" = "github-actions[bot]" ] || echo "$PR_AUTHOR" | grep -q "copilot"; then
            REQUIRES_MCP_VALIDATION="true"
            echo "ü§ñ Copilot/Agent PR detected - MCP validation required"
          fi
          
          # Check for agent-related labels
          if echo "${{ github.event.pull_request.labels.*.name }}" | grep -q "copilot-coding-agent\|needs-mcp-validation\|agent-generated"; then
            REQUIRES_MCP_VALIDATION="true"
            echo "üè∑Ô∏è Agent-related label detected - MCP validation required"
          fi
          
          # Check for MCP-related file changes
          if git diff --name-only origin/main...HEAD | grep -qE "(mcp-|scripts/.*mcp|\.github/workflows/.*mcp|mcp-server)"; then
            REQUIRES_MCP_VALIDATION="true"
            echo "üìÅ MCP-related files changed - MCP validation required"
          fi
          
          # Check for automation script changes
          if git diff --name-only origin/main...HEAD | grep -qE "(scripts/automation|scripts/.*-automation|automation/)"; then
            REQUIRES_MCP_VALIDATION="true"
            echo "üîß Automation scripts changed - MCP validation required"  
          fi
          
          # Force validation if requested
          if [ "${{ inputs.force_validation }}" = "true" ]; then
            REQUIRES_MCP_VALIDATION="true"
            echo "‚ö° Force validation requested - MCP validation required"
          fi
          
          # Set outputs
          echo "requires-mcp-validation=$REQUIRES_MCP_VALIDATION" >> $GITHUB_OUTPUT
          echo "blocking-issues=$BLOCKING_ISSUES" >> $GITHUB_OUTPUT
          echo "status=$GATE_STATUS" >> $GITHUB_OUTPUT
          
          # Create validation status comment for copilot PRs
          if [ "$REQUIRES_MCP_VALIDATION" = "true" ]; then
            cat > validation-gate-notice.md << EOF
          ## üö™ Pre-Merge Validation Gateway Activated
          
          This PR requires comprehensive validation before merge:
          
          **Validation Requirements:**
          - üõ°Ô∏è **MCP Server Validation**: All MCP servers must pass health checks
          - üîç **Integration Testing**: Community MCP server integrations validated  
          - üõ†Ô∏è **Automation Testing**: Agent automation scripts verified
          - üìä **Performance Impact**: No degradation in system performance
          - üîí **Security Scan**: No new vulnerabilities introduced
          
          **Auto-Merge Status**: ‚è≥ Pending validation completion
          
          **Manual Override**: Maintainers can use \`/approve-merge\` to bypass if necessary
          EOF
          else
            cat > validation-gate-notice.md << EOF
          ## ‚ÑπÔ∏è Standard PR Review Process
          
          This PR follows the standard review process:
          - No MCP validation required
          - Standard code review applies
          - Can be merged when approved
          EOF
          fi

      - name: Post Validation Gate Notice
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const notice = fs.readFileSync('validation-gate-notice.md', 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: notice
            });

  mcp-discovery:
    name: üîç MCP Discovery & Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || inputs.run_discovery == 'true'
    outputs:
      discoveries-made: ${{ steps.discovery.outputs.discoveries }}
      should-create-pr: ${{ steps.discovery.outputs.should-create-pr }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --silent

      - name: Run MCP Discovery
        id: discovery
        run: |
          echo "üîç Running MCP server discovery..."
          node scripts/discover-new-mcp-servers.js > discovery-output.log 2>&1 || true
          
          # Check if discoveries were made
          if [ -f "mcp-discovery-report.json" ]; then
            DISCOVERIES=$(jq '.total_discoveries' mcp-discovery-report.json)
            echo "discoveries=$DISCOVERIES" >> $GITHUB_OUTPUT
            
            if [ "$DISCOVERIES" -gt 0 ]; then
              echo "should-create-pr=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Found $DISCOVERIES new MCP candidates"
            else
              echo "should-create-pr=false" >> $GITHUB_OUTPUT
              echo "‚ÑπÔ∏è No new MCP servers discovered"
            fi
          else
            echo "discoveries=0" >> $GITHUB_OUTPUT
            echo "should-create-pr=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Discovery report not generated"
          fi

      - name: Create Discovery PR
        if: steps.discovery.outputs.should-create-pr == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "üîç Auto-discovery: Found ${{ steps.discovery.outputs.discoveries }} new MCP servers"
          title: "ü§ñ MCP Auto-Discovery: ${{ steps.discovery.outputs.discoveries }} New Servers Found"
          body: |
            ## üîç MCP Auto-Discovery Results
            
            This PR was automatically created by the MCP discovery system.
            
            **üìä Summary:**
            - **New MCP servers found:** ${{ steps.discovery.outputs.discoveries }}
            - **Discovery timestamp:** ${{ github.run_id }}
            - **Workflow:** [View run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            **üìã Changes:**
            - Updated `docs/guides/AGENTS.md` with new MCP server discoveries
            - Generated `mcp-discovery-report.json` with detailed analysis
            
            **üîß Next Steps:**
            1. Review the discovered MCP servers for relevance
            2. Test integration of high-priority candidates
            3. Update installation scripts if approved
            4. Merge when ready
            
            **üõ°Ô∏è Validation:**
            All changes have been automatically validated and are ready for review.
          branch: mcp-auto-discovery-${{ github.run_id }}
          delete-branch: true

  mcp-validation:
    name: üõ°Ô∏è Enhanced MCP Validation Suite
    runs-on: ubuntu-latest
    needs: [pre-merge-validation-gate]
    if: always() && (github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch') && (needs.pre-merge-validation-gate.outputs.requires-mcp-validation == 'true' || github.event_name == 'workflow_dispatch')
    
    env:
      BROWSERBASE_API_KEY: ${{ secrets.BROWSERBASE_API_KEY }}
      BROWSERBASE_PROJECT_ID: ${{ secrets.BROWSERBASE_PROJECT_ID }}
    
    outputs:
      validation-status: ${{ steps.validation.outputs.status }}
      critical-failures: ${{ steps.validation.outputs.critical-failures }}
      merge-ready: ${{ steps.validation.outputs.merge-ready }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --silent

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install Python dependencies
        run: pip install -r requirements-core.txt

      - name: Install Security Tools
        run: |
          # Install gitleaks for nning
          wget -q https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.0_linux_x64.tar.gz
          sudo mv gitleaks /usr/local/bin/
          chmod +x /usr/local/bin/gitleaks
          echo "‚úÖ Gitleaks installed for 

      - name: Start MCP Servers
        run: |
          echo "üöÄ Starting MCP server orchestration..."
          # Start the main MCP orchestrator in background

          MCP_PID=$!
          echo $MCP_PID > mcp.pid
          
          # Wait for servers to start
          sleep 10
          
          # Verify servers are running
          if ps -p $MCP_PID > /dev/null; then
            echo "‚úÖ MCP orchestrator started successfully"
          else
            echo "‚ùå MCP orchestrator failed to start"
            cat mcp-orchestrator.log
            exit 1
          fi

      - name: Run MCP Manager Validation
        run: |
          echo "üîç Running MCP Manager validation suite..."
          
          # Run install, health, test, and report
          node scripts/mcp-manager.js install
          node scripts/mcp-manager.js health
          node scripts/mcp-manager.js test
          node scripts/mcp-manager.js report
          
          echo "‚úÖ MCP Manager validation completed"

      - name: Run Comprehensive MCP Validation
        id: validation
        run: |
          echo "üîç Running comprehensive MCP validation..."
          
          VALIDATION_LEVEL="${{ inputs.validation_level || 'full' }}"
          echo "Validation level: $VALIDATION_LEVEL"
          
          # Initialize validation results
          VALIDATION_STATUS="passing"
          CRITICAL_FAILURES=0
          SECURITY_FAILURES=0
          CODE_INTEL_FAILURES=0
          
          # Create validation summary JSON for better parsing
          cat > mcp-validation-summary.json << 'EOF'
          {
            "timestamp": "$(date -u +"%Y-%m-%d %H:%M:%S UTC")",
            "validation_level": "$VALIDATION_LEVEL",
            "workflow_run": "${{ github.run_id }}",
            "overall_status": "pending",
            "critical_failures": 0,
            "security_failures": 0,
            "code_intel_failures": 0,
            "tests": []
          }
          EOF
          
          # Create validation report
          cat > mcp-validation-results.md << 'EOF'
          # üõ°Ô∏è MCP Validation Report
          
          **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Workflow:** ${{ github.workflow }}
          **Run ID:** ${{ github.run_id }}
          **Validation Level:** $VALIDATION_LEVEL
          
          ## üìä Validation Results
          
          EOF
          
          # 1. MCP Server Health Check (CRITICAL)
          echo "## üè• MCP Server Health Check" >> mcp-validation-results.md
          if node scripts/comprehensive-mcp-validation.js --check-health > health-check.log 2>&1; then
            echo "‚úÖ MCP server health check passed"
            echo "- ‚úÖ **Health Check**: All MCP servers responding correctly" >> mcp-validation-results.md
            # Update JSON summary
            jq '.tests += [{"name": "mcp_health", "status": "passed", "critical": true}]' mcp-validation-summary.json > tmp.json && mv tmp.json mcp-validation-summary.json
          else
            echo "‚ùå MCP server health check failed"
            echo "- ‚ùå **Health Check**: Critical MCP servers not responding" >> mcp-validation-results.md
            # Append detailed health check logs
            echo "" >> mcp-validation-results.md
            echo "**Health Check Details:**" >> mcp-validation-results.md
            echo '```' >> mcp-validation-results.md
            tail -20 health-check.log >> mcp-validation-results.md 2>/dev/null || echo "Health check logs not available" >> mcp-validation-results.md
            echo '```' >> mcp-validation-results.md
            VALIDATION_STATUS="failing"
            CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
            # Update JSON summary  
            jq '.tests += [{"name": "mcp_health", "status": "failed", "critical": true}]' mcp-validation-summary.json > tmp.json && mv tmp.json mcp-validation-summary.json
          fi
          
          # 2. Code Quality Analysis (using MCP servers)
          echo "## üîç Code Quality Analysis" >> mcp-validation-results.md
          if [ "$VALIDATION_LEVEL" != "basic" ]; then
            # Use FileScopeMCP for code analysis
            echo "Running code analysis via MCP servers..."
            if node scripts/validate-mcp-integration.js --code-analysis >> mcp-validation-results.md 2>&1; then
              echo "‚úÖ Code quality analysis passed"
              echo "- ‚úÖ **Code Analysis**: No critical issues found" >> mcp-validation-results.md
            else
              echo "‚ö†Ô∏è Code quality analysis found issues"
              echo "- ‚ö†Ô∏è **Code Analysis**: Issues found (non-critical)" >> mcp-validation-results.md
            fi
          else
            echo "- ‚è≠Ô∏è **Code Analysis**: Skipped (basic validation)" >> mcp-validation-results.md
          fi
          

          # 3. Security Scanning & Secret Detection (CRITICAL)
          echo "## üõ°Ô∏è Security Scanning & Secret Detection" >> mcp-validation-results.md

          if [ "$VALIDATION_LEVEL" == "comprehensive" ] || [ "$VALIDATION_LEVEL" == "full" ]; then
            # Use package-management MCP for security scanning
            echo "Running security scan via MCP servers..."
            
            # 1. NPM Audit (CRITICAL)
            echo "Running NPM security audit..."
            if npm audit --audit-level=high > audit-results.json 2>&1; then
              echo "‚úÖ NPM security audit passed"
              echo "- ‚úÖ **NPM Audit**: No high-severity vulnerabilities" >> mcp-validation-results.md
              jq '.tests += [{"name": "npm_audit", "status": "passed", "critical": true}]' mcp-validation-summary.json > tmp.json && mv tmp.json mcp-validation-summary.json
            else
              echo "‚ùå NPM security audit found CRITICAL vulnerabilities"
              echo "- ‚ùå **NPM Audit**: CRITICAL high-severity vulnerabilities detected" >> mcp-validation-results.md
              # Show detailed audit results
              echo "" >> mcp-validation-results.md
              echo "**Critical Vulnerabilities:**" >> mcp-validation-results.md
              echo '```json' >> mcp-validation-results.md
              cat audit-results.json >> mcp-validation-results.md
              echo '```' >> mcp-validation-results.md
              VALIDATION_STATUS="failing"
              CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
              SECURITY_FAILURES=$((SECURITY_FAILURES + 1))
              jq '.tests += [{"name": "npm_audit", "status": "failed", "critical": true}]' mcp-validation-summary.json > tmp.json && mv tmp.json mcp-validation-summary.json
            fi
            

            # 2. Secret Scanning (CRITICAL)
            echo "Running secret scanning..."
            if command -v gitleaks >/dev/null 2>&1; then
              if gitleaks detect --source . --no-git --verbose > gitleaks-results.json 2>&1; then
                echo "‚úÖ Secret scanning passed - No secrets detected"
                echo "- ‚úÖ **Secret Scan**: No secrets detected" >> mcp-validation-results.md
                jq '.tests += [{"name": "secret_scan", "status": "passed", "critical": true}]' mcp-validation-summary.json > tmp.json && mv tmp.json mcp-validation-summary.json
              else
                echo "‚ùå Secret scanning failed - CRITICAL secrets detected"
                echo "- ‚ùå **Secret Scan**: CRITICAL secrets detected in code" >> mcp-validation-results.md
                # Show detailed secret scan results
                echo "" >> mcp-validation-results.md
                echo "**Detected Secrets (redacted):**" >> mcp-validation-results.md
                echo '```json' >> mcp-validation-results.md
                # Show results but redact actual secret values for security
                cat gitleaks-results.json | jq '.[] | {file: .File, type: .RuleID, line: .StartLine}' 2>/dev/null || cat gitleaks-results.json >> mcp-validation-results.md
                echo '```' >> mcp-validation-results.md

                VALIDATION_STATUS="failing"
                CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
                SECURITY_FAILURES=$((SECURITY_FAILURES + 1))
                jq '.tests += [{"name": "secret_scan", "status": "failed", "critical": true}]' mcp-validation-summary.json > tmp.json && mv tmp.json mcp-validation-summary.json
              fi
            else
              # Fallback basic  scanning
              echo "Using basic nning (gitleaks not available)..."
              SECRET_PATTERNS="password|secret|key|token|api_key|private|credential"

              if grep -r -i -E "$SECRET_PATTERNS.*=.*['\"][a-zA-Z0-9+/=]{8,}['\"]" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.test.js" --exclude="*.example" > secret-scan-results.txt 2>/dev/null; then
                echo "‚ö†Ô∏è Potential secrets found (basic scan) - CRITICAL"
                echo "- ‚ùå **Secret Scan**: CRITICAL - Potential secrets found (basic scan)" >> mcp-validation-results.md
                echo "" >> mcp-validation-results.md
                echo "**Potential Secrets Found:**" >> mcp-validation-results.md
                echo '```' >> mcp-validation-results.md
                # Redact actual values in basic scan too
                sed 's/=.*/=***REDACTED***/g' secret-scan-results.txt >> mcp-validation-results.md
                echo '```' >> mcp-validation-results.md
                VALIDATION_STATUS="failing"
                CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
                SECURITY_FAILURES=$((SECURITY_FAILURES + 1))
                jq '.tests += [{"name": "secret_scan", "status": "failed", "critical": true}]' mcp-validation-summary.json > tmp.json && mv tmp.json mcp-validation-summary.json
              else
                echo "‚úÖ Basic secret scanning passed"
                echo "- ‚úÖ **Secret Scan**: Basic scan passed" >> mcp-validation-results.md
                jq '.tests += [{"name": "secret_scan", "status": "passed", "critical": true}]' mcp-validation-summary.json > tmp.json && mv tmp.json mcp-validation-summary.json

              fi
            fi
          else
            echo "- ‚è≠Ô∏è **Security Scan**: Skipped (basic validation only)" >> mcp-validation-results.md
          fi
          
          # 4. Integration Tests (CRITICAL for code intelligence)
          echo "## üß™ Integration Tests" >> mcp-validation-results.md
          echo "Running MCP integration tests..."
          if node scripts/test-community-mcp-servers.js > integration-test.log 2>&1; then
            echo "‚úÖ Integration tests passed"
            echo "- ‚úÖ **Integration Tests**: All MCP integrations working" >> mcp-validation-results.md
            jq '.tests += [{"name": "integration_tests", "status": "passed", "critical": true}]' mcp-validation-summary.json > tmp.json && mv tmp.json mcp-validation-summary.json
          else
            echo "‚ùå Integration tests failed - CRITICAL"
            echo "- ‚ùå **Integration Tests**: CRITICAL code intelligence integrations failing" >> mcp-validation-results.md
            # Show detailed integration test results
            echo "" >> mcp-validation-results.md
            echo "**Integration Test Details:**" >> mcp-validation-results.md
            echo '```' >> mcp-validation-results.md
            tail -30 integration-test.log >> mcp-validation-results.md 2>/dev/null || echo "Integration test logs not available" >> mcp-validation-results.md
            echo '```' >> mcp-validation-results.md
            VALIDATION_STATUS="failing"
            CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
            CODE_INTEL_FAILURES=$((CODE_INTEL_FAILURES + 1))
            jq '.tests += [{"name": "integration_tests", "status": "failed", "critical": true}]' mcp-validation-summary.json > tmp.json && mv tmp.json mcp-validation-summary.json
          fi
          
          # 5. Performance Tests
          echo "## ‚ö° Performance Tests" >> mcp-validation-results.md
          if [ "$VALIDATION_LEVEL" == "comprehensive" ]; then
            echo "Running performance tests..."
            # Simple performance check - measure MCP response times
            START_TIME=$(date +%s%N)
            node scripts/comprehensive-mcp-validation.js --performance >> mcp-validation-results.md 2>&1 || true
            END_TIME=$(date +%s%N)
            DURATION=$((($END_TIME - $START_TIME) / 1000000)) # Convert to milliseconds
            
            if [ $DURATION -lt 5000 ]; then
              echo "‚úÖ Performance tests passed ($DURATION ms)"
              echo "- ‚úÖ **Performance**: Acceptable response times (${DURATION}ms)" >> mcp-validation-results.md
            else
              echo "‚ö†Ô∏è Performance tests slow ($DURATION ms)"
              echo "- ‚ö†Ô∏è **Performance**: Slow response times (${DURATION}ms)" >> mcp-validation-results.md
            fi
          else
            echo "- ‚è≠Ô∏è **Performance Tests**: Skipped (not comprehensive)" >> mcp-validation-results.md
          fi
          
          # Summary and final JSON update
          echo "" >> mcp-validation-results.md
          echo "## üìã Critical Validation Summary" >> mcp-validation-results.md
          echo "" >> mcp-validation-results.md
          echo "| Category | Status | Failures |" >> mcp-validation-results.md
          echo "|----------|--------|----------|" >> mcp-validation-results.md
          echo "| Overall Status | **$VALIDATION_STATUS** | $CRITICAL_FAILURES total |" >> mcp-validation-results.md
          echo "| Security | $([ $SECURITY_FAILURES -eq 0 ] && echo "‚úÖ PASSED" || echo "‚ùå FAILED") | $SECURITY_FAILURES failures |" >> mcp-validation-results.md
          echo "| Code Intelligence | $([ $CODE_INTEL_FAILURES -eq 0 ] && echo "‚úÖ PASSED" || echo "‚ùå FAILED") | $CODE_INTEL_FAILURES failures |" >> mcp-validation-results.md
          echo "| Validation Level | **$VALIDATION_LEVEL** | - |" >> mcp-validation-results.md
          echo "" >> mcp-validation-results.md
          
          if [ "$CRITICAL_FAILURES" -gt 0 ]; then
            echo "### üö´ MERGE BLOCKED" >> mcp-validation-results.md
            echo "" >> mcp-validation-results.md
            echo "This PR **CANNOT BE MERGED** until the following critical issues are resolved:" >> mcp-validation-results.md
            echo "" >> mcp-validation-results.md
            if [ "$SECURITY_FAILURES" -gt 0 ]; then
              echo "- **Security Issues**: $SECURITY_FAILURES critical security failures detected" >> mcp-validation-results.md
            fi
            if [ "$CODE_INTEL_FAILURES" -gt 0 ]; then
              echo "- **Code Intelligence**: $CODE_INTEL_FAILURES critical MCP integration failures" >> mcp-validation-results.md
            fi
            echo "" >> mcp-validation-results.md
            echo "**Resolution Steps:**" >> mcp-validation-results.md
            echo "1. Review the detailed error logs above" >> mcp-validation-results.md
            echo "2. Fix all security vulnerabilities and exposed secrets" >> mcp-validation-results.md  
            echo "3. Ensure MCP servers are properly configured and responding" >> mcp-validation-results.md
            echo "4. Re-run validation using \`/run-mcp-validation\`" >> mcp-validation-results.md
          fi
          
          # Update final JSON summary
          jq --arg status "$VALIDATION_STATUS" \
             --argjson critical "$CRITICAL_FAILURES" \
             --argjson security "$SECURITY_FAILURES" \
             --argjson code_intel "$CODE_INTEL_FAILURES" \
             '.overall_status = $status | .critical_failures = $critical | .security_failures = $security | .code_intel_failures = $code_intel' \
             mcp-validation-summary.json > tmp.json && mv tmp.json mcp-validation-summary.json
          
          # Set outputs with enhanced failure tracking
          MERGE_READY="false"
          if [ "$VALIDATION_STATUS" = "passing" ] && [ "$CRITICAL_FAILURES" = "0" ]; then
            MERGE_READY="true"
          fi
          
          echo "status=$VALIDATION_STATUS" >> $GITHUB_OUTPUT
          echo "critical-failures=$CRITICAL_FAILURES" >> $GITHUB_OUTPUT
          echo "security-failures=$SECURITY_FAILURES" >> $GITHUB_OUTPUT
          echo "code-intel-failures=$CODE_INTEL_FAILURES" >> $GITHUB_OUTPUT
          echo "merge-ready=$MERGE_READY" >> $GITHUB_OUTPUT
          
          # Display results
          echo "üìä Validation Results:"
          echo "   Status: $VALIDATION_STATUS"
          echo "   Critical Failures: $CRITICAL_FAILURES"

      - name: Stop MCP Servers
        if: always()
        run: |
          if [ -f mcp.pid ]; then
            MCP_PID=$(cat mcp.pid)
            if ps -p $MCP_PID > /dev/null; then
              kill $MCP_PID || true
              echo "üõë Stopped MCP orchestrator"
            fi
            rm -f mcp.pid
          fi

      - name: Upload Validation Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mcp-validation-results-${{ github.run_id }}
          path: |
            mcp-validation-results.md
            mcp-validation-summary.json
            mcp-orchestrator.log
            audit-results.json
            gitleaks-results.json

            secret-scan-results.txt
            health-check.log
            integration-test.log

            mcp-integration-test-results.json
          retention-days: 30

      - name: Enhanced PR Comment with Validation Gating
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              // Read validation results and summary
              let validationResults = '';
              let validationSummary = null;
              try {
                validationResults = fs.readFileSync('mcp-validation-results.md', 'utf8');
              } catch (error) {
                validationResults = '‚ùå Validation results file not found. Check workflow logs for details.';
              }
              
              try {
                const summaryRaw = fs.readFileSync('mcp-validation-summary.json', 'utf8');
                validationSummary = JSON.parse(summaryRaw);
              } catch (error) {
                console.log('Could not parse validation summary JSON');
              }
              
              // Determine merge status with enhanced failure tracking
              const validationStatus = '${{ steps.validation.outputs.status }}';
              const criticalFailures = '${{ steps.validation.outputs.critical-failures }}';
              const securityFailures = '${{ steps.validation.outputs.security-failures }}';
              const codeIntelFailures = '${{ steps.validation.outputs.code-intel-failures }}';
              const mergeReady = '${{ steps.validation.outputs.merge-ready }}';
              const requiresValidation = '${{ needs.pre-merge-validation-gate.outputs.requires-mcp-validation }}';
              
              // Create enhanced status indicators
              const statusIcon = validationStatus === 'passing' ? '‚úÖ' : '‚ùå';
              const mergeStatus = mergeReady === 'true' ? '‚úÖ READY FOR AUTO-MERGE' : 'üö´ MERGE BLOCKED';
              const validationBadge = requiresValidation === 'true' ? 'üõ°Ô∏è VALIDATION REQUIRED' : '‚ÑπÔ∏è STANDARD REVIEW';
              
              // Artifact links
              const runId = '${{ github.run_id }}';
              const artifactUrl = `${{ github.server_url }}/${{ github.repository }}/actions/runs/${runId}`;
              
              // Create comment body with enhanced failure tracking
              const commentBody = `## üõ°Ô∏è MCP Validation Gateway Report
            
            **Workflow Run:** [#${{ github.run_number }}](${artifactUrl})
            **Validation Gateway:** ${validationBadge}
            **Overall Status:** ${statusIcon} ${validationStatus.toUpperCase()}
            **Merge Status:** ${mergeStatus}
            
            ### üìä Critical Failure Analysis
            
            | Category | Status | Failures | Impact |
            |----------|--------|----------|---------|
            | **Security** | ${securityFailures === '0' ? '‚úÖ PASSED' : '‚ùå FAILED'} | ${securityFailures} | ${securityFailures !== '0' ? 'BLOCKS MERGE' : 'Safe to merge'} |
            | **Code Intelligence** | ${codeIntelFailures === '0' ? '‚úÖ PASSED' : '‚ùå FAILED'} | ${codeIntelFailures} | ${codeIntelFailures !== '0' ? 'BLOCKS MERGE' : 'All integrations working'} |
            | **Total Critical** | ${criticalFailures === '0' ? '‚úÖ PASSED' : '‚ùå FAILED'} | ${criticalFailures} | ${criticalFailures !== '0' ? 'MERGE BLOCKED' : 'Ready for merge'} |
            
            ### üö™ Validation Gateway Status
            
            | Component | Status | Details |
            |-----------|--------|---------|
            | MCP Server Health | ${criticalFailures === '0' ? '‚úÖ' : '‚ùå'} | Core MCP servers responding |
            | Integration Tests | ${codeIntelFailures === '0' ? '‚úÖ' : '‚ùå'} | Community MCP servers validated |
            | Security Scan | ${securityFailures === '0' ? '‚úÖ' : '‚ùå'} | Vulnerability & secret detection |
            | Auto-Merge Ready | ${mergeReady === 'true' ? '‚úÖ' : '‚ùå'} | ${mergeReady === 'true' ? 'All critical checks passed' : 'Critical issues must be resolved'} |
            
            ### üì¶ Validation Artifacts
            
            **Download comprehensive validation results:**
            - üìã [Validation Report & Logs](${artifactUrl}) - Full MCP validation artifacts
            - üîç [Security Scan Results](${artifactUrl}) - Dependency audit & secret scan  
            - üß™ [Integration Test Results](${artifactUrl}) - MCP server integration tests
            
            <details>
            <summary>üìä Detailed Validation Results</summary>
            
            ${validationResults}
            
            </details>
            
            ${mergeReady === 'true' ? 
              '### ‚úÖ AUTO-MERGE APPROVED\n\n**This PR has passed all critical validation gates and is ready for automatic merge.** All MCP servers are operational, no critical security or code intelligence issues detected.' : 
              `### üö´ MERGE BLOCKED\n\n**This PR cannot be merged until critical validation issues are resolved.**\n\n**Critical Issues Found:**\n- Security Failures: ${securityFailures}\n- Code Intelligence Failures: ${codeIntelFailures}\n- Total Critical Failures: ${criticalFailures}\n\n**Resolution Required:** Address all critical failures before merge.`
            }
            
            ### üîÑ Available Commands
            
            **Validation Commands:**
            - \`/run-mcp-validation\` - Re-run comprehensive MCP validation
            - \`/mcp-health-check\` - Quick health check only  
            - \`/run-mcp-all\` - Run all validation suites
            
            **Override Commands (Maintainers Only):**
            - \`/approve-merge\` - Override validation and approve merge
            - \`/force-validation\` - Force validation even if not required
            
            ---
            
            **üõ°Ô∏è MCP Validation Gateway System**  
            **Auto-Merge**: ${mergeReady === 'true' ? 'ENABLED' : 'BLOCKED'} | **Status**: ${validationStatus.toUpperCase()} | **Critical Failures**: ${criticalFailures}`;
              
              // Post comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            } catch (error) {
              console.error('Error posting enhanced comment:', error);
            }

      - name: Enhanced Status Check with Merge Gating
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ steps.validation.outputs.status }}';
            const criticalFailures = '${{ steps.validation.outputs.critical-failures }}';
            const mergeReady = '${{ steps.validation.outputs.merge-ready }}';
            const requiresValidation = '${{ needs.pre-merge-validation-gate.outputs.requires-mcp-validation }}';
            
            // Determine status check state
            let state, description, context;
            
            if (requiresValidation === 'true') {
              // This PR requires validation
              if (mergeReady === 'true') {
                state = 'success';
                description = 'All MCP validations passed - Ready for auto-merge';
                context = 'MCP Validation Gateway / Auto-Merge Ready';
              } else {
                state = 'failure';
                description = `${criticalFailures} critical failures - Merge blocked`;
                context = 'MCP Validation Gateway / Merge Blocked';
              }
            } else {
              // Standard PR - no special validation required
              state = 'success';
              description = 'No MCP validation required - Standard review process';
              context = 'MCP Validation Gateway / Standard Review';
            }
            
            // Create primary status check
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: state,
              target_url: `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`,
              description: description,
              context: context
            });
            
            // Create additional status checks for detailed tracking
            if (requiresValidation === 'true') {
              const checks = [
                {
                  context: 'MCP Validation / Server Health',
                  state: status === 'passing' ? 'success' : 'failure',
                  description: status === 'passing' ? 'All MCP servers responding' : 'MCP server issues detected'
                },
                {
                  context: 'MCP Validation / Integration Tests',
                  state: criticalFailures === '0' ? 'success' : 'failure',
                  description: criticalFailures === '0' ? 'All integrations working' : `${criticalFailures} integration failures`
                },
                {
                  context: 'MCP Validation / Security Scan',
                  state: status === 'passing' ? 'success' : 'pending',
                  description: status === 'passing' ? 'Security scan completed' : 'Security scan in progress'
                }
              ];
              
              for (const check of checks) {
                await github.rest.repos.createCommitStatus({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  sha: context.sha,
                  state: check.state,
                  target_url: `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`,
                  description: check.description,
                  context: check.context
                });
              }
            }

      - name: Block Merge on Critical Failures
        if: steps.validation.outputs.critical-failures != '0' && needs.pre-merge-validation-gate.outputs.requires-mcp-validation == 'true'
        run: |
          echo "üö´ MERGE BLOCKED: Critical MCP validation failures detected"
          echo ""
          echo "üìä Failure Summary:"
          echo "  Total Critical Failures: ${{ steps.validation.outputs.critical-failures }}"
          echo "  Security Failures: ${{ steps.validation.outputs.security-failures }}"  
          echo "  Code Intelligence Failures: ${{ steps.validation.outputs.code-intel-failures }}"
          echo "  Overall Status: ${{ steps.validation.outputs.status }}"
          echo ""
          echo "üîí SECURITY ISSUES:" 
          if [ "${{ steps.validation.outputs.security-failures }}" != "0" ]; then
            echo "  ‚ùå ${{ steps.validation.outputs.security-failures }} security-related failures detected"
            echo "  üö® High-severity vulnerabilities or exposed secrets found"
            echo "  üìã Review security scan results in artifacts"
          else
            echo "  ‚úÖ No security issues detected"
          fi
          echo ""
          echo "üß† CODE INTELLIGENCE ISSUES:"
          if [ "${{ steps.validation.outputs.code-intel-failures }}" != "0" ]; then
            echo "  ‚ùå ${{ steps.validation.outputs.code-intel-failures }} code intelligence failures detected"
            echo "  üîß MCP server integrations not functioning properly"
            echo "  üìã Review integration test results in artifacts"
          else
            echo "  ‚úÖ No code intelligence issues detected"
          fi
          echo ""
          echo "üõ†Ô∏è RESOLUTION STEPS:"
          echo "1. Download validation artifacts to review detailed error logs"
          echo "2. Fix all security vulnerabilities and remove any exposed secrets"  
          echo "3. Ensure MCP servers are properly configured and responding"
          echo "4. Re-run validation using '/run-mcp-validation'"
          echo "5. Push new commits to trigger automatic re-validation"
          echo ""
          echo "‚ö° AVAILABLE COMMANDS:"
          echo "  /run-mcp-validation    # Re-run comprehensive validation"
          echo "  /mcp-health-check      # Quick health check only"
          echo "  /approve-merge         # Maintainer override (if necessary)"
          echo ""
          echo "üîó ARTIFACTS: Download from workflow run for detailed analysis"
          echo "   ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          exit 1

  health-monitor:
    name: üè• MCP Health Monitoring
    runs-on: ubuntu-latest
    needs: [mcp-validation]
    if: always() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --silent

      - name: Generate Health Report
        run: |
          echo "üè• Generating MCP health report..."
          
          # Create comprehensive health report
          cat > mcp-health-report.md << 'EOF'
          # üè• MCP System Health Report
          
          **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Workflow:** Weekly Health Check
          
          ## üìä System Status
          
          EOF
          
          # Run health checks
          if node scripts/comprehensive-mcp-validation.js --health-only >> mcp-health-report.md 2>&1; then
            echo "‚úÖ MCP system health: Good"
          else
            echo "‚ö†Ô∏è MCP system health: Issues detected"
          fi
          
          # Check for outdated dependencies
          echo "" >> mcp-health-report.md
          echo "## üì¶ Dependency Status" >> mcp-health-report.md
          npm outdated >> mcp-health-report.md 2>&1 || echo "All dependencies up to date" >> mcp-health-report.md

      - name: Create Health Issue
        if: needs.mcp-validation.outputs.critical-failures > 0
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const healthReport = fs.readFileSync('mcp-health-report.md', 'utf8');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® MCP System Health Alert - Critical Issues Detected',
              labels: ['bug', 'priority-high', 'mcp-system'],
              body: `## üö® MCP System Health Alert
            
            Critical issues have been detected in the MCP system during automated health monitoring.
            
            **Critical Failures:** ${{ needs.mcp-validation.outputs.critical-failures }}
            **Detection Time:** ${new Date().toISOString()}
            **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ## üìä Health Report
            
            ${healthReport}
            
            ## üîß Required Actions
            
            1. **Immediate**: Investigate critical failures
            2. **Priority**: Restore MCP server functionality  
            3. **Follow-up**: Review system stability and monitoring
            
            **Auto-assigned to:** @maintainers`
            });