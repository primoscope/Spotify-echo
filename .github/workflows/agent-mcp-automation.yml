name: Enhanced MCP Agent Automation & Validation Gateway

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, labeled]
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      run_discovery:
        description: 'Run MCP discovery scan'
        required: false
        default: 'false'
        type: boolean
      validation_level:
        description: 'Validation level (basic/full/comprehensive)'
        required: false
        default: 'full'
        type: choice
        options:
          - basic
          - full
          - comprehensive
      force_validation:
        description: 'Force validation even for non-agent PRs'
        required: false
        default: 'false'
        type: boolean
  schedule:
    # Weekly MCP discovery on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  NODE_ENV: development
  MCP_SERVER_PORT: 3001

jobs:
  pre-merge-validation-gate:
    name: "🚪 Pre-Merge Validation Gateway"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      gate-status: ${{ steps.gate.outputs.status }}
      requires-mcp-validation: ${{ steps.gate.outputs.requires-mcp-validation }}
      blocking-issues: ${{ steps.gate.outputs.blocking-issues }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Validation Requirements
        id: gate
        run: |
          echo "🚪 Analyzing PR for validation requirements..."
          
          # Initialize validation requirements
          REQUIRES_MCP_VALIDATION="false"
          BLOCKING_ISSUES=""
          GATE_STATUS="pending"
          
          # Check if this is a copilot/agent PR
          PR_AUTHOR="${{ github.actor }}"
          if [ "$PR_AUTHOR" = "copilot" ] || [ "$PR_AUTHOR" = "github-actions[bot]" ] || echo "$PR_AUTHOR" | grep -q "copilot"; then
            REQUIRES_MCP_VALIDATION="true"
            echo "🤖 Copilot/Agent PR detected - MCP validation required"
          fi
          
          # Check for agent-related labels
          if echo "${{ github.event.pull_request.labels.*.name }}" | grep -q "copilot-coding-agent\|needs-mcp-validation\|agent-generated"; then
            REQUIRES_MCP_VALIDATION="true"
            echo "🏷️ Agent-related label detected - MCP validation required"
          fi
          
          # Check for MCP-related file changes
          if git diff --name-only origin/main...HEAD | grep -qE "(mcp-|scripts/.*mcp|\.github/workflows/.*mcp|mcp-server)"; then
            REQUIRES_MCP_VALIDATION="true"
            echo "📁 MCP-related files changed - MCP validation required"
          fi
          
          # Check for automation script changes
          if git diff --name-only origin/main...HEAD | grep -qE "(scripts/automation|scripts/.*-automation|automation/)"; then
            REQUIRES_MCP_VALIDATION="true"
            echo "🔧 Automation scripts changed - MCP validation required"  
          fi
          
          # Force validation if requested
          if [ "${{ inputs.force_validation }}" = "true" ]; then
            REQUIRES_MCP_VALIDATION="true"
            echo "⚡ Force validation requested - MCP validation required"
          fi
          
          # Set outputs
          echo "requires-mcp-validation=$REQUIRES_MCP_VALIDATION" >> $GITHUB_OUTPUT
          echo "blocking-issues=$BLOCKING_ISSUES" >> $GITHUB_OUTPUT
          echo "status=$GATE_STATUS" >> $GITHUB_OUTPUT
          
          # Create validation status comment for copilot PRs
          if [ "$REQUIRES_MCP_VALIDATION" = "true" ]; then
            cat > validation-gate-notice.md << EOF
          ## 🚪 Pre-Merge Validation Gateway Activated
          
          This PR requires comprehensive validation before merge:
          
          **Validation Requirements:**
          - 🛡️ **MCP Server Validation**: All MCP servers must pass health checks
          - 🔍 **Integration Testing**: Community MCP server integrations validated  
          - 🛠️ **Automation Testing**: Agent automation scripts verified
          - 📊 **Performance Impact**: No degradation in system performance
          - 🔒 **Security Scan**: No new vulnerabilities introduced
          
          **Auto-Merge Status**: ⏳ Pending validation completion
          
          **Manual Override**: Maintainers can use \`/approve-merge\` to bypass if necessary
          EOF
          else
            cat > validation-gate-notice.md << EOF
          ## ℹ️ Standard PR Review Process
          
          This PR follows the standard review process:
          - No MCP validation required
          - Standard code review applies
          - Can be merged when approved
          EOF
          fi

      - name: Post Validation Gate Notice
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const notice = fs.readFileSync('validation-gate-notice.md', 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: notice
            });

  mcp-discovery:
    name: 🔍 MCP Discovery & Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || inputs.run_discovery == 'true'
    outputs:
      discoveries-made: ${{ steps.discovery.outputs.discoveries }}
      should-create-pr: ${{ steps.discovery.outputs.should-create-pr }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --silent

      - name: Run MCP Discovery
        id: discovery
        run: |
          echo "🔍 Running MCP server discovery..."
          node scripts/discover-new-mcp-servers.js > discovery-output.log 2>&1 || true
          
          # Check if discoveries were made
          if [ -f "mcp-discovery-report.json" ]; then
            DISCOVERIES=$(jq '.total_discoveries' mcp-discovery-report.json)
            echo "discoveries=$DISCOVERIES" >> $GITHUB_OUTPUT
            
            if [ "$DISCOVERIES" -gt 0 ]; then
              echo "should-create-pr=true" >> $GITHUB_OUTPUT
              echo "✅ Found $DISCOVERIES new MCP candidates"
            else
              echo "should-create-pr=false" >> $GITHUB_OUTPUT
              echo "ℹ️ No new MCP servers discovered"
            fi
          else
            echo "discoveries=0" >> $GITHUB_OUTPUT
            echo "should-create-pr=false" >> $GITHUB_OUTPUT
            echo "⚠️ Discovery report not generated"
          fi

      - name: Create Discovery PR
        if: steps.discovery.outputs.should-create-pr == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "🔍 Auto-discovery: Found ${{ steps.discovery.outputs.discoveries }} new MCP servers"
          title: "🤖 MCP Auto-Discovery: ${{ steps.discovery.outputs.discoveries }} New Servers Found"
          body: |
            ## 🔍 MCP Auto-Discovery Results
            
            This PR was automatically created by the MCP discovery system.
            
            **📊 Summary:**
            - **New MCP servers found:** ${{ steps.discovery.outputs.discoveries }}
            - **Discovery timestamp:** ${{ github.run_id }}
            - **Workflow:** [View run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            **📋 Changes:**
            - Updated `docs/guides/AGENTS.md` with new MCP server discoveries
            - Generated `mcp-discovery-report.json` with detailed analysis
            
            **🔧 Next Steps:**
            1. Review the discovered MCP servers for relevance
            2. Test integration of high-priority candidates
            3. Update installation scripts if approved
            4. Merge when ready
            
            **🛡️ Validation:**
            All changes have been automatically validated and are ready for review.
          branch: mcp-auto-discovery-${{ github.run_id }}
          delete-branch: true

  mcp-validation:
    name: 🛡️ Enhanced MCP Validation Suite
    runs-on: ubuntu-latest
    needs: [pre-merge-validation-gate]
    if: always() && (github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch') && (needs.pre-merge-validation-gate.outputs.requires-mcp-validation == 'true' || github.event_name == 'workflow_dispatch')
    
    outputs:
      validation-status: ${{ steps.validation.outputs.status }}
      critical-failures: ${{ steps.validation.outputs.critical-failures }}
      merge-ready: ${{ steps.validation.outputs.merge-ready }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --silent

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install Python dependencies
        run: pip install -r requirements-core.txt

      - name: Install Security Tools
        run: |
          # Install gitleaks for nning
          wget -q https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.0_linux_x64.tar.gz
          sudo mv gitleaks /usr/local/bin/
          chmod +x /usr/local/bin/gitleaks
          echo "✅ Gitleaks installed for 

      - name: Start MCP Servers
        run: |
          echo "🚀 Starting MCP server orchestration..."
          # Start the main MCP orchestrator in background

          MCP_PID=$!
          echo $MCP_PID > mcp.pid
          
          # Wait for servers to start
          sleep 10
          
          # Verify servers are running
          if ps -p $MCP_PID > /dev/null; then
            echo "✅ MCP orchestrator started successfully"
          else
            echo "❌ MCP orchestrator failed to start"
            cat mcp-orchestrator.log
            exit 1
          fi

      - name: Run Comprehensive MCP Validation
        id: validation
        run: |
          echo "🔍 Running comprehensive MCP validation..."
          
          VALIDATION_LEVEL="${{ inputs.validation_level || 'full' }}"
          echo "Validation level: $VALIDATION_LEVEL"
          
          # Initialize validation results
          VALIDATION_STATUS="passing"
          CRITICAL_FAILURES=0
          
          # Create validation report
          cat > mcp-validation-results.md << 'EOF'
          # 🛡️ MCP Validation Report
          
          **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Workflow:** ${{ github.workflow }}
          **Run ID:** ${{ github.run_id }}
          **Validation Level:** $VALIDATION_LEVEL
          
          ## 📊 Validation Results
          
          EOF
          
          # 1. MCP Server Health Check
          echo "## 🏥 MCP Server Health Check" >> mcp-validation-results.md
          if node scripts/comprehensive-mcp-validation.js --check-health >> mcp-validation-results.md 2>&1; then
            echo "✅ MCP server health check passed"
            echo "- ✅ **Health Check**: All MCP servers responding correctly" >> mcp-validation-results.md
          else
            echo "❌ MCP server health check failed"
            echo "- ❌ **Health Check**: Some MCP servers not responding" >> mcp-validation-results.md
            VALIDATION_STATUS="failing"
            CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
          fi
          
          # 2. Code Quality Analysis (using MCP servers)
          echo "## 🔍 Code Quality Analysis" >> mcp-validation-results.md
          if [ "$VALIDATION_LEVEL" != "basic" ]; then
            # Use FileScopeMCP for code analysis
            echo "Running code analysis via MCP servers..."
            if node scripts/validate-mcp-integration.js --code-analysis >> mcp-validation-results.md 2>&1; then
              echo "✅ Code quality analysis passed"
              echo "- ✅ **Code Analysis**: No critical issues found" >> mcp-validation-results.md
            else
              echo "⚠️ Code quality analysis found issues"
              echo "- ⚠️ **Code Analysis**: Issues found (non-critical)" >> mcp-validation-results.md
            fi
          else
            echo "- ⏭️ **Code Analysis**: Skipped (basic validation)" >> mcp-validation-results.md
          fi
          
          # 3. Security Scanning &  Detection
          echo "## 🛡️ Security Scanning &  Detection" >> mcp-validation-results.md
          if [ "$VALIDATION_LEVEL" == "comprehensive" ] || [ "$VALIDATION_LEVEL" == "full" ]; then
            # Use package-management MCP for security scanning
            echo "Running security scan via MCP servers..."
            
            # 1. NPM Audit
            if npm audit --audit-level=high > audit-results.json 2>&1; then
              echo "✅ NPM security audit passed"
              echo "- ✅ **NPM Audit**: No high-severity vulnerabilities" >> mcp-validation-results.md
            else
              echo "❌ NPM security audit found vulnerabilities"
              echo "- ❌ **NPM Audit**: High-severity vulnerabilities found" >> mcp-validation-results.md
              VALIDATION_STATUS="failing"
              CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
              cat audit-results.json >> mcp-validation-results.md
            fi
            
            # 2. 
            echo "Running  scanning..."
            if command -v gitleaks >/dev/null 2>&1; then
              if gitleaks detect --source . --no-git --verbose > gitleaks-results.json 2>&1; then
                echo "✅  scanning passed - No secrets detected"
                echo "- ✅ **n**: No secrets detected" >> mcp-validation-results.md
              else
                echo "❌  scanning failed - Secrets detected"
                echo "- ❌ **n**: Secrets detected in code" >> mcp-validation-results.md
                VALIDATION_STATUS="failing"
                CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
                cat gitleaks-results.json >> mcp-validation-results.md
              fi
            else
              # Fallback basic  scanning
              echo "Using basic nning (gitleaks not available)..."
              SECRET_PATTERNS="password|secret|key|token|api_key|private|credential"
              if grep -r -i -E "$SECRET_PATTERNS.*=.*['\"][a-zA-Z0-9+/=]{8,}['\"]" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.test.js" --exclude="*.example" > -scan-results.txt 2>/dev/null; then
                echo "⚠️ Potential secrets found (basic scan)"
                echo "- ⚠️ **n**: Potential secrets found (basic scan)" >> mcp-validation-results.md
                cat -scan-results.txt >> mcp-validation-results.md
              else
                echo "✅ Basic nning passed"
                echo "- ✅ ** scan passed" >> mcp-validation-results.md
              fi
            fi
          else
            echo "- ⏭️ **Security Scan**: Skipped (basic validation only)" >> mcp-validation-results.md
          fi
          
          # 4. Integration Tests
          echo "## 🧪 Integration Tests" >> mcp-validation-results.md
          if node scripts/test-community-mcp-servers.js >> mcp-validation-results.md 2>&1; then
            echo "✅ Integration tests passed"
            echo "- ✅ **Integration Tests**: All MCP integrations working" >> mcp-validation-results.md
          else
            echo "❌ Integration tests failed"
            echo "- ❌ **Integration Tests**: Some integrations failing" >> mcp-validation-results.md
            VALIDATION_STATUS="failing"
            CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
          fi
          
          # 5. Performance Tests
          echo "## ⚡ Performance Tests" >> mcp-validation-results.md
          if [ "$VALIDATION_LEVEL" == "comprehensive" ]; then
            echo "Running performance tests..."
            # Simple performance check - measure MCP response times
            START_TIME=$(date +%s%N)
            node scripts/comprehensive-mcp-validation.js --performance >> mcp-validation-results.md 2>&1 || true
            END_TIME=$(date +%s%N)
            DURATION=$((($END_TIME - $START_TIME) / 1000000)) # Convert to milliseconds
            
            if [ $DURATION -lt 5000 ]; then
              echo "✅ Performance tests passed ($DURATION ms)"
              echo "- ✅ **Performance**: Acceptable response times (${DURATION}ms)" >> mcp-validation-results.md
            else
              echo "⚠️ Performance tests slow ($DURATION ms)"
              echo "- ⚠️ **Performance**: Slow response times (${DURATION}ms)" >> mcp-validation-results.md
            fi
          else
            echo "- ⏭️ **Performance Tests**: Skipped (not comprehensive)" >> mcp-validation-results.md
          fi
          
          # Summary
          echo "" >> mcp-validation-results.md
          echo "## 📋 Summary" >> mcp-validation-results.md
          echo "- **Overall Status**: $VALIDATION_STATUS" >> mcp-validation-results.md
          echo "- **Critical Failures**: $CRITICAL_FAILURES" >> mcp-validation-results.md
          echo "- **Validation Level**: $VALIDATION_LEVEL" >> mcp-validation-results.md
          
          # Set outputs with merge-ready status
          MERGE_READY="false"
          if [ "$VALIDATION_STATUS" = "passing" ] && [ "$CRITICAL_FAILURES" = "0" ]; then
            MERGE_READY="true"
          fi
          
          echo "status=$VALIDATION_STATUS" >> $GITHUB_OUTPUT
          echo "critical-failures=$CRITICAL_FAILURES" >> $GITHUB_OUTPUT
          echo "merge-ready=$MERGE_READY" >> $GITHUB_OUTPUT
          
          # Display results
          echo "📊 Validation Results:"
          echo "   Status: $VALIDATION_STATUS"
          echo "   Critical Failures: $CRITICAL_FAILURES"

      - name: Stop MCP Servers
        if: always()
        run: |
          if [ -f mcp.pid ]; then
            MCP_PID=$(cat mcp.pid)
            if ps -p $MCP_PID > /dev/null; then
              kill $MCP_PID || true
              echo "🛑 Stopped MCP orchestrator"
            fi
            rm -f mcp.pid
          fi

      - name: Upload Validation Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mcp-validation-results
          path: |
            mcp-validation-results.md
            mcp-orchestrator.log
            audit-results.json
            gitleaks-results.json
            results.txt
            mcp-integration-test-results.json
          retention-days: 30

      - name: Enhanced PR Comment with Validation Gating
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              // Read validation results
              let validationResults = '';
              try {
                validationResults = fs.readFileSync('mcp-validation-results.md', 'utf8');
              } catch (error) {
                validationResults = '❌ Validation results file not found. Check workflow logs for details.';
              }
              
              // Determine merge status
              const validationStatus = '${{ steps.validation.outputs.status }}';
              const criticalFailures = '${{ steps.validation.outputs.critical-failures }}';
              const mergeReady = '${{ steps.validation.outputs.merge-ready }}';
              const requiresValidation = '${{ needs.pre-merge-validation-gate.outputs.requires-mcp-validation }}';
              
              // Create enhanced status indicators
              const statusIcon = validationStatus === 'passing' ? '✅' : '❌';
              const mergeStatus = mergeReady === 'true' ? '✅ READY FOR AUTO-MERGE' : '⚠️ MERGE BLOCKED';
              const validationBadge = requiresValidation === 'true' ? '🛡️ VALIDATION REQUIRED' : 'ℹ️ STANDARD REVIEW';
              
              // Create comment body
              const commentBody = `## 🛡️ Enhanced MCP Agent Validation Results
            
            **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Validation Gateway:** ${validationBadge}
            **Validation Status:** ${statusIcon} ${validationStatus.toUpperCase()}
            **Critical Failures:** ${criticalFailures}
            **Merge Status:** ${mergeStatus}
            
            ### 🚪 Pre-Merge Validation Gateway
            
            | Check | Status | Details |
            |-------|--------|---------|
            | MCP Server Health | ${validationStatus === 'passing' ? '✅' : '❌'} | All servers responding |
            | Integration Tests | ${criticalFailures === '0' ? '✅' : '❌'} | Community MCP servers validated |
            | Security Scan | ${validationStatus === 'passing' ? '✅' : '⚠️'} | Dependency scanning completed |
            | Performance Impact | ${validationStatus === 'passing' ? '✅' : '⚠️'} | No degradation detected |
            | Auto-Merge Ready | ${mergeReady === 'true' ? '✅' : '❌'} | ${mergeReady === 'true' ? 'All checks passed' : 'Validation required'} |
            
            <details>
            <summary>📊 Detailed Validation Results</summary>
            
            ${validationResults}
            
            </details>
            
            ### 🔧 Enhanced MCP Validation Checklist
            
            - ${validationStatus === 'passing' ? '✅' : '❌'} **MCP Server Health**: All servers responding
            - ${criticalFailures === '0' ? '✅' : '⚠️'} **Critical Issues**: ${criticalFailures} failures
            - 📊 **Integration Tests**: Community MCP servers validated
            - 🛡️ **Security**: Dependency scanning completed
            - ⚡ **Performance**: Response time monitoring active
            
            ${mergeReady === 'true' ? 
              '### ✅ AUTO-MERGE APPROVED\n\n**This PR has passed all validation gates and is ready for automatic merge.** All MCP servers are operational, no critical issues detected, and performance metrics are within acceptable ranges.' : 
              '### ⚠️ MERGE VALIDATION REQUIRED\n\n**This PR cannot be auto-merged until validation issues are resolved.** Please address the failing checks above and re-run validation using `/run-mcp-validation` or push new commits to trigger automatic re-validation.'
            }
            
            ### 🔄 Available Commands
            
            **Validation Commands:**
            - \`/run-mcp-validation\` - Re-run full MCP validation
            - \`/mcp-health-check\` - Quick health check only
            - \`/run-mcp-all\` - Comprehensive validation suite
            
            **Override Commands (Maintainers Only):**
            - \`/approve-merge\` - Override validation and approve merge
            - \`/force-validation\` - Force validation even if not required
            
            ---
            
            **🤖 Enhanced MCP Agent Validation System**  
            **Auto-Merge**: ${mergeReady === 'true' ? 'ENABLED' : 'BLOCKED'} | **Status**: ${validationStatus.toUpperCase()} | **Gateway**: Active`;
              
              // Post comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            } catch (error) {
              console.error('Error posting enhanced comment:', error);
            }

      - name: Enhanced Status Check with Merge Gating
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ steps.validation.outputs.status }}';
            const criticalFailures = '${{ steps.validation.outputs.critical-failures }}';
            const mergeReady = '${{ steps.validation.outputs.merge-ready }}';
            const requiresValidation = '${{ needs.pre-merge-validation-gate.outputs.requires-mcp-validation }}';
            
            // Determine status check state
            let state, description, context;
            
            if (requiresValidation === 'true') {
              // This PR requires validation
              if (mergeReady === 'true') {
                state = 'success';
                description = 'All MCP validations passed - Ready for auto-merge';
                context = 'MCP Validation Gateway / Auto-Merge Ready';
              } else {
                state = 'failure';
                description = `${criticalFailures} critical failures - Merge blocked`;
                context = 'MCP Validation Gateway / Merge Blocked';
              }
            } else {
              // Standard PR - no special validation required
              state = 'success';
              description = 'No MCP validation required - Standard review process';
              context = 'MCP Validation Gateway / Standard Review';
            }
            
            // Create primary status check
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: state,
              target_url: `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`,
              description: description,
              context: context
            });
            
            // Create additional status checks for detailed tracking
            if (requiresValidation === 'true') {
              const checks = [
                {
                  context: 'MCP Validation / Server Health',
                  state: status === 'passing' ? 'success' : 'failure',
                  description: status === 'passing' ? 'All MCP servers responding' : 'MCP server issues detected'
                },
                {
                  context: 'MCP Validation / Integration Tests',
                  state: criticalFailures === '0' ? 'success' : 'failure',
                  description: criticalFailures === '0' ? 'All integrations working' : `${criticalFailures} integration failures`
                },
                {
                  context: 'MCP Validation / Security Scan',
                  state: status === 'passing' ? 'success' : 'pending',
                  description: status === 'passing' ? 'Security scan completed' : 'Security scan in progress'
                }
              ];
              
              for (const check of checks) {
                await github.rest.repos.createCommitStatus({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  sha: context.sha,
                  state: check.state,
                  target_url: `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`,
                  description: check.description,
                  context: check.context
                });
              }
            }

      - name: Block Merge on Critical Failures
        if: steps.validation.outputs.critical-failures != '0' && needs.pre-merge-validation-gate.outputs.requires-mcp-validation == 'true'
        run: |
          echo "🚫 MERGE BLOCKED: Critical MCP validation failures detected"
          echo "Critical failures: ${{ steps.validation.outputs.critical-failures }}"
          echo "Status: ${{ steps.validation.outputs.status }}"
          echo ""
          echo "This PR cannot be merged until all critical validation issues are resolved."
          echo "Please address the issues listed in the validation report and re-run validation."
          echo ""
          echo "Available commands:"
          echo "- /run-mcp-validation    # Re-run validation"
          echo "- /approve-merge         # Maintainer override (if necessary)"
          exit 1

  health-monitor:
    name: 🏥 MCP Health Monitoring
    runs-on: ubuntu-latest
    needs: [mcp-validation]
    if: always() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --silent

      - name: Generate Health Report
        run: |
          echo "🏥 Generating MCP health report..."
          
          # Create comprehensive health report
          cat > mcp-health-report.md << 'EOF'
          # 🏥 MCP System Health Report
          
          **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Workflow:** Weekly Health Check
          
          ## 📊 System Status
          
          EOF
          
          # Run health checks
          if node scripts/comprehensive-mcp-validation.js --health-only >> mcp-health-report.md 2>&1; then
            echo "✅ MCP system health: Good"
          else
            echo "⚠️ MCP system health: Issues detected"
          fi
          
          # Check for outdated dependencies
          echo "" >> mcp-health-report.md
          echo "## 📦 Dependency Status" >> mcp-health-report.md
          npm outdated >> mcp-health-report.md 2>&1 || echo "All dependencies up to date" >> mcp-health-report.md

      - name: Create Health Issue
        if: needs.mcp-validation.outputs.critical-failures > 0
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const healthReport = fs.readFileSync('mcp-health-report.md', 'utf8');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 MCP System Health Alert - Critical Issues Detected',
              labels: ['bug', 'priority-high', 'mcp-system'],
              body: `## 🚨 MCP System Health Alert
            
            Critical issues have been detected in the MCP system during automated health monitoring.
            
            **Critical Failures:** ${{ needs.mcp-validation.outputs.critical-failures }}
            **Detection Time:** ${new Date().toISOString()}
            **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ## 📊 Health Report
            
            ${healthReport}
            
            ## 🔧 Required Actions
            
            1. **Immediate**: Investigate critical failures
            2. **Priority**: Restore MCP server functionality  
            3. **Follow-up**: Review system stability and monitoring
            
            **Auto-assigned to:** @maintainers`
            });