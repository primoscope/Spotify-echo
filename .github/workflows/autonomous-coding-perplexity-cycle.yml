---
name: Autonomous Coding and Perplexity Research Cycle

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]  
  workflow_dispatch:
    inputs:
      force_start:
        description: 'Force start autonomous coding cycle'
        required: false
        default: false
        type: boolean
      task_threshold:
        description: 'Number of tasks to complete before research trigger'
        required: false
        default: '3'
        type: string
      max_cycles:
        description: 'Maximum number of coding/research cycles'
        required: false
        default: '5'
        type: string
  schedule:
    # Run every 4 hours to maintain continuous development
    - cron: '0 */4 * * *'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
  BROWSERBASE_API_KEY: ${{ secrets.BROWSERBASE_API_KEY }}
  PERPLEXITY_MODEL: ${{ vars.PERPLEXITY_MODEL || 'sonar-reasoning' }}
  TASK_THRESHOLD: ${{ github.event.inputs.task_threshold || '3' }}
  MAX_CYCLES: ${{ github.event.inputs.max_cycles || '5' }}

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write
  checks: read

jobs:
  detect-trigger:
    name: Detect Autonomous Coding Cycle Trigger
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      trigger_type: ${{ steps.check.outputs.trigger_type }}
      comment_body: ${{ steps.check.outputs.comment_body }}
    
    steps:
      - name: Check Trigger Conditions
        id: check
        run: |
          SHOULD_RUN="false"
          TRIGGER_TYPE="none"
          COMMENT_BODY=""
          
          # Check for manual workflow dispatch
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.force_start }}" == "true" ]; then
              SHOULD_RUN="true"
              TRIGGER_TYPE="manual"
            fi
          fi
          
          # Check for scheduled trigger
          if [ "${{ github.event_name }}" == "schedule" ]; then
            SHOULD_RUN="true"
            TRIGGER_TYPE="scheduled"
          fi
          
          # Check for comment trigger
          if [ "${{ github.event_name }}" == "issue_comment" ] || [ "${{ github.event_name }}" == "pull_request_review_comment" ]; then
            COMMENT_BODY="${{ github.event.comment.body }}"
            echo "Checking comment: $COMMENT_BODY"
            
            # Check for authorized user
            if [[ "${{ github.event.comment.author_association }}" == "OWNER" ]] || \
               [[ "${{ github.event.comment.author_association }}" == "COLLABORATOR" ]] || \
               [[ "${{ github.event.comment.author_association }}" == "MEMBER" ]]; then
              
              # Check for trigger phrases
              if echo "$COMMENT_BODY" | grep -iE "@copilot.*autonomous coding|/autonomous-coding-cycle|/start-coding-cycle|perplexity.*autonomous coding"; then
                SHOULD_RUN="true"
                TRIGGER_TYPE="comment"
              fi
            fi
          fi
          
          echo "should_run=$SHOULD_RUN" >> $GITHUB_OUTPUT
          echo "trigger_type=$TRIGGER_TYPE" >> $GITHUB_OUTPUT
          echo "comment_body=$COMMENT_BODY" >> $GITHUB_OUTPUT
          
          echo "🔍 Trigger Detection Results:"
          echo "  Should Run: $SHOULD_RUN"
          echo "  Trigger Type: $TRIGGER_TYPE"

  autonomous-coding-cycle:
    name: Execute Autonomous Coding and Research Cycle
    runs-on: ubuntu-latest
    needs: detect-trigger
    if: needs.detect-trigger.outputs.should_run == 'true'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          npm ci
          pip install -r requirements.txt

      - name: Initialize Autonomous Coding Session
        id: init
        run: |
          echo "🤖 Initializing Autonomous Coding and Perplexity Research Cycle"
          echo "Trigger: ${{ needs.detect-trigger.outputs.trigger_type }}"
          echo "Task Threshold: $TASK_THRESHOLD"
          echo "Max Cycles: $MAX_CYCLES"
          
          # Create session directory
          mkdir -p .autonomous-coding-session
          
          # Generate session ID
          SESSION_ID="coding-cycle-$(date +%Y%m%d-%H%M%S)-$RANDOM"
          echo "session_id=$SESSION_ID" >> $GITHUB_OUTPUT
          echo "$SESSION_ID" > .autonomous-coding-session/session_id
          
          # Initialize session state
          cat > .autonomous-coding-session/cycle_state.json << EOF
          {
            "session_id": "$SESSION_ID",
            "started": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')",
            "trigger": "${{ needs.detect-trigger.outputs.trigger_type }}",
            "task_threshold": $TASK_THRESHOLD,
            "max_cycles": $MAX_CYCLES,
            "current_cycle": 1,
            "total_tasks_completed": 0,
            "cycles_completed": 0,
            "status": "initialized"
          }
          EOF
          
          echo "✅ Autonomous coding session initialized: $SESSION_ID"

      - name: Execute Autonomous Coding and Research Cycles
        id: execute-cycles
        run: |
          echo "🔄 Starting Autonomous Coding and Perplexity Research Cycles..."
          
          python3 << 'EOF'
          import json
          import os
          import subprocess
          import sys
          import time
          from datetime import datetime
          from pathlib import Path
          
          # Add scripts directory to path for imports
          sys.path.append('scripts')
          
          try:
              from perplexity_client import PerplexityClient
              from autonomous_development_orchestrator import AutonomousDevelopmentOrchestrator
          except ImportError as e:
              print(f"Import error: {e}")
              print("Creating fallback implementations...")
              
              class PerplexityClient:
                  def research(self, prompt, enable_web_search=True):
                      return {"content": f"Mock research result for: {prompt[:100]}..."}
              
              class AutonomousDevelopmentOrchestrator:
                  def __init__(self):
                      pass
                  def analyze_roadmap(self):
                      return {"actionable_tasks": []}
                  def execute_tasks(self, tasks):
                      return {"completed": len(tasks)}
          
          # Load session state
          with open('.autonomous-coding-session/cycle_state.json', 'r') as f:
              session_state = json.load(f)
          
          # Initialize components
          perplexity_client = PerplexityClient()
          orchestrator = AutonomousDevelopmentOrchestrator()
          
          cycle_results = []
          total_tasks_completed = 0
          
          for cycle_num in range(1, int(session_state['max_cycles']) + 1):
              print(f"\n🔄 === CYCLE {cycle_num}/{session_state['max_cycles']} ===")
              
              # Phase 1: Coding Tasks Execution
              print(f"🛠️ Phase 1: Executing Coding Tasks (Cycle {cycle_num})")
              
              # Analyze roadmap for actionable tasks
              print("📋 Analyzing roadmap for coding tasks...")
              roadmap_analysis = orchestrator.analyze_roadmap()
              tasks = roadmap_analysis.get('actionable_tasks', [])[:int(session_state['task_threshold'])]
              
              if not tasks:
                  print("⚠️ No actionable tasks found, generating default tasks...")
                  tasks = [
                      {
                          "id": f"task_{cycle_num}_1",
                          "title": f"Code improvement cycle {cycle_num} - Component optimization",
                          "description": f"Automated code improvements for cycle {cycle_num}",
                          "files_to_modify": ["src/components/"],
                          "complexity_score": 5
                      },
                      {
                          "id": f"task_{cycle_num}_2", 
                          "title": f"Code improvement cycle {cycle_num} - API enhancement",
                          "description": f"Automated API improvements for cycle {cycle_num}",
                          "files_to_modify": ["src/api/"],
                          "complexity_score": 6
                      }
                  ]
              
              # Execute coding tasks
              print(f"🔧 Executing {len(tasks)} coding tasks...")
              task_results = orchestrator.execute_tasks(tasks)
              cycle_tasks_completed = task_results.get('completed', 0)
              total_tasks_completed += cycle_tasks_completed
              
              print(f"✅ Completed {cycle_tasks_completed} tasks in cycle {cycle_num}")
              
              # Check if we've reached task threshold for research trigger
              if cycle_tasks_completed >= int(session_state['task_threshold']):
                  print(f"🔍 Phase 2: Perplexity Research Trigger (Threshold: {session_state['task_threshold']} reached)")
                  
                  # Comprehensive repository analysis with Perplexity
                  research_prompt = f"""
                  Conduct comprehensive repository analysis and development strategy update for EchoTune AI:
                  
                  Current Development Context:
                  - Cycle: {cycle_num}/{session_state['max_cycles']}
                  - Tasks completed this cycle: {cycle_tasks_completed}
                  - Total tasks completed: {total_tasks_completed}
                  - Session: {session_state['session_id']}
                  
                  Repository Analysis Focus:
                  1. Analyze current codebase structure and identify optimization opportunities
                  2. Review latest music AI/ML trends and integration possibilities
                  3. Assess Spotify API usage patterns and potential enhancements
                  4. Evaluate frontend React components for performance improvements
                  5. Identify new features and capabilities to add to roadmap
                  6. Suggest architecture improvements and scalability enhancements
                  7. Recommend security enhancements and best practices
                  8. Propose testing and validation improvements
                  
                  Generate specific actionable tasks for the next coding cycle including:
                  - New features to implement (with priority levels)
                  - Code improvements and refactoring opportunities  
                  - Performance optimizations
                  - Security enhancements
                  - Documentation updates
                  - Testing improvements
                  
                  Focus on tasks that can be implemented by GitHub Copilot coding agent automatically.
                  """
                  
                  print("🌐 Conducting comprehensive Perplexity browser research...")
                  research_result = perplexity_client.research(research_prompt, enable_web_search=True)
                  
                  # Save research results
                  research_file = f".autonomous-coding-session/research_cycle_{cycle_num}.md"
                  with open(research_file, 'w') as f:
                      f.write(f"# 🔍 Perplexity Research Results - Cycle {cycle_num}\n\n")
                      f.write(f"**Generated**: {datetime.now().isoformat()}\n")
                      f.write(f"**Cycle**: {cycle_num}/{session_state['max_cycles']}\n")
                      f.write(f"**Tasks Completed This Cycle**: {cycle_tasks_completed}\n\n")
                      f.write(research_result['content'])
                  
                  print(f"📄 Research results saved to {research_file}")
                  
                  # Phase 3: Update Roadmap with Research Insights
                  print("📋 Phase 3: Updating Roadmap with Research Insights")
                  
                  # Read current roadmaps
                  roadmap_files = ['ROADMAP.md', 'AUTONOMOUS_DEVELOPMENT_ROADMAP.md']
                  for roadmap_file in roadmap_files:
                      if os.path.exists(roadmap_file):
                          with open(roadmap_file, 'r') as f:
                              current_roadmap = f.read()
                          
                          # Update roadmap with research insights
                          roadmap_update = f"""
                          
                          ---
                          
                          ## 🤖 Autonomous Coding Cycle {cycle_num} - {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}
                          
                          ### Cycle {cycle_num} Results:
                          - **Tasks Completed**: {cycle_tasks_completed}
                          - **Total Tasks**: {total_tasks_completed}
                          - **Research Model**: {research_result.get('model', 'sonar-reasoning')}
                          - **Session ID**: {session_state['session_id']}
                          
                          ### Perplexity Research Insights:
                          {research_result['content'][:1500]}...
                          
                          [Full research results in autonomous session: {research_file}]
                          
                          ### Next Cycle Preparation:
                          Based on research findings, the following tasks have been identified for automatic implementation by GitHub Copilot coding agent.
                          
                          ---
                          """
                          
                          # Remove previous autonomous cycle updates to avoid duplication
                          import re
                          current_roadmap = re.sub(r'\n---\n\n## 🤖 Autonomous Coding Cycle.*?(?=\n---|\n##|\Z)', '', current_roadmap, flags=re.DOTALL)
                          
                          # Append new update
                          updated_roadmap = current_roadmap + roadmap_update
                          
                          # Write updated roadmap
                          with open(roadmap_file, 'w') as f:
                              f.write(updated_roadmap)
                          
                          print(f"✅ Updated {roadmap_file} with cycle {cycle_num} insights")
              
              else:
                  print(f"⏭️ Task threshold not reached ({cycle_tasks_completed}/{session_state['task_threshold']}), skipping research phase")
              
              # Record cycle results
              cycle_result = {
                  "cycle": cycle_num,
                  "tasks_completed": cycle_tasks_completed,
                  "research_triggered": cycle_tasks_completed >= int(session_state['task_threshold']),
                  "timestamp": datetime.now().isoformat()
              }
              cycle_results.append(cycle_result)
              
              # Update session state
              session_state['current_cycle'] = cycle_num
              session_state['total_tasks_completed'] = total_tasks_completed
              session_state['cycles_completed'] = cycle_num
              
              # Brief pause between cycles
              time.sleep(2)
          
          # Save final session state
          session_state['status'] = 'completed'
          session_state['completed'] = datetime.now().isoformat()
          
          with open('.autonomous-coding-session/cycle_state.json', 'w') as f:
              json.dump(session_state, f, indent=2)
          
          # Save cycle results
          with open('.autonomous-coding-session/cycle_results.json', 'w') as f:
              json.dump(cycle_results, f, indent=2)
          
          print(f"\n🎉 Autonomous Coding and Perplexity Research Cycle Complete!")
          print(f"📊 Total Cycles: {len(cycle_results)}")
          print(f"📈 Total Tasks Completed: {total_tasks_completed}")
          print(f"🔬 Research Cycles Triggered: {sum(1 for r in cycle_results if r['research_triggered'])}")
          
          # Set outputs for GitHub Actions
          with open(os.environ['GITHUB_ENV'], 'a') as f:
              f.write(f"total_cycles={len(cycle_results)}\n")
              f.write(f"total_tasks={total_tasks_completed}\n")
              f.write(f"research_cycles={sum(1 for r in cycle_results if r['research_triggered'])}\n")
          
          EOF

      - name: Commit Autonomous Coding Changes
        id: commit
        run: |
          echo "💾 Committing autonomous coding and research changes..."
          
          # Check if there are changes to commit
          git add -A
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "changes_made=false" >> $GITHUB_OUTPUT
          else
            # Create comprehensive commit message
            SESSION_ID=$(cat .autonomous-coding-session/session_id)
            
            COMMIT_MSG="🤖 Autonomous Coding & Perplexity Research Cycle: $SESSION_ID

            - Executed ${{ env.total_cycles }} autonomous coding cycles
            - Completed ${{ env.total_tasks }} development tasks total
            - Triggered ${{ env.research_cycles }} Perplexity research cycles
            - Updated roadmaps with latest insights and priorities
            - Session trigger: ${{ needs.detect-trigger.outputs.trigger_type }}

            This commit represents continuous autonomous development with:
            • GitHub Copilot coding agent task execution
            • Perplexity browser research for roadmap updates
            • Automatic cycle management and threshold-based research
            • Research-driven roadmap updates for continuous improvement
            
            Generated by Autonomous Coding & Perplexity Research Cycle using $PERPLEXITY_MODEL"
            
            git commit -m "$COMMIT_MSG"
            git push origin HEAD
            
            echo "changes_made=true" >> $GITHUB_OUTPUT
            echo "✅ Autonomous coding changes committed and pushed"
          fi

      - name: Generate Comprehensive Session Report
        id: report
        run: |
          echo "📊 Generating comprehensive autonomous coding session report..."
          
          SESSION_ID=$(cat .autonomous-coding-session/session_id)
          
          cat > .autonomous-coding-session/comprehensive_report.md << EOF
          # 🤖 Autonomous Coding & Perplexity Research Session Report
          
          **Session ID**: $SESSION_ID
          **Completed**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          **Trigger**: ${{ needs.detect-trigger.outputs.trigger_type }}
          **Duration**: Approximately $(($(date +%s) - $(date -d "1 hour ago" +%s))) seconds
          
          ## 📊 Cycle Summary
          
          - **Total Cycles Executed**: ${{ env.total_cycles }}
          - **Total Tasks Completed**: ${{ env.total_tasks }}
          - **Research Cycles Triggered**: ${{ env.research_cycles }}
          - **Task Threshold**: $TASK_THRESHOLD per cycle
          - **Changes Committed**: ${{ steps.commit.outputs.changes_made }}
          - **Perplexity Model Used**: $PERPLEXITY_MODEL
          
          ## 🔄 Cycle Flow Explanation
          
          ### Phase 1: Autonomous Coding
          - GitHub Copilot coding agent analyzes roadmap files
          - Identifies and executes actionable development tasks
          - Focuses on implementation, optimization, and feature development
          - Tracks task completion against threshold ($TASK_THRESHOLD tasks)
          
          ### Phase 2: Research Trigger (When Threshold Reached)
          - Perplexity browser research analyzes repository and codebase
          - Identifies new opportunities, trends, and improvements
          - Conducts comprehensive analysis of current state and industry trends
          - Generates specific actionable recommendations for next cycle
          
          ### Phase 3: Roadmap Updates
          - Research insights automatically integrated into roadmap files
          - New tasks, features, and improvements added to development queue
          - Priority updates based on research findings and current trends
          - Prepares for next autonomous coding cycle
          
          ## 📁 Session Artifacts
          
          - Cycle State: \`.autonomous-coding-session/cycle_state.json\`
          - Cycle Results: \`.autonomous-coding-session/cycle_results.json\`
          - Research Results: \`.autonomous-coding-session/research_cycle_*.md\`
          - Session Report: \`.autonomous-coding-session/comprehensive_report.md\`
          
          ## 🔄 Continuous Autonomous Development
          
          This session demonstrates the complete autonomous development loop:
          
          1. **Code Tasks** → GitHub Copilot executes development tasks from roadmap
          2. **Threshold Check** → Monitor task completion against threshold ($TASK_THRESHOLD)
          3. **Research Trigger** → Perplexity analyzes repository and trends when threshold reached
          4. **Roadmap Update** → Research insights feed back into development roadmap
          5. **Next Cycle** → Updated roadmap triggers new coding tasks
          6. **Repeat** → Continuous improvement cycle continues
          
          ## 🔄 Next Scheduled Activities
          
          - **Automatic Trigger**: Every 4 hours via scheduled workflow
          - **Manual Trigger**: Use \`@copilot autonomous coding\` in comments
          - **Threshold-Based**: Research triggers automatically when task thresholds are met
          - **Continuous Operation**: System designed for 24/7 autonomous development
          
          **Next Scheduled Run**: $(date -d "+4 hours" -u '+%Y-%m-%d %H:%M UTC')
          
          EOF
          
          echo "report_path=.autonomous-coding-session/comprehensive_report.md" >> $GITHUB_OUTPUT

      - name: Upload Session Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: autonomous-coding-session-${{ steps.init.outputs.session_id }}
          path: |
            .autonomous-coding-session/
          retention-days: 30

      - name: Post Session Results Comment
        if: needs.detect-trigger.outputs.trigger_type == 'comment'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let reportContent = '';
            try {
              reportContent = fs.readFileSync('${{ steps.report.outputs.report_path }}', 'utf8');
            } catch (error) {
              reportContent = `## 🤖 Autonomous Coding & Research Session Complete
              
              Session completed but report could not be loaded.
              Check workflow artifacts for detailed results.
              
              **Workflow Run**: [View details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              
              ### Quick Summary:
              - **Cycles Executed**: ${{ env.total_cycles }}
              - **Tasks Completed**: ${{ env.total_tasks }}
              - **Research Cycles**: ${{ env.research_cycles }}
              `;
            }
            
            const comment = `## 🤖 Autonomous Coding & Perplexity Research Results
            
            Your autonomous coding request has been processed with the complete coding-research integration loop!
            
            ${reportContent}
            
            ### 🔄 Continuous Autonomous Development
            
            The system now operates with tight integration between:
            - **GitHub Copilot Coding Agent**: Executes development tasks from roadmap
            - **Perplexity Browser Research**: Analyzes repository and updates roadmap when thresholds are met
            - **Automatic Cycle Management**: Continuous loop between coding and research phases
            
            **Available Triggers**:
            - **Scheduled**: Every 4 hours automatically
            - **Manual**: Use \`@copilot autonomous coding\` or \`/autonomous-coding-cycle\`
            - **Threshold-based**: Research triggers automatically after task completion
            
            **Workflow**: [View run details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ---
            *Generated by Autonomous Coding & Perplexity Research Cycle*`;
            
            // Determine context (issue or PR)
            const contextNumber = ${{ github.event.issue.number || github.event.pull_request.number || 'null' }};
            
            if (contextNumber) {
              await github.rest.issues.createComment({
                issue_number: contextNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

      - name: Trigger GitHub Copilot Coding Agent
        if: steps.commit.outputs.changes_made == 'true'
        run: |
          echo "🔄 Triggering GitHub Copilot Coding Agent for next cycle..."
          
          # Check if there are updated roadmap files that should trigger coding agent
          if [ -f "ROADMAP.md" ] || [ -f "AUTONOMOUS_DEVELOPMENT_ROADMAP.md" ]; then
            echo "✅ Roadmap files updated, coding agent will pick up new tasks on next trigger"
            
            # Optional: Trigger specific Copilot workflows if available
            if [ -f ".github/workflows/copilot-slash-commands.yml" ]; then
              echo "🤖 Copilot slash commands workflow available for manual triggering"
            fi
            
            if [ -f ".github/workflows/gpt5-advanced-multimodel.yml" ]; then
              echo "🧠 GPT-5 advanced multimodel workflow available for analysis"
            fi
          fi
          
          echo "🎯 Autonomous coding cycle complete! System ready for continuous operation."