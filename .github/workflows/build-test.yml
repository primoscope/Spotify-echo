name: Build and Test Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        python-version: [3.9, 3.10]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install Node.js dependencies
      run: npm ci

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint JavaScript/TypeScript
      run: npm run lint

    - name: Lint Python
      run: |
        pip install flake8 black
        flake8 scripts/ --max-line-length=100
        black --check scripts/

    - name: Type check TypeScript
      run: |
        npm install -g typescript
        tsc --noEmit

    - name: Run unit tests
      run: npm test

    - name: Run Python tests
      run: |
        pip install pytest pytest-cov
        pytest scripts/tests/ --cov=scripts/ --cov-report=xml

    - name: Coverage gate check
      run: |
        # TODO: Implement coverage gate script
        echo "Coverage gate check - placeholder"
        ./scripts/testing/coverage_gate.py --threshold 70

    - name: Build application
      run: npm run build

    - name: Build Docker image
      run: |
        docker build -t echotune-ai:${{ github.sha }} .

    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 3000:3000 echotune-ai:${{ github.sha }}
        sleep 10
        curl -f http://localhost:3000/health || exit 1
        docker stop test-container

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}-${{ matrix.python-version }}
        path: |
          coverage/
          test-results/
          jest-junit.xml

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts-${{ github.sha }}
        path: |
          dist/
          build/

  integration-tests:
    runs-on: ubuntu-latest
    needs: build-test

    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Wait for services
      run: |
        timeout 60 bash -c 'until nc -z localhost 27017; do sleep 1; done'
        timeout 60 bash -c 'until nc -z localhost 6379; do sleep 1; done'

    - name: Run integration tests
      env:
        MONGODB_URI: mongodb://admin:password@localhost:27017/test?authSource=admin
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test
      run: npm run test:integration

    - name: Run E2E tests
      run: |
        npm run test:playwright

    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          playwright-report/
          test-results/

  quality-gates:
    runs-on: ubuntu-latest
    needs: [build-test, integration-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download test artifacts
      uses: actions/download-artifact@v3
      with:
        pattern: test-results-*
        merge-multiple: true

    - name: Performance gate check
      run: |
        # TODO: Implement performance gate script
        echo "Performance gate check - placeholder"
        ./scripts/testing/perf_gate.py --latency-threshold 500

    - name: Security baseline check
      run: |
        # TODO: Implement security baseline script
        echo "Security baseline check - placeholder"
        ./scripts/validation/security_baseline.py

    - name: Model validation (if applicable)
      run: |
        # TODO: Implement model validation script
        echo "Model validation check - placeholder"
        if [ -f "models/" ]; then
          ./scripts/validation/model_integrity.py
        fi

    - name: Deploy readiness check
      run: |
        echo "Deploy readiness validation - placeholder"
        ./scripts/validation/deploy_readiness.py --environment staging