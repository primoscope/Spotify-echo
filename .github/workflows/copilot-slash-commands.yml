---
name: Enhanced Copilot Slash Commands

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  process-commands:
    name: Process Slash Commands
    runs-on: ubuntu-latest

    # Only process commands from authorized users and valid contexts
    if: |
      (github.event.issue.number || github.event.pull_request.number) &&
      startsWith(github.event.comment.body, '/') &&
      (github.event.comment.author_association == 'OWNER' ||
       github.event.comment.author_association == 'COLLABORATOR' ||
       github.event.comment.author_association == 'MEMBER')

    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: write
      checks: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Parse Command
        id: parse
        run: |
          COMMENT_BODY="${{ github.event.comment.body }}"
          echo "comment_body=$COMMENT_BODY" >> $GITHUB_OUTPUT

          # Extract command and parameters
          COMMAND=$(echo "$COMMENT_BODY" | head -n 1 | sed 's/^\/\([a-zA-Z-]*\).*/\1/')
          PARAMS=$(echo "$COMMENT_BODY" | head -n 1 | sed 's/^\/[a-zA-Z-]* *//')

          echo "command=$COMMAND" >> $GITHUB_OUTPUT
          echo "params=$PARAMS" >> $GITHUB_OUTPUT

          # Get context information
          if [ "${{ github.event.issue.number }}" != "" ]; then
            echo "context_type=issue" >> $GITHUB_OUTPUT
            echo "context_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          else
            echo "context_type=pull_request" >> $GITHUB_OUTPUT
            echo "context_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          fi

          echo "Parsed command: $COMMAND"
          echo "Parameters: $PARAMS"

      - name: Execute Review Docs Command
        if: steps.parse.outputs.command == 'review-docs'
        run: |
          echo "🔍 Executing /review-docs command..."

          CONTEXT_NUMBER="${{ steps.parse.outputs.context_number }}"
          PARAMS="${{ steps.parse.outputs.params }}"

          # Run comprehensive documentation analysis using our dedicated script
          echo "📊 Running comprehensive documentation analysis..."
          
          if [ -f scripts/documentation-reviewer.js ]; then
            node scripts/documentation-reviewer.js > docs-command-results.log 2>&1
            
            # Check if analysis files were generated
            if [ -f documentation-analysis-summary.md ]; then
              echo "✅ Documentation analysis completed successfully"
              echo "analysis_status=completed" >> $GITHUB_ENV
            else
              echo "⚠️ Documentation analysis completed but no summary generated"
              echo "analysis_status=partial" >> $GITHUB_ENV
            fi
          else
            echo "❌ Documentation reviewer script not found, using fallback analysis"
            echo "analysis_status=fallback" >> $GITHUB_ENV
            
            # Create fallback summary
            cat > documentation-analysis-summary.md << 'EOF'
          # 📚 Documentation Analysis Summary (Fallback)

          **Analysis Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')  

          ## 🚨 Script Missing
          The comprehensive documentation reviewer script was not found.

          ## 🛠️ Next Steps
          1. Ensure `scripts/documentation-reviewer.js` exists
          2. Re-run the `/review-docs` command
          3. Contact the development team if issues persist

          ---
          *Fallback analysis generated*
          EOF
          fi
          
          # Log results
          echo "📄 Documentation analysis results:"
          cat docs-command-results.log || echo "No results log generated"

      - name: Post Documentation Analysis Results
        if: steps.parse.outputs.command == 'review-docs'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const contextNumber = '${{ steps.parse.outputs.context_number }}';
            const analysisStatus = process.env.analysis_status;
            
            let analysisContent = '';
            try {
              analysisContent = fs.readFileSync('documentation-analysis-summary.md', 'utf8');
            } catch (error) {
              analysisContent = `## 📚 Documentation Analysis Failed
              
              **Command**: \`/review-docs\`  
              **Error**: Could not read analysis results
              **Status**: ${analysisStatus}
              
              Please check the workflow logs for more details.
              
              **Available Commands**:
              - \`/review-docs\` - Analyze repository documentation
              - \`/gpt5 analyze\` - Trigger GPT-5 analysis
              - \`/run-mcp-all\` - Run MCP validation
              `;
            }

            // Add header with workflow information
            const fullComment = `## 📚 Documentation Review Results

            **Command**: \`/review-docs ${{ steps.parse.outputs.params }}\`  
            **Executed by**: @${{ github.actor }}  
            **Status**: ${analysisStatus}  
            **Timestamp**: ${new Date().toISOString()}  
            **Workflow**: [View run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ${analysisContent}

            ### 🔄 Available Follow-up Commands
            
            - \`/create-api-docs\` - Generate comprehensive API documentation
            - \`/create-architecture\` - Generate system architecture documentation  
            - \`/create-contributing\` - Generate contributing guidelines
            - \`/gpt5 analyze\` - Trigger comprehensive GPT-5 analysis
            - \`/run-mcp-all\` - Run comprehensive MCP validation

            ---
            *Analysis executed by Enhanced Copilot Slash Commands*`;

            // Post the comment
            const { data: comment } = await github.rest.issues.createComment({
              issue_number: contextNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: fullComment
            });

            console.log(`Posted documentation analysis comment: ${comment.html_url}`);

      - name: Upload Documentation Analysis Artifacts
        if: steps.parse.outputs.command == 'review-docs'
        uses: actions/upload-artifact@v4
        with:
          name: documentation-analysis-results
          path: |
            documentation-analysis-summary.md
            documentation-analysis-report.json
            docs-command-results.log
          retention-days: 30

      - name: Execute Perplexity Research Command
        if: |
          contains(steps.parse.outputs.command, 'perplexity') || 
          contains(steps.parse.outputs.command, 'start-autonomous-development') ||
          contains(steps.parse.outputs.comment_body, '@copilot use perplexity browser research') ||
          contains(steps.parse.outputs.comment_body, 'autonomous development')
        run: |
          echo "🔍 Executing Perplexity/Autonomous Development command..."
          
          CONTEXT_NUMBER="${{ steps.parse.outputs.context_number }}"
          COMMENT_BODY="${{ steps.parse.outputs.comment_body }}"
          
          # Trigger autonomous development workflow
          gh workflow run autonomous-perplexity-development-cycle.yml \
            --field force_start=true \
            --field max_iterations=3 \
            --field focus_area="user-requested autonomous development"
            
          echo "✅ Autonomous development workflow triggered"

      - name: Post Perplexity Command Response
        if: |
          contains(steps.parse.outputs.command, 'perplexity') || 
          contains(steps.parse.outputs.command, 'start-autonomous-development') ||
          contains(steps.parse.outputs.comment_body, '@copilot use perplexity browser research') ||
          contains(steps.parse.outputs.comment_body, 'autonomous development')
        uses: actions/github-script@v7
        with:
          script: |
            const contextNumber = '${{ steps.parse.outputs.context_number }}';
            const commentBody = '${{ steps.parse.outputs.comment_body }}';
            
            const responseMessage = `## 🤖 Autonomous Development Cycle Initiated
            
            **Request**: Perplexity browser research and autonomous development
            **Status**: ✅ Workflow triggered successfully
            **Estimated Duration**: 5-10 minutes for complete cycle
            
            ## 🔄 What's Happening:
            
            1. **📋 Roadmap Analysis**: Using Perplexity AI to analyze current roadmap and identify actionable tasks
            2. **🔧 Task Execution**: Implementing identified development tasks with appropriate AI model selection
            3. **🔍 Research & Update**: Conducting comprehensive browser research to update roadmap with latest insights
            4. **📊 Progress Tracking**: Generating detailed reports and updating development documentation
            
            ## 🎯 Autonomous Development Features:
            
            - **Smart Model Selection**: Complexity-based routing (Sonar/Sonar-Reasoning/Sonar-Pro)
            - **Budget Management**: $3/week Perplexity budget with 80% usage alerts
            - **Research Caching**: 14-day TTL to optimize costs and performance
            - **Continuous Learning**: Research insights feed back into development priorities
            
            ## 📈 Expected Outcomes:
            
            - **Updated Roadmap**: Enhanced with latest research insights and priorities
            - **Code Implementations**: Production-ready code for identified tasks  
            - **Documentation Updates**: Comprehensive session reports and progress tracking
            - **Next Steps**: Automated identification of follow-up development opportunities
            
            ## 🔗 Monitor Progress:
            
            - **Workflow Run**: [View live progress](${{ github.server_url }}/${{ github.repository }}/actions)
            - **Session Artifacts**: Will be available after completion
            - **Updated Files**: ROADMAP.md, AUTONOMOUS_DEVELOPMENT_ROADMAP.md, and implementation files
            
            ## 🔄 Continuous Development:
            
            This autonomous development cycle will:
            - Continue automatically based on research findings
            - Schedule follow-up analysis every 6 hours  
            - Trigger on future roadmap updates
            - Respond to additional \`@copilot use perplexity browser research\` requests
            
            **The autonomous development system is now active and will provide continuous improvements to the EchoTune AI platform.**
            
            ---
            *Initiated by Enhanced Copilot Slash Commands with Perplexity Integration*`;
            
            await github.rest.issues.createComment({
              issue_number: contextNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: responseMessage
            });

      - name: Handle Other Commands
        if: |
          steps.parse.outputs.command != 'review-docs' &&
          !contains(steps.parse.outputs.command, 'perplexity') && 
          !contains(steps.parse.outputs.command, 'start-autonomous-development') &&
          !contains(steps.parse.outputs.comment_body, '@copilot use perplexity browser research') &&
          !contains(steps.parse.outputs.comment_body, 'autonomous development') &&
          steps.parse.outputs.command != ''
        uses: actions/github-script@v7
        with:
          script: |
            const command = '${{ steps.parse.outputs.command }}';
            const contextNumber = '${{ steps.parse.outputs.context_number }}';
            
            const supportedCommands = [
              'review-docs',
              'gpt5', 
              'analyze-gpt5',
              'review-gpt5', 
              'optimize-gpt5',
              'run-mcp-all',
              'mcp-health-check',
              'start-autonomous-development',
              'perplexity-research'
            ];
            
            let responseMessage = '';
            
            if (['gpt5', 'analyze-gpt5', 'review-gpt5', 'optimize-gpt5'].includes(command)) {
              responseMessage = `## 🤖 GPT-5 Command Detected
              
              **Command**: \`/${command}\`  
              **Status**: Redirecting to GPT-5 workflow...
              
              Your GPT-5 analysis request has been detected and will be processed by the dedicated GPT-5 workflow.
              
              **Expected Processing Time**: 2-3 minutes  
              **Track Progress**: [View workflow runs](${{ github.server_url }}/${{ github.repository }}/actions)
              
              The GPT-5 analysis results will be posted as a separate comment when complete.`;
              
            } else if (['run-mcp-all', 'mcp-health-check'].includes(command)) {
              responseMessage = `## 🔧 MCP Command Detected
              
              **Command**: \`/${command}\`  
              **Status**: Redirecting to MCP workflow...
              
              Your MCP command has been detected and will be processed by the dedicated MCP slash commands workflow.
              
              **Track Progress**: [View workflow runs](${{ github.server_url }}/${{ github.repository }}/actions)
              
              The MCP results will be posted as a separate comment when complete.`;
              
            } else {
              responseMessage = `## ❓ Unrecognized Command
              
              **Command**: \`/${command}\`  
              **Status**: Not supported by this workflow
              
              ### ✅ Supported Commands:
              - \`/review-docs\` - Comprehensive documentation analysis
              - \`/gpt5 analyze\` - Trigger GPT-5 repository analysis  
              - \`/analyze-gpt5\` - Same as above
              - \`/review-gpt5\` - GPT-5 code review focus
              - \`/optimize-gpt5\` - GPT-5 optimization analysis
              - \`/run-mcp-all\` - Comprehensive MCP validation
              - \`/mcp-health-check\` - Quick MCP health check
              - \`/start-autonomous-development\` - Begin autonomous development cycle
              - \`@copilot use perplexity browser research\` - Trigger research-driven development
              
              ### 🔍 Autonomous Development:
              - \`@copilot use perplexity browser research\` - Full autonomous cycle with roadmap updates
              - \`/start-autonomous-development\` - Direct autonomous development trigger
              - Comments containing "autonomous development" - Natural language triggers
              
              ### 📚 Usage Examples:
              - \`/review-docs\` - Analyze all documentation
              - \`/review-docs api\` - Focus on API documentation
              - \`/gpt5 analyze scripts/\` - Analyze specific directory
              - \`@copilot use perplexity browser research\` - Start comprehensive development cycle
              
              **Need Help?** Check the [workflow documentation](${{ github.server_url }}/${{ github.repository }}/tree/main/.github/workflows) for more details.`;
            }
            
            await github.rest.issues.createComment({
              issue_number: contextNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: responseMessage
            });