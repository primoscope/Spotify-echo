---
name: Enhanced Copilot Slash Commands

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  process-commands:
    name: Process Slash Commands
    runs-on: ubuntu-latest

    # Only process commands from authorized users and valid contexts
    if: |
      (github.event.issue.number || github.event.pull_request.number) &&
      startsWith(github.event.comment.body, '/') &&
      (github.event.comment.author_association == 'OWNER' ||
       github.event.comment.author_association == 'COLLABORATOR' ||
       github.event.comment.author_association == 'MEMBER')

    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: write
      checks: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Parse Command
        id: parse
        run: |
          COMMENT_BODY="${{ github.event.comment.body }}"
          echo "comment_body=$COMMENT_BODY" >> $GITHUB_OUTPUT

          # Extract command and parameters
          COMMAND=$(echo "$COMMENT_BODY" | head -n 1 | sed 's/^\/\([a-zA-Z-]*\).*/\1/')
          PARAMS=$(echo "$COMMENT_BODY" | head -n 1 | sed 's/^\/[a-zA-Z-]* *//')

          echo "command=$COMMAND" >> $GITHUB_OUTPUT
          echo "params=$PARAMS" >> $GITHUB_OUTPUT

          # Get context information
          if [ "${{ github.event.issue.number }}" != "" ]; then
            echo "context_type=issue" >> $GITHUB_OUTPUT
            echo "context_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          else
            echo "context_type=pull_request" >> $GITHUB_OUTPUT
            echo "context_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          fi

          echo "Parsed command: $COMMAND"
          echo "Parameters: $PARAMS"

      - name: Execute Review Docs Command
        if: steps.parse.outputs.command == 'review-docs'
        run: |
          echo "🔍 Executing /review-docs command..."

          CONTEXT_NUMBER="${{ steps.parse.outputs.context_number }}"
          PARAMS="${{ steps.parse.outputs.params }}"

          # Run comprehensive documentation analysis using our dedicated script
          echo "📊 Running comprehensive documentation analysis..."
          
          if [ -f scripts/documentation-reviewer.js ]; then
            node scripts/documentation-reviewer.js > docs-command-results.log 2>&1
            
            # Check if analysis files were generated
            if [ -f documentation-analysis-summary.md ]; then
              echo "✅ Documentation analysis completed successfully"
              echo "analysis_status=completed" >> $GITHUB_ENV
            else
              echo "⚠️ Documentation analysis completed but no summary generated"
              echo "analysis_status=partial" >> $GITHUB_ENV
            fi
          else
            echo "❌ Documentation reviewer script not found, using fallback analysis"
            echo "analysis_status=fallback" >> $GITHUB_ENV
            
            # Create fallback summary
            cat > documentation-analysis-summary.md << 'EOF'
          # 📚 Documentation Analysis Summary (Fallback)

          **Analysis Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')  

          ## 🚨 Script Missing
          The comprehensive documentation reviewer script was not found.

          ## 🛠️ Next Steps
          1. Ensure `scripts/documentation-reviewer.js` exists
          2. Re-run the `/review-docs` command
          3. Contact the development team if issues persist

          ---
          *Fallback analysis generated*
          EOF
          fi
          
          # Log results
          echo "📄 Documentation analysis results:"
          cat docs-command-results.log || echo "No results log generated"

      - name: Post Documentation Analysis Results
        if: steps.parse.outputs.command == 'review-docs'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const contextNumber = '${{ steps.parse.outputs.context_number }}';
            const analysisStatus = process.env.analysis_status;
            
            let analysisContent = '';
            try {
              analysisContent = fs.readFileSync('documentation-analysis-summary.md', 'utf8');
            } catch (error) {
              analysisContent = `## 📚 Documentation Analysis Failed
              
              **Command**: \`/review-docs\`  
              **Error**: Could not read analysis results
              **Status**: ${analysisStatus}
              
              Please check the workflow logs for more details.
              
              **Available Commands**:
              - \`/review-docs\` - Analyze repository documentation
              - \`/gpt5 analyze\` - Trigger GPT-5 analysis
              - \`/run-mcp-all\` - Run MCP validation
              `;
            }

            // Add header with workflow information
            const fullComment = `## 📚 Documentation Review Results

            **Command**: \`/review-docs ${{ steps.parse.outputs.params }}\`  
            **Executed by**: @${{ github.actor }}  
            **Status**: ${analysisStatus}  
            **Timestamp**: ${new Date().toISOString()}  
            **Workflow**: [View run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ${analysisContent}

            ### 🔄 Available Follow-up Commands
            
            - \`/create-api-docs\` - Generate comprehensive API documentation
            - \`/create-architecture\` - Generate system architecture documentation  
            - \`/create-contributing\` - Generate contributing guidelines
            - \`/gpt5 analyze\` - Trigger comprehensive GPT-5 analysis
            - \`/run-mcp-all\` - Run comprehensive MCP validation

            ---
            *Analysis executed by Enhanced Copilot Slash Commands*`;

            // Post the comment
            const { data: comment } = await github.rest.issues.createComment({
              issue_number: contextNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: fullComment
            });

            console.log(`Posted documentation analysis comment: ${comment.html_url}`);

      - name: Upload Documentation Analysis Artifacts
        if: steps.parse.outputs.command == 'review-docs'
        uses: actions/upload-artifact@v4
        with:
          name: documentation-analysis-results
          path: |
            documentation-analysis-summary.md
            documentation-analysis-report.json
            docs-command-results.log
          retention-days: 30

      - name: Execute Specific Perplexity Commands
        if: |
          steps.parse.outputs.command == 'perplexity-analyze' ||
          steps.parse.outputs.command == 'perplexity-research' ||
          steps.parse.outputs.command == 'perplexity-roadmap-update' ||
          steps.parse.outputs.command == 'perplexity-budget-check' ||
          steps.parse.outputs.command == 'perplexity-optimize-costs' ||
          steps.parse.outputs.command == 'analyze-perplexity' ||
          steps.parse.outputs.command == 'research-perplexity'
        run: |
          echo "🔍 Executing specific Perplexity command: ${{ steps.parse.outputs.command }}"
          
          COMMAND="${{ steps.parse.outputs.command }}"
          PARAMS="${{ steps.parse.outputs.params }}"
          CONTEXT_NUMBER="${{ steps.parse.outputs.context_number }}"
          
          # Set specific parameters based on command
          case "$COMMAND" in
            "perplexity-analyze" | "analyze-perplexity")
              FOCUS_AREA="analysis:$PARAMS"
              MAX_ITERATIONS=2
              ;;
            "perplexity-research" | "research-perplexity")  
              FOCUS_AREA="research:$PARAMS"
              MAX_ITERATIONS=1
              ;;
            "perplexity-roadmap-update")
              FOCUS_AREA="roadmap-update"
              MAX_ITERATIONS=1
              ;;
            "perplexity-budget-check")
              # Handle budget check directly without workflow
              python3 -c "
          import sys
          sys.path.append('scripts')
          from perplexity_client import PerplexityClient
          client = PerplexityClient()
          status = client.budget_manager.check_budget()
          print(f'💰 Budget Status: {status[\"status\"]}')
          print(f'💳 Used: \$${status[\"total_cost\"]:.4f} / \$${status[\"weekly_budget\"]:.2f}')  
          print(f'📊 Usage: {status[\"budget_used_pct\"]:.1f}%')
          print(f'📞 Requests: {status[\"request_count\"]}')
          print(f'📅 Week: {status[\"week_key\"]}')
              " > perplexity-budget-status.txt
              echo "budget_check_only=true" >> $GITHUB_ENV
              exit 0
              ;;
            "perplexity-optimize-costs")
              FOCUS_AREA="cost-optimization"
              MAX_ITERATIONS=1
              ;;
            *)
              FOCUS_AREA="general"
              MAX_ITERATIONS=2
              ;;
          esac
          
          echo "🚀 Triggering autonomous development with focus: $FOCUS_AREA"
          
          # Trigger autonomous development workflow with specific parameters
          gh workflow run autonomous-perplexity-development-cycle.yml \
            --field force_start=true \
            --field max_iterations="$MAX_ITERATIONS" \
            --field focus_area="$FOCUS_AREA"
            
          echo "✅ Perplexity command workflow triggered"

      - name: Execute General Perplexity Research Command
        if: |
          (contains(steps.parse.outputs.command, 'perplexity') && 
           !contains(steps.parse.outputs.command, 'perplexity-')) ||
          steps.parse.outputs.command == 'start-autonomous-development' ||
          contains(steps.parse.outputs.comment_body, '@copilot use perplexity browser research') ||
          contains(steps.parse.outputs.comment_body, 'autonomous development')
        run: |
          echo "🔍 Executing General Perplexity/Autonomous Development command..."
          
          CONTEXT_NUMBER="${{ steps.parse.outputs.context_number }}"
          COMMENT_BODY="${{ steps.parse.outputs.comment_body }}"
          
          # Trigger autonomous development workflow
          gh workflow run autonomous-perplexity-development-cycle.yml \
            --field force_start=true \
            --field max_iterations=3 \
            --field focus_area="user-requested autonomous development"
            
          echo "✅ Autonomous development workflow triggered"

      - name: Post Perplexity Budget Check Response
        if: env.budget_check_only == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const contextNumber = '${{ steps.parse.outputs.context_number }}';
            
            let budgetStatus = '';
            try {
              budgetStatus = fs.readFileSync('perplexity-budget-status.txt', 'utf8');
            } catch (error) {
              budgetStatus = '❌ Could not read budget status';
            }
            
            const responseMessage = `## 💰 Perplexity Budget Status
            
            **Command**: \`/${{ steps.parse.outputs.command }}\`
            **Executed by**: @${{ github.actor }}
            
            \`\`\`
            ${budgetStatus}
            \`\`\`
            
            ### 📊 Budget Management Features:
            
            - **Weekly Budget**: $3.00 USD limit with automatic enforcement
            - **Cost Tracking**: Real-time usage monitoring and alerts
            - **Budget Alerts**: 80% usage warnings, 100% usage locks
            - **Cache System**: 14-day TTL to reduce API costs
            - **Model Selection**: Complexity-based routing to optimize costs
            
            ### 🔄 Related Commands:
            
            - \`/perplexity-optimize-costs\` - Analyze and optimize Perplexity usage
            - \`/perplexity-analyze <scope>\` - Targeted analysis with cost control
            - \`/perplexity-research <topic>\` - Focused research with budget awareness
            
            ---
            *Budget check executed by Enhanced Copilot Slash Commands*`;
            
            await github.rest.issues.createComment({
              issue_number: contextNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: responseMessage
            });

      - name: Post Specific Perplexity Command Response
        if: |
          (steps.parse.outputs.command == 'perplexity-analyze' ||
           steps.parse.outputs.command == 'perplexity-research' ||
           steps.parse.outputs.command == 'perplexity-roadmap-update' ||
           steps.parse.outputs.command == 'perplexity-optimize-costs' ||
           steps.parse.outputs.command == 'analyze-perplexity' ||
           steps.parse.outputs.command == 'research-perplexity') &&
          env.budget_check_only != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const contextNumber = '${{ steps.parse.outputs.context_number }}';
            const command = '${{ steps.parse.outputs.command }}';
            const params = '${{ steps.parse.outputs.params }}';
            
            const commandDescriptions = {
              'perplexity-analyze': 'Comprehensive analysis using Perplexity AI with targeted scope',
              'analyze-perplexity': 'Comprehensive analysis using Perplexity AI with targeted scope',
              'perplexity-research': 'Focused research on specific topics using Perplexity browser search',
              'research-perplexity': 'Focused research on specific topics using Perplexity browser search',
              'perplexity-roadmap-update': 'Update roadmap with latest Perplexity research insights',
              'perplexity-optimize-costs': 'Analyze and optimize Perplexity API usage patterns'
            };
            
            const commandFocus = {
              'perplexity-analyze': 'analysis',
              'analyze-perplexity': 'analysis', 
              'perplexity-research': 'research',
              'research-perplexity': 'research',
              'perplexity-roadmap-update': 'roadmap updates',
              'perplexity-optimize-costs': 'cost optimization'
            };
            
            const description = commandDescriptions[command] || 'Perplexity AI processing';
            const focus = commandFocus[command] || 'general processing';
            
            const responseMessage = `## 🤖 Specific Perplexity Command Initiated
            
            **Command**: \`/${command} ${params}\`
            **Description**: ${description}
            **Focus Area**: ${focus}
            **Status**: ✅ Autonomous workflow triggered successfully
            
            ## 🔄 What's Happening:
            
            1. **🎯 Focused Processing**: ${description}
            2. **🔍 Targeted Research**: Optimized for ${focus} with reduced iteration count
            3. **💰 Budget Awareness**: Cost-optimized execution with complexity-based model selection
            4. **📊 Specific Outcomes**: Results tailored to your specific request
            
            ## 🎯 Command-Specific Features:
            
            ${command.includes('analyze') ? `
            ### 📊 Analysis Focus:
            - **Scope**: ${params || 'Full repository analysis'}
            - **Depth**: Comprehensive technical analysis with actionable insights
            - **Model Selection**: Complexity-based routing for optimal cost/quality balance
            - **Output**: Detailed analysis report with implementation recommendations
            ` : ''}
            
            ${command.includes('research') ? `
            ### 🔍 Research Focus:
            - **Topic**: ${params || 'General EchoTune development research'}
            - **Browser Search**: Latest trends, best practices, and technologies
            - **Integration**: Research results integrated into development roadmap
            - **Caching**: 14-day cache to optimize costs and performance
            ` : ''}
            
            ${command.includes('roadmap') ? `
            ### 📋 Roadmap Update Focus:
            - **Research Integration**: Latest findings integrated into roadmap
            - **Priority Updates**: Tasks reprioritized based on current trends
            - **Implementation Plans**: Updated strategies and approaches
            - **Timeline Adjustments**: Realistic scheduling based on complexity
            ` : ''}
            
            ${command.includes('optimize') ? `
            ### 💰 Cost Optimization Focus:
            - **Usage Analysis**: Review current Perplexity API usage patterns
            - **Model Efficiency**: Optimize model selection for cost/performance
            - **Caching Strategy**: Improve cache hit rates and TTL settings
            - **Budget Management**: Weekly budget optimization recommendations
            ` : ''}
            
            ## 📈 Expected Outcomes:
            
            - **Faster Execution**: Reduced iterations for focused processing
            - **Targeted Results**: Specific outputs aligned with your command
            - **Cost Efficient**: Optimized for budget-conscious operation
            - **Actionable Insights**: Clear next steps and recommendations
            
            ## 🔗 Monitor Progress:
            
            - **Workflow Run**: [View live progress](${{ github.server_url }}/${{ github.repository }}/actions)
            - **Session Artifacts**: Available after completion with detailed logs
            - **Estimated Duration**: 3-5 minutes for focused processing
            
            **The specific Perplexity command is now active and will provide targeted results based on your request.**
            
            ---
            *Initiated by Enhanced Copilot Slash Commands with Specific Perplexity Integration*`;
            
            await github.rest.issues.createComment({
              issue_number: contextNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: responseMessage
            });

      - name: Post General Perplexity Command Response
        if: |
          ((contains(steps.parse.outputs.command, 'perplexity') && 
            !contains(steps.parse.outputs.command, 'perplexity-')) ||
           steps.parse.outputs.command == 'start-autonomous-development' ||
           contains(steps.parse.outputs.comment_body, '@copilot use perplexity browser research') ||
           contains(steps.parse.outputs.comment_body, 'autonomous development')) &&
          env.budget_check_only != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const contextNumber = '${{ steps.parse.outputs.context_number }}';
            const commentBody = '${{ steps.parse.outputs.comment_body }}';
            
            const responseMessage = `## 🤖 Autonomous Development Cycle Initiated
            
            **Request**: Perplexity browser research and autonomous development
            **Status**: ✅ Workflow triggered successfully
            **Estimated Duration**: 5-10 minutes for complete cycle
            
            ## 🔄 What's Happening:
            
            1. **📋 Roadmap Analysis**: Using Perplexity AI to analyze current roadmap and identify actionable tasks
            2. **🔧 Task Execution**: Implementing identified development tasks with appropriate AI model selection
            3. **🔍 Research & Update**: Conducting comprehensive browser research to update roadmap with latest insights
            4. **📊 Progress Tracking**: Generating detailed reports and updating development documentation
            
            ## 🎯 Autonomous Development Features:
            
            - **Smart Model Selection**: Complexity-based routing (Sonar/Sonar-Reasoning/Sonar-Pro)
            - **Budget Management**: $3/week Perplexity budget with 80% usage alerts
            - **Research Caching**: 14-day TTL to optimize costs and performance
            - **Continuous Learning**: Research insights feed back into development priorities
            
            ## 📈 Expected Outcomes:
            
            - **Updated Roadmap**: Enhanced with latest research insights and priorities
            - **Code Implementations**: Production-ready code for identified tasks  
            - **Documentation Updates**: Comprehensive session reports and progress tracking
            - **Next Steps**: Automated identification of follow-up development opportunities
            
            ## 🔗 Monitor Progress:
            
            - **Workflow Run**: [View live progress](${{ github.server_url }}/${{ github.repository }}/actions)
            - **Session Artifacts**: Will be available after completion
            - **Updated Files**: ROADMAP.md, AUTONOMOUS_DEVELOPMENT_ROADMAP.md, and implementation files
            
            ## 🔄 Continuous Development:
            
            This autonomous development cycle will:
            - Continue automatically based on research findings
            - Schedule follow-up analysis every 6 hours  
            - Trigger on future roadmap updates
            - Respond to additional \`@copilot use perplexity browser research\` requests
            
            **The autonomous development system is now active and will provide continuous improvements to the EchoTune AI platform.**
            
            ---
            *Initiated by Enhanced Copilot Slash Commands with Perplexity Integration*`;
            
            await github.rest.issues.createComment({
              issue_number: contextNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: responseMessage
            });

      - name: Handle Other Commands
        if: |
          steps.parse.outputs.command != 'review-docs' &&
          !contains(steps.parse.outputs.command, 'perplexity') && 
          !contains(steps.parse.outputs.command, 'start-autonomous-development') &&
          !contains(steps.parse.outputs.comment_body, '@copilot use perplexity browser research') &&
          !contains(steps.parse.outputs.comment_body, 'autonomous development') &&
          steps.parse.outputs.command != ''
        uses: actions/github-script@v7
        with:
          script: |
            const command = '${{ steps.parse.outputs.command }}';
            const contextNumber = '${{ steps.parse.outputs.context_number }}';
            
            const supportedCommands = [
              'review-docs',
              'gpt5', 
              'analyze-gpt5',
              'review-gpt5', 
              'optimize-gpt5',
              'run-mcp-all',
              'mcp-health-check',
              'start-autonomous-development',
              'perplexity-research',
              'perplexity-analyze',
              'perplexity-roadmap-update', 
              'perplexity-budget-check',
              'perplexity-optimize-costs',
              'analyze-perplexity',
              'research-perplexity'
            ];
            
            let responseMessage = '';
            
            if (['gpt5', 'analyze-gpt5', 'review-gpt5', 'optimize-gpt5'].includes(command)) {
              responseMessage = `## 🤖 GPT-5 Command Detected
              
              **Command**: \`/${command}\`  
              **Status**: Redirecting to GPT-5 workflow...
              
              Your GPT-5 analysis request has been detected and will be processed by the dedicated GPT-5 workflow.
              
              **Expected Processing Time**: 2-3 minutes  
              **Track Progress**: [View workflow runs](${{ github.server_url }}/${{ github.repository }}/actions)
              
              The GPT-5 analysis results will be posted as a separate comment when complete.`;
              
            } else if (['run-mcp-all', 'mcp-health-check'].includes(command)) {
              responseMessage = `## 🔧 MCP Command Detected
              
              **Command**: \`/${command}\`  
              **Status**: Redirecting to MCP workflow...
              
              Your MCP command has been detected and will be processed by the dedicated MCP slash commands workflow.
              
              **Track Progress**: [View workflow runs](${{ github.server_url }}/${{ github.repository }}/actions)
              
              The MCP results will be posted as a separate comment when complete.`;
              
            } else {
              responseMessage = `## ❓ Unrecognized Command
              
              **Command**: \`/${command}\`  
              **Status**: Not supported by this workflow
              
              ### ✅ Supported Commands:
              
              #### 📚 Documentation & Analysis
              - \`/review-docs [scope]\` - Comprehensive documentation analysis
              - \`/gpt5 analyze [scope]\` - Trigger GPT-5 repository analysis  
              - \`/analyze-gpt5 [scope]\` - Same as above
              - \`/review-gpt5 [scope]\` - GPT-5 code review focus
              - \`/optimize-gpt5 [scope]\` - GPT-5 optimization analysis
              
              #### 🔧 MCP & System Commands  
              - \`/run-mcp-all\` - Comprehensive MCP validation
              - \`/mcp-health-check\` - Quick MCP health check
              
              #### 🤖 Autonomous Development Commands
              - \`/start-autonomous-development\` - Begin autonomous development cycle
              - \`@copilot use perplexity browser research\` - Trigger research-driven development
              
              #### 🔍 Specific Perplexity Commands (NEW!)
              - \`/perplexity-analyze <scope>\` - Targeted analysis with Perplexity AI
              - \`/analyze-perplexity <scope>\` - Alternative phrasing for analysis
              - \`/perplexity-research <topic>\` - Focused research on specific topics
              - \`/research-perplexity <topic>\` - Alternative phrasing for research
              - \`/perplexity-roadmap-update\` - Update roadmap with latest research
              - \`/perplexity-budget-check\` - Check Perplexity usage and budget
              - \`/perplexity-optimize-costs\` - Optimize Perplexity usage patterns
              
              ### 🔍 Autonomous Development Triggers:
              - \`@copilot use perplexity browser research\` - Full autonomous cycle with roadmap updates
              - \`@copilot autonomous development\` - Alternative natural language trigger
              - \`/start-autonomous-development\` - Direct autonomous development trigger
              - Comments containing "autonomous development" - Natural language triggers
              
              ### 📚 Usage Examples:
              - \`/review-docs\` - Analyze all documentation
              - \`/review-docs api\` - Focus on API documentation
              - \`/gpt5 analyze scripts/\` - Analyze specific directory
              - \`/perplexity-analyze frontend\` - Analyze frontend with Perplexity
              - \`/perplexity-research "latest React patterns"\` - Research specific topic
              - \`/perplexity-budget-check\` - Check current usage and budget
              - \`@copilot use perplexity browser research\` - Start comprehensive development cycle
              
              ### 💡 Command Tips:
              - **Scope Parameters**: Most commands accept optional scope (e.g., \`scripts/\`, \`frontend\`, \`api\`)
              - **Natural Language**: Use \`@copilot\` prefix for natural language triggers
              - **Cost Awareness**: Perplexity commands automatically optimize for budget efficiency
              - **Progress Tracking**: All workflows provide live progress links and detailed reports
              
              **Need Help?** Check the [workflow documentation](${{ github.server_url }}/${{ github.repository }}/tree/main/.github/workflows) for more details.`;
            }
            
            await github.rest.issues.createComment({
              issue_number: contextNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: responseMessage
            });