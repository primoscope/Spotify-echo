---
name: Deploy DigitalOcean

on:
  push:
    branches: [main]
    paths:
      - '.do/**'
      - 'scripts/deploy/**'
      - 'src/**'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      force_create:
        description: 'Force create new app'
        required: false
        default: false
        type: boolean

env:
  APP_NAME: echotune-ai

jobs:
  digitalocean-preflight:
    name: üîê DigitalOcean Preflight Check
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.validation.outputs.status }}
    
    steps:
      - name: üîê Enhanced DigitalOcean Token Validation
        id: validation
        run: |
          if [ -z "${{ secrets.DO_API_TOKEN }}" ]; then
            echo "‚ùå DO_API_TOKEN secret is not configured"
            echo "status=missing" >> $GITHUB_OUTPUT
            echo ""
            echo "üîß TO FIX THIS ISSUE:"
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo "1. üîë Generate a new API token:"
            echo "   ‚Üí Visit: https://cloud.digitalocean.com/account/api/tokens"
            echo "   ‚Üí Click 'Generate New Token'"
            echo "   ‚Üí Name: 'EchoTune-AI-GitHub-Actions'"
            echo "   ‚Üí Scopes: Select 'Read' and 'Write'"
            echo "   ‚Üí Expiry: Set to desired duration"
            echo ""
            echo "2. üìã Add token to repository secrets:"
            echo "   ‚Üí Go to: https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo "   ‚Üí Click 'New repository secret'"
            echo "   ‚Üí Name: DO_API_TOKEN"
            echo "   ‚Üí Value: [paste your token here]"
            echo ""
            echo "3. üîÑ Re-run this workflow after adding the secret"
            echo ""
            echo "üìñ Detailed setup guide: docs/REPOSITORY_SECRETS_SETUP_GUIDE.md"
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            exit 1
          else
            echo "‚úÖ DO_API_TOKEN secret is configured"
            
            # Validate token format
            TOKEN="${{ secrets.DO_API_TOKEN }}"
            if [[ ! "$TOKEN" =~ ^dop_v1_[a-f0-9]{64}$ ]]; then
              echo "‚ö†Ô∏è  Warning: Token format may be invalid (expected: dop_v1_[64 hex chars])"
            else
              echo "‚úÖ Token format appears valid"
            fi
            
            echo "status=configured" >> $GITHUB_OUTPUT
          fi

      - name: üõ†Ô∏è Install doctl and test comprehensive access
        if: steps.validation.outputs.status == 'configured'
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_API_TOKEN }}

      - name: üß™ Comprehensive DigitalOcean API Validation  
        if: steps.validation.outputs.status == 'configured'
        run: |
          echo "üîç Running comprehensive DigitalOcean API validation..."
          echo ""
          
          VALIDATION_ERRORS=0
          
          # Test 1: Basic account access
          echo "üìã Test 1: Verifying account access..."
          if doctl account get --format Name,Email,Status; then
            echo "‚úÖ Account access verified"
          else
            echo "‚ùå Account access failed - token invalid or expired"
            ((VALIDATION_ERRORS++))
          fi
          echo ""
          
          # Test 2: Apps platform access
          echo "üöÄ Test 2: Verifying Apps Platform access..."
          if doctl apps list --format Name,ID,Status 2>/dev/null; then
            echo "‚úÖ Apps Platform access verified"
          else
            echo "‚ùå Apps Platform access failed - insufficient permissions"
            echo "   ‚Üí Ensure token has 'Write' scope for Apps Platform operations"
            ((VALIDATION_ERRORS++))
          fi
          echo ""
          
          # Test 3: Container registry access  
          echo "üê≥ Test 3: Verifying Container Registry access..."
          if doctl registry get --format Name,Endpoint,Region 2>/dev/null; then
            echo "‚úÖ Container Registry access verified"
          else
            echo "‚ö†Ô∏è  Container Registry access failed - may need registry setup"
            echo "   ‚Üí This is non-blocking, but image pushes may fail"
          fi
          echo ""
          
          # Test 4: Droplets access (optional)
          echo "üíª Test 4: Verifying Droplets access..."
          if doctl compute droplet list --format Name,ID,Status --no-header 2>/dev/null | head -5; then
            echo "‚úÖ Droplets access verified"
          else
            echo "‚ö†Ô∏è  Droplets access limited - this is normal for Apps Platform deployments"
          fi
          echo ""
          
          # Test 5: Rate limit check
          echo "‚è±Ô∏è  Test 5: Checking API rate limits..."
          if doctl account get --format UUID,Status 2>/dev/null; then
            echo "‚úÖ API rate limits healthy"
          else
            echo "‚ö†Ô∏è  API rate limit warning - may be hitting limits"
          fi
          echo ""
          
          # Generate validation report
          if [ $VALIDATION_ERRORS -eq 0 ]; then
            echo "üéâ PREFLIGHT VALIDATION PASSED"
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo "‚úÖ Token authentication: SUCCESS"
            echo "‚úÖ Account access: SUCCESS" 
            echo "‚úÖ Apps Platform access: SUCCESS"
            echo "‚úÖ API rate limits: HEALTHY"
            echo ""
            echo "üöÄ Ready to proceed with deployment"
          else
            echo "‚ùå PREFLIGHT VALIDATION FAILED"
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo "üí• Found $VALIDATION_ERRORS critical issues"
            echo ""
            echo "üîß TROUBLESHOOTING STEPS:"
            echo "1. üîÑ Regenerate API token with full Read/Write permissions:"
            echo "   https://cloud.digitalocean.com/account/api/tokens"
            echo "2. üîê Update repository secret DO_API_TOKEN"
            echo "3. ‚è∞ Wait 2-3 minutes for token propagation"
            echo "4. üîÑ Re-run this workflow"
            echo ""
            echo "üìû Need help? Check the troubleshooting guide:"
            echo "   docs/deployment/digitalocean-troubleshooting.md"
            exit 1
          fi

  validate-security:
    name: Security Validation
    runs-on: ubuntu-latest
    needs: digitalocean-preflight
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check for hardcoded secrets
      run: |
        echo "üîç Scanning for hardcoded secrets and tokens..."
        
        # Define patterns that should not be in deployment files
        PATTERNS=(
          "dop_v1_"
          "sk-[a-zA-Z0-9]{48}"
          "AIza[a-zA-Z0-9]{35}"
          "password.*:.*[a-zA-Z0-9]{8,}"
          "_key.*:.*[a-zA-Z0-9]{20,}"
          "_secret.*:.*[a-zA-Z0-9]{20,}"
        )
        
        ISSUES=0
        
        # Check deployment files
        for file in .do/*.yaml .do/*.yml; do
          if [[ -f "$file" ]]; then
            echo "Checking $file..."
            for pattern in "${PATTERNS[@]}"; do
              if grep -i -E "$pattern" "$file" >/dev/null; then
                echo "‚ùå Security issue: Pattern '$pattern' found in $file"
                ((ISSUES++))
              fi
            done
          fi
        done
        
        # Check for demo/mock configurations
        if grep -r -i "demo_mode.*true" .do/ >/dev/null 2>&1; then
          echo "‚ùå Security issue: DEMO_MODE=true found in production deployment files"
          ((ISSUES++))
        fi
        
        if grep -r -i "default_llm_provider.*mock" .do/ >/dev/null 2>&1; then
          echo "‚ùå Security issue: DEFAULT_LLM_PROVIDER=mock found in production deployment files"
          ((ISSUES++))
        fi
        
        if [[ $ISSUES -gt 0 ]]; then
          echo "üí• Security validation failed with $ISSUES issues"
          exit 1
        else
          echo "‚úÖ Security validation passed - no secrets or demo configs found"
        fi
        
    - name: Validate deployment templates
      run: |
        chmod +x scripts/deploy/do-app-platform-spec.sh
        ./scripts/deploy/do-app-platform-spec.sh validate

  generate-spec:
    name: Generate App Spec
    runs-on: ubuntu-latest
    needs: validate-security
    
    outputs:
      spec-exists: ${{ steps.check.outputs.spec-exists }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Generate DigitalOcean App Platform specification
      run: |
        chmod +x scripts/deploy/do-app-platform-spec.sh
        ./scripts/deploy/do-app-platform-spec.sh generate ${{ github.event.inputs.environment || 'production' }}
        
    - name: Check generated spec
      id: check
      run: |
        if [[ -f .do/app-platform.yaml ]]; then
          echo "spec-exists=true" >> $GITHUB_OUTPUT
          echo "‚úÖ App Platform specification generated successfully"
        else
          echo "spec-exists=false" >> $GITHUB_OUTPUT
          echo "‚ùå Failed to generate App Platform specification"
          exit 1
        fi
        
    - name: Upload generated spec
      uses: actions/upload-artifact@v4
      with:
        name: app-platform-spec
        path: .do/app-platform.yaml
        retention-days: 30

  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: [validate-security, generate-spec]
    if: needs.generate-spec.outputs.spec-exists == 'true'
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download generated spec
      uses: actions/download-artifact@v4
      with:
        name: app-platform-spec
        path: .do/
        
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DO_TOKEN }}
      
    - name: Verify doctl authentication
      if: env.DO_TOKEN != ''
      env:
        DO_TOKEN: ${{ secrets.DO_TOKEN }}
      run: |
        if doctl account get >/dev/null 2>&1; then
          echo "‚úÖ DigitalOcean authentication successful"
          echo "Account: $(doctl account get --format Name --no-header)"
        else
          echo "‚ùå DigitalOcean authentication failed"
          exit 1
        fi
        
    - name: Deploy to DigitalOcean (Dry Run)
      if: github.event_name == 'pull_request' || env.DO_TOKEN == ''
      run: |
        echo "üß™ Running deployment dry-run..."
        chmod +x scripts/deploy/doctl-deploy.sh
        ./scripts/deploy/doctl-deploy.sh validate
        echo "‚úÖ Dry-run completed successfully"
        
    - name: Deploy to DigitalOcean (Production)
      if: github.event_name != 'pull_request' && env.DO_TOKEN != ''
      env:
        DO_TOKEN: ${{ secrets.DO_TOKEN }}
        APP_ID: ${{ secrets.DO_APP_ID }}
      run: |
        echo "üöÄ Deploying to DigitalOcean App Platform..."
        chmod +x scripts/deploy/doctl-deploy.sh
        
        if [[ "${{ github.event.inputs.force_create }}" == "true" ]]; then
          ./scripts/deploy/doctl-deploy.sh create
        else
          ./scripts/deploy/doctl-deploy.sh deploy
        fi
        
    - name: Get deployment URL
      if: github.event_name != 'pull_request' && env.DO_TOKEN != ''
      env:
        DO_TOKEN: ${{ secrets.DO_TOKEN }}
      run: |
        # Get app details
        if APP_ID=$(doctl apps list --format ID,Name --no-header | grep "$APP_NAME" | cut -d' ' -f1 | head -1); then
          if [[ -n "$APP_ID" ]]; then
            URL=$(doctl apps get "$APP_ID" --format LiveURL --no-header 2>/dev/null || echo "")
            if [[ -n "$URL" ]]; then
              echo "üåê Deployment URL: $URL"
              echo "DEPLOYMENT_URL=$URL" >> $GITHUB_ENV
            fi
          fi
        fi
        
    - name: Test deployment
      if: github.event_name != 'pull_request' && env.DEPLOYMENT_URL != ''
      run: |
        echo "üß™ Testing deployed application..."
        
        # Wait for app to be fully deployed
        echo "Waiting for deployment to stabilize..."
        sleep 60
        
        # Test health endpoint
        if curl -f --max-time 30 "${DEPLOYMENT_URL}/health" >/dev/null 2>&1; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ö†Ô∏è Health check failed - app may still be starting up"
        fi
        
        # Test basic endpoints
        if curl -f --max-time 10 "${DEPLOYMENT_URL}/" >/dev/null 2>&1; then
          echo "‚úÖ Main page accessible"
        else
          echo "‚ö†Ô∏è Main page not accessible"
        fi

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && needs.deploy.result == 'success' && github.event_name != 'pull_request'
    
    steps:
    - name: Success notification
      run: |
        echo "üéâ DigitalOcean deployment completed successfully!"
        echo "‚úÖ App: ${{ env.APP_NAME }}"
        echo "üåê URL: ${{ env.DEPLOYMENT_URL }}"
        echo "üïí Time: $(date -u)"
        
  notify-failure:
    name: Notify Failure  
    runs-on: ubuntu-latest
    needs: [validate-security, generate-spec, deploy]
    if: always() && (needs.validate-security.result == 'failure' || needs.generate-spec.result == 'failure' || needs.deploy.result == 'failure')
    
    steps:
    - name: Failure notification
      run: |
        echo "üí• DigitalOcean deployment failed!"
        echo "‚ùå Security validation: ${{ needs.validate-security.result }}"
        echo "‚ùå Spec generation: ${{ needs.generate-spec.result }}"  
        echo "‚ùå Deployment: ${{ needs.deploy.result }}"
        exit 1

  generate-deployment-report:
    name: Generate Deployment Report
    runs-on: ubuntu-latest
    needs: [validate-security, generate-spec, deploy]
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Generate deployment validation report
      run: |
        mkdir -p reports
        
        cat > reports/deployment-validation.md << EOF
        # DigitalOcean Deployment Validation Report
        
        **Generated:** $(date -u +"%Y-%m-%dT%H:%M:%SZ")
        **Commit:** ${{ github.sha }}
        **Environment:** ${{ github.event.inputs.environment || 'production' }}
        
        ## Deployment Summary
        
        | Check | Status | Details |
        |-------|--------|---------|
        | Security Validation | ${{ needs.validate-security.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | No hardcoded secrets or demo configs |
        | Spec Generation | ${{ needs.generate-spec.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | App Platform spec created successfully |
        | Deployment | ${{ needs.deploy.result == 'success' && '‚úÖ Passed' || (needs.deploy.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed') }} | App deployed to DigitalOcean |
        
        ## Security Checks
        
        - ‚úÖ No hardcoded API tokens found
        - ‚úÖ No demo/mock configurations in production specs
        - ‚úÖ All sensitive environment variables require DO UI configuration
        - ‚úÖ Deployment templates validated successfully
        
        ## Deployment Details
        
        - **App Name:** ${{ env.APP_NAME }}
        - **Platform:** DigitalOcean App Platform
        - **Region:** NYC1
        - **Build Command:** \`npm ci --only=production && npm run build\`
        - **Run Command:** \`npm start\`
        - **Health Check:** \`/health\`
        
        ## Environment Variables Required in DO UI
        
        **Required:**
        - \`SPOTIFY_CLIENT_ID\`
        - \`SPOTIFY_CLIENT_SECRET\`
        - \`SPOTIFY_REDIRECT_URI\`
        - \`OPENAI_API_KEY\`
        - \`MONGODB_URI\`
        - \`SESSION_SECRET\`
        - \`JWT_SECRET\`
        
        **Optional:**
        - \`GEMINI_API_KEY\`
        - \`LLM_PROVIDER\`
        - \`REDIS_URL\`
        - \`BROWSERBASE_API_KEY\`
        - \`BROWSERBASE_PROJECT_ID\`
        
        ## Next Steps
        
        1. Set environment variables in DigitalOcean App Platform UI
        2. Monitor app health at deployment URL  
        3. Check application logs for any configuration issues
        4. Verify all features are working correctly
        
        ---
        *This report was generated automatically by the EchoTune AI deployment pipeline.*
        EOF
        
    - name: Upload deployment report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-validation-report
        path: reports/deployment-validation.md
        retention-days: 90