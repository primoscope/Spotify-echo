name: Dynamic Workflow Handler

on:
  issue_comment:
    types: [created]
  issues:
    types: [opened, labeled]
  pull_request:
    types: [opened, ready_for_review]
  workflow_dispatch:
    inputs:
      template:
        description: 'Workflow template category'
        required: true
        type: choice
        options:
          - feature-development
          - bug-fixes
          - performance-optimization
          - testing-improvements
          - documentation-updates
          - security-enhancements
      parameters:
        description: 'Parameters as JSON string'
        required: false
        type: string
      auto_execute:
        description: 'Auto execute the workflow'
        required: false
        default: true
        type: boolean

env:
  NODE_ENV: development

jobs:
  parse-triggers:
    name: "üîç Parse Dynamic Triggers"
    runs-on: ubuntu-latest
    outputs:
      should-trigger: ${{ steps.parse.outputs.should-trigger }}
      trigger-type: ${{ steps.parse.outputs.trigger-type }}
      template-category: ${{ steps.parse.outputs.template-category }}
      parameters: ${{ steps.parse.outputs.parameters }}
      workflow-id: ${{ steps.parse.outputs.workflow-id }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --silent

      - name: Parse Workflow Triggers
        id: parse
        run: |
          SHOULD_TRIGGER="false"
          TRIGGER_TYPE="none"
          TEMPLATE_CATEGORY=""
          PARAMETERS="{}"
          WORKFLOW_ID=""

          # Manual workflow dispatch
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            SHOULD_TRIGGER="true"
            TRIGGER_TYPE="manual"
            TEMPLATE_CATEGORY="${{ github.event.inputs.template }}"
            PARAMETERS="${{ github.event.inputs.parameters || '{}' }}"
          
          # PR/Issue comments
          elif [ "${{ github.event_name }}" = "issue_comment" ]; then
            COMMENT_BODY="${{ github.event.comment.body }}"
            
            # Check for workflow trigger patterns
            if echo "$COMMENT_BODY" | grep -qi "^/implement feature"; then
              SHOULD_TRIGGER="true"
              TRIGGER_TYPE="pr_comment"
              TEMPLATE_CATEGORY="feature-development"
              
              # Extract feature name
              FEATURE_NAME=$(echo "$COMMENT_BODY" | sed -n 's|^/implement feature \(.*\)|\1|p' | tr -d '\r\n' | xargs)
              PARAMETERS="{\"feature_name\":\"$FEATURE_NAME\"}"
              
            elif echo "$COMMENT_BODY" | grep -qi "^/fix bug"; then
              SHOULD_TRIGGER="true"  
              TRIGGER_TYPE="pr_comment"
              TEMPLATE_CATEGORY="bug-fixes"
              
              # Extract bug ID
              BUG_ID=$(echo "$COMMENT_BODY" | sed -n 's|^/fix bug \(.*\)|\1|p' | tr -d '\r\n' | xargs)
              PARAMETERS="{\"bug_id\":\"$BUG_ID\"}"
              
            elif echo "$COMMENT_BODY" | grep -qi "^/optimize"; then
              SHOULD_TRIGGER="true"
              TRIGGER_TYPE="pr_comment" 
              TEMPLATE_CATEGORY="performance-optimization"
              
              # Extract optimization target
              OPT_TARGET=$(echo "$COMMENT_BODY" | sed -n 's|^/optimize \(.*\)|\1|p' | tr -d '\r\n' | xargs)
              PARAMETERS="{\"optimization_target\":\"$OPT_TARGET\"}"
            fi
          
          # Issue labels
          elif [ "${{ github.event_name }}" = "issues" ] && [ "${{ github.event.action }}" = "labeled" ]; then
            LABELS="${{ toJson(github.event.issue.labels.*.name) }}"
            ISSUE_TITLE="${{ github.event.issue.title }}"
            
            if echo "$LABELS" | grep -qi "feature-request\|enhancement"; then
              SHOULD_TRIGGER="true"
              TRIGGER_TYPE="issue_label"
              TEMPLATE_CATEGORY="feature-development"
              
              # Extract feature name from title
              FEATURE_NAME=$(echo "$ISSUE_TITLE" | sed 's/^[^:]*: *//' | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
              PARAMETERS="{\"feature_name\":\"$FEATURE_NAME\"}"
              
            elif echo "$LABELS" | grep -qi "bug"; then
              SHOULD_TRIGGER="true"
              TRIGGER_TYPE="issue_label" 
              TEMPLATE_CATEGORY="bug-fixes"
              
              # Use issue number as bug ID
              BUG_ID="${{ github.event.issue.number }}"
              PARAMETERS="{\"bug_id\":\"$BUG_ID\",\"severity\":\"medium\"}"
            fi
          fi

          # Generate workflow ID if needed
          if [ "$SHOULD_TRIGGER" = "true" ]; then
            WORKFLOW_ID="${TEMPLATE_CATEGORY}-$(date +%s)-$(echo $RANDOM | cut -c1-4)"
          fi

          echo "should-trigger=$SHOULD_TRIGGER" >> $GITHUB_OUTPUT
          echo "trigger-type=$TRIGGER_TYPE" >> $GITHUB_OUTPUT
          echo "template-category=$TEMPLATE_CATEGORY" >> $GITHUB_OUTPUT
          echo "parameters=$PARAMETERS" >> $GITHUB_OUTPUT
          echo "workflow-id=$WORKFLOW_ID" >> $GITHUB_OUTPUT
          
          echo "üîç Trigger Analysis:"
          echo "   Should Trigger: $SHOULD_TRIGGER"
          echo "   Type: $TRIGGER_TYPE"  
          echo "   Template: $TEMPLATE_CATEGORY"
          echo "   Parameters: $PARAMETERS"

  create-workflow:
    name: "‚ö° Create Dynamic Workflow"
    runs-on: ubuntu-latest
    needs: parse-triggers
    if: needs.parse-triggers.outputs.should-trigger == 'true'
    
    outputs:
      workflow-created: ${{ steps.create.outputs.success }}
      workflow-details: ${{ steps.create.outputs.details }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --silent

      - name: Create Workflow Instance
        id: create
        run: |
          TEMPLATE="${{ needs.parse-triggers.outputs.template-category }}"
          PARAMETERS='${{ needs.parse-triggers.outputs.parameters }}'
          TRIGGER_TYPE="${{ needs.parse-triggers.outputs.trigger-type }}"
          
          echo "üöÄ Creating workflow instance..."
          echo "Template: $TEMPLATE"
          echo "Parameters: $PARAMETERS"
          
          # Create workflow using the CLI tool
          cd agent-workflow
          node workflow-cli.js create \
            --template "$TEMPLATE" \
            --params "$PARAMETERS" > workflow-output.log 2>&1
          
          if [ $? -eq 0 ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            
            # Extract workflow ID from output
            WORKFLOW_ID=$(grep "ID:" workflow-output.log | awk '{print $NF}')
            WORKFLOW_NAME=$(grep "Name:" workflow-output.log | cut -d' ' -f2-)
            
            DETAILS="{\"id\":\"$WORKFLOW_ID\",\"name\":\"$WORKFLOW_NAME\",\"template\":\"$TEMPLATE\"}"
            echo "details=$DETAILS" >> $GITHUB_OUTPUT
            
            echo "‚úÖ Workflow created successfully: $WORKFLOW_ID"
            cat workflow-output.log
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "‚ùå Workflow creation failed:"
            cat workflow-output.log
            exit 1
          fi

      - name: Post Workflow Creation Comment
        if: github.event_name == 'issue_comment' || github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          script: |
            const workflowDetails = JSON.parse('${{ steps.create.outputs.details }}');
            const triggerType = '${{ needs.parse-triggers.outputs.trigger-type }}';
            const template = '${{ needs.parse-triggers.outputs.template-category }}';
            
            const issueNumber = context.issue?.number || context.payload.issue?.number;
            if (!issueNumber) return;

            const commentBody = `## ü§ñ Dynamic Workflow Created
            
            **Workflow Details:**
            - **Name:** ${workflowDetails.name}
            - **ID:** \`${workflowDetails.id}\`
            - **Template:** ${template}
            - **Trigger:** ${triggerType}
            - **Status:** Created and queued for execution
            
            **What's Next:**
            1. The workflow will be automatically executed
            2. You'll receive updates as each step completes
            3. Final results will be posted when finished
            
            **Workflow Run:** [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ---
            *Powered by Dynamic Workflow System v1.0*`;

            await github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

  execute-workflow:
    name: "üöÄ Execute Dynamic Workflow"  
    runs-on: ubuntu-latest
    needs: [parse-triggers, create-workflow]
    if: needs.create-workflow.outputs.workflow-created == 'true' && (github.event.inputs.auto_execute != 'false')
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --silent

      - name: Execute Workflow Steps
        id: execute
        run: |
          WORKFLOW_DETAILS='${{ needs.create-workflow.outputs.workflow-details }}'
          WORKFLOW_ID=$(echo "$WORKFLOW_DETAILS" | jq -r '.id')
          TEMPLATE=$(echo "$WORKFLOW_DETAILS" | jq -r '.template')
          
          echo "üöÄ Executing workflow: $WORKFLOW_ID"
          echo "Template: $TEMPLATE"
          
          cd agent-workflow
          
          # Execute the workflow
          node workflow-cli.js execute "$WORKFLOW_ID" > execution-output.log 2>&1
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Workflow execution started successfully"
            cat execution-output.log
            
            # For this implementation, we'll simulate workflow execution
            # In practice, this would integrate with MCP servers and other automation
            echo "üìã Simulating workflow steps for demo..."
            
            case "$TEMPLATE" in
              "feature-development")
                echo "  üîç Analyzing feature requirements..."
                sleep 2
                echo "  üìù Creating implementation plan..."
                sleep 2  
                echo "  üíª Implementing feature code..."
                sleep 3
                echo "  ‚úÖ Feature implementation completed"
                ;;
              "bug-fixes")
                echo "  üêõ Analyzing bug report..."
                sleep 2
                echo "  üîß Creating bug fix..."
                sleep 2
                echo "  üß™ Creating regression tests..."
                sleep 2
                echo "  ‚úÖ Bug fix completed"
                ;;
              "performance-optimization")
                echo "  üìä Conducting performance audit..."
                sleep 3
                echo "  ‚ö° Implementing optimizations..."
                sleep 3
                echo "  üìà Benchmarking improvements..."
                sleep 2
                echo "  ‚úÖ Performance optimization completed"
                ;;
            esac
            
            echo "execution_status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Workflow execution failed:"
            cat execution-output.log
            echo "execution_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Post Execution Results
        if: always() && (github.event_name == 'issue_comment' || github.event_name == 'issues')
        uses: actions/github-script@v7
        with:
          script: |
            const workflowDetails = JSON.parse('${{ needs.create-workflow.outputs.workflow-details }}');
            const executionStatus = '${{ steps.execute.outputs.execution_status }}';
            const template = '${{ needs.parse-triggers.outputs.template-category }}';
            
            const issueNumber = context.issue?.number || context.payload.issue?.number;
            if (!issueNumber) return;

            const statusIcon = executionStatus === 'success' ? '‚úÖ' : '‚ùå';
            const statusText = executionStatus === 'success' ? 'Completed Successfully' : 'Failed';
            
            let summaryText = '';
            switch(template) {
              case 'feature-development':
                summaryText = executionStatus === 'success' ? 
                  'üéâ Feature implementation completed! Code has been generated, tests created, and documentation updated.' :
                  '‚ö†Ô∏è Feature implementation encountered issues. Please check the workflow logs for details.';
                break;
              case 'bug-fixes':
                summaryText = executionStatus === 'success' ?
                  'üêõ Bug fix implemented! The issue has been resolved and regression tests added.' :
                  '‚ö†Ô∏è Bug fix failed. Please review the error details and try again.';
                break;
              case 'performance-optimization':
                summaryText = executionStatus === 'success' ?
                  '‚ö° Performance optimizations applied! System performance has been improved.' :
                  '‚ö†Ô∏è Performance optimization failed. Please check the audit results.';
                break;
            }

            const commentBody = `## ${statusIcon} Workflow Execution ${statusText}
            
            **Workflow:** ${workflowDetails.name}  
            **ID:** \`${workflowDetails.id}\`
            **Template:** ${template}
            
            ${summaryText}
            
            **Execution Details:**
            - Start Time: ${new Date().toISOString()}
            - Status: ${statusText}
            - Workflow Run: [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ${executionStatus === 'success' ? 
              '**Next Steps:** The changes are ready for review and testing.' :
              '**Next Steps:** Please review the error logs and address any issues before retrying.'
            }
            
            ---
            *Automated by Dynamic Workflow System*`;

            await github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

  workflow-status:
    name: "üìä Update Workflow Status"
    runs-on: ubuntu-latest
    needs: [parse-triggers, create-workflow, execute-workflow]
    if: always() && needs.parse-triggers.outputs.should-trigger == 'true'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --silent

      - name: Update System Status
        run: |
          cd agent-workflow
          
          echo "üìä Updating workflow system status..."
          
          # Show current status
          node workflow-cli.js status
          
          # Show active workflows
          echo ""
          echo "Current active workflows:"
          node workflow-cli.js active

      - name: Create Status Report
        if: github.event_name == 'workflow_dispatch'
        run: |
          cat > workflow-status-report.md << 'EOF'
          # Dynamic Workflow System Status Report
          
          **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Trigger:** ${{ needs.parse-triggers.outputs.trigger-type }}
          **Template:** ${{ needs.parse-triggers.outputs.template-category }}
          
          ## Execution Summary
          
          - **Workflow Created:** ${{ needs.create-workflow.outputs.workflow-created }}
          - **Execution Status:** ${{ needs.execute-workflow.result }}
          - **Parameters:** ${{ needs.parse-triggers.outputs.parameters }}
          
          ## System Health
          
          The dynamic workflow system is operational and processing requests.
          
          EOF
          
          echo "üìÑ Status report generated"

      - name: Upload Status Report
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: workflow-status-report
          path: workflow-status-report.md
          retention-days: 7