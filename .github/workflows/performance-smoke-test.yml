name: Performance Smoke Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_duration:
        description: 'Test duration in seconds'
        required: false
        default: '30'
      max_response_time:
        description: 'Maximum response time in ms'
        required: false
        default: '5000'

jobs:
  performance-smoke-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create test environment file
      run: |
        cp .env.example .env
        echo "NODE_ENV=test" >> .env
        echo "PORT=3000" >> .env
        echo "REDIS_URL=redis://localhost:6379" >> .env
        echo "ENABLE_REDIS=true" >> .env
        echo "SLOW_REQUEST_THRESHOLD=1000" >> .env
        echo "VERY_SLOW_REQUEST_THRESHOLD=3000" >> .env
        echo "CRITICAL_REQUEST_THRESHOLD=10000" >> .env

    - name: Start server in background
      run: |
        npm start &
        echo $! > server.pid
        sleep 10  # Wait for server to start

    - name: Wait for server to be ready
      run: |
        for i in {1..30}; do
          if curl -f http://localhost:3000/health > /dev/null 2>&1; then
            echo "Server is ready"
            break
          fi
          echo "Waiting for server... ($i/30)"
          sleep 2
        done

    - name: Run performance smoke test
      run: |
        npm run performance:smoke-test -- \
          --base-url http://localhost:3000 \
          --duration ${{ github.event.inputs.test_duration || '30' }} \
          --max-response-time ${{ github.event.inputs.max_response_time || '5000' }} \
          --max-error-rate 5
      env:
        TEST_BASE_URL: http://localhost:3000

    - name: Generate performance baseline
      run: |
        npm run performance:baseline || echo "Baseline generation failed, continuing..."

    - name: Generate MCP analytics report
      run: |
        npm run performance:mcp-analytics || echo "MCP analytics failed, continuing..."

    - name: Upload performance reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-reports-${{ github.run_id }}
        path: |
          reports/performance/*.json
          reports/performance/*.md
          reports/mcp-analytics/*.json
          logs/slow-requests.log
        retention-days: 30

    - name: Stop server
      if: always()
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi

    - name: Display performance summary
      if: always()
      run: |
        echo "## Performance Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f reports/performance/latest-baseline.json ]; then
          node -e "
            const fs = require('fs');
            try {
              const report = JSON.parse(fs.readFileSync('reports/performance/latest-baseline.json', 'utf8'));
              const summary = report.summary;
              console.log('**Overall Status:** ' + summary.status.toUpperCase());
              console.log('**Average Response Time:** ' + Math.round(summary.overallAverageResponseTime) + 'ms');
              console.log('**P95 Response Time:** ' + Math.round(summary.overallP95ResponseTime) + 'ms');
              console.log('**Error Rate:** ' + Math.round(summary.overallErrorRate * 100) / 100 + '%');
              console.log('**Requests per Second:** ' + Math.round(summary.overallRequestsPerSecond));
              console.log('**Healthy Endpoints:** ' + summary.healthyEndpoints + '/' + summary.totalEndpoints);
            } catch (error) {
              console.log('Performance report not available');
            }
          " >> $GITHUB_STEP_SUMMARY
        else
          echo "Performance report not generated" >> $GITHUB_STEP_SUMMARY
        fi