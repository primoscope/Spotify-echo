name: Security Audit

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly security audit on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  pip-audit:
    name: Python Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit
      
      - name: Run pip-audit on requirements.txt
        run: |
          pip-audit --requirement requirements.txt --format=json --output=pip-audit-results.json
          pip-audit --requirement requirements.txt --format=cyclonedx --output=pip-audit-cyclone.json
      
      - name: Upload pip-audit results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: pip-audit-results
          path: |
            pip-audit-results.json
            pip-audit-cyclone.json
      
      - name: Run pip-audit with fail on vulnerabilities
        run: |
          # Allow specific exit codes for warnings, fail on critical vulnerabilities
          pip-audit --requirement requirements.txt --vulnerability-service=osv || exit_code=$?
          if [ "$exit_code" -gt 1 ]; then
            echo "❌ Critical vulnerabilities found!"
            exit 1
          elif [ "$exit_code" -eq 1 ]; then
            echo "⚠️ Warnings found but no critical vulnerabilities"
            exit 0
          else
            echo "✅ No vulnerabilities found"
            exit 0
          fi

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: high
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, GPL-3.0-or-later

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      
      - name: Check for hardcoded API keys
        run: |
          echo "🔍 Scanning for hardcoded API keys and secrets..."
          
          # Check for common API key patterns
          if grep -r -n -E "(PERPLEXITY_API_KEY|OPENAI_API_KEY|SPOTIFY_CLIENT_SECRET)\s*=\s*['\"][^'\"]+['\"]" . --exclude-dir=.git --exclude-dir=node_modules --exclude="*.log"; then
            echo "❌ Hardcoded API keys found in source code!"
            exit 1
          fi
          
          # Check for Bearer tokens
          if grep -r -n -E "Bearer [a-zA-Z0-9_\-]+" . --exclude-dir=.git --exclude-dir=node_modules --exclude="*.log"; then
            echo "❌ Hardcoded Bearer tokens found!"
            exit 1
          fi
          
          echo "✅ No hardcoded secrets detected"

  perplexity-security-check:
    name: Perplexity Integration Security Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install requests python-dotenv
      
      - name: Validate Perplexity integration security
        run: |
          echo "🔐 Checking Perplexity API integration security..."
          
          # Test that client handles missing API key gracefully
          python -c "
          import sys
          sys.path.insert(0, 'scripts')
          from perplexity_client import PerplexityClient
          
          # Test without API key
          import os
          if 'PERPLEXITY_API_KEY' in os.environ:
              del os.environ['PERPLEXITY_API_KEY']
          
          client = PerplexityClient()
          
          # This should not expose any secrets
          result = client.analyze_issue('Test', 'Test body', dry_run=True)
          
          if 'sk-' in str(result) or 'Bearer' in str(result):
              print('❌ API key exposed in dry-run mode!')
              sys.exit(1)
          
          print('✅ No API keys exposed in dry-run mode')
          "
          
          # Check that cache files don't contain API keys
          if [ -d ".perplexity/cache" ]; then
            if grep -r -l "sk-\|Bearer \|PERPLEXITY_API_KEY" .perplexity/cache/ 2>/dev/null; then
              echo "❌ API keys found in cache files!"
              exit 1
            fi
          fi
          
          echo "✅ Perplexity integration security checks passed"

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [pip-audit, secret-scan, perplexity-security-check]
    if: always()
    
    steps:
      - name: Generate Security Summary
        run: |
          echo "## 🔒 Security Audit Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Pip Audit**: ${{ needs.pip-audit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Secret Scan**: ${{ needs.secret-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Perplexity Security**: ${{ needs.perplexity-security-check.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.pip-audit.result }}" == "failure" ] || [ "${{ needs.secret-scan.result }}" == "failure" ] || [ "${{ needs.perplexity-security-check.result }}" == "failure" ]; then
            echo "- **Overall Status**: ❌ SECURITY ISSUES FOUND" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🚨 **Action Required**: Address security issues before merging" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Overall Status**: ✅ ALL CHECKS PASSED" >> $GITHUB_STEP_SUMMARY
          fi