# === PERFORMANCE OPTIMIZATION ADDITIONS ===
# Large data files that impact VS Code performance
data/Streaming_History_Audio_*.json
data/merged_data_*.csv
data/*_combined.csv

# VS Code specific performance optimizations
.vscode/workspace-state.vscode-workspace
.vscode/.browse.VC.db*
.vscode/extensions.json.bak

# Large validation and test result files
*validation-report*.json
*test-results*.json
mcp-*-report*.json
comprehensive-*.json
enhanced-*-results.json
automation-artifacts/*.json
search-results/*.json
validation-reports/*.json

# Perplexity budget system runtime files
.perplexity/
budget-summary.json
analysis-result.json
test-results/*.json

# Temporary performance files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
*.swp
*.swo
*~

# === ORIGINAL GITIGNORE CONTENT ===
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# Generated analysis reports (temporary files)
automation-analysis-*.json
automation-analysis-*.md
mcp-validation-report.json
mcp-results.txt
target_files.txt
gpt5_analysis.md
automation_analysis.log

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to use the following:
# .idea/

# VS Code
.vscode/

# Node.js dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# Storybook build outputs
.out
.storybook-out
storybook-static

# Temporary folders
tmp/
temp/

# Logs
logs
*.log

# macOS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Windows
*.lnk

# EchoTune AI specific
# Original split data files (we keep the merged/optimized version)
split_data_part_*.csv
databases/split_data_part_*.csv
databases/jf

# Machine Learning models
models/
*.pkl
*.joblib
*.h5
*.pb

# Generated data and artifacts
artifacts/
outputs/
reports/

# Database files
*.db
*.sqlite
*.sqlite3

# Audio features cache
*_audio_features_cache.db

# MCP Server logs
mcp-server/logs/

# Spotify API keys (should be in environment variables)
spotify_credentials.json

# Large data files (keep optimized versions)
raw_data/
backup_data/

# IDE specific files
.idea/
*.swp
*.swo
*~

# OS generated files
.directory
*.directory

# Data processing temporary files
temp_data_processing/
*.tmp
*.temp
processing_*
backup_*

# Database dumps and migration artifacts
*.dump
*.bak
*.backup
migration_logs/

# Production deployment files
ssl/
*.crt
*.key
*.pem

# Docker volumes and data
docker-data/
volumes/

# Production logs
logs/
*.access.log
*.error.log

# Backup files
README_ORIGINAL.md
README_NEW.md
backups/
*.tar.gz
*.zip

# Environment-specific configs
.env.production
.env.staging
.env.localuploads/

# Production secrets and credentials
secrets/
credentials/
*.secret
*_secret*
*_credentials*

# Production build artifacts
build/
dist/
*.min.js
*.min.css

# Production cache and temp files
cache/
tmp/
temp/
.cache/
.temp/

# Production monitoring and logs
monitoring/
analytics/
metrics/
audit/
access_logs/
error_logs/

# Prompt system temporary files
prompts.log
validate
prompt-results/
*.backup
analysis-results/

# GitHub Actions temporary files
lint-results.txt
test-results-*.txt
security-audit.txt
README.md.backup

# Gemini Code Assist
.gemini/logs/
.gemini/cache/
gemini-*.log
lint-results.txt
test-results-*.txt
security-audit.txt

# DigitalOcean deployment artifacts
# IMPORTANT: Never commit API tokens or credentials
**/DO_API_TOKEN*
**/do_api_token*
digitalocean_credentials*
doctl_auth*
# Temporary deployment files
/tmp/digitalocean-deploy-*
deployment-temp-*
*.do.tmp

# Archive and temporary files
archive/
*.tmp
*.bak
*.orig

# Environment files (keep only the example tracked)
.env
.env.*
!.env.example

# MCP server logs
mcp-server/*.log
mcp-servers/*/logs/

# Testing artifacts
testing_screenshots/
coverage/
.nyc_output/

# Analysis and validation reports (temporary files)
documentation-analysis-*.json
documentation-analysis-*.md
automation-analysis-*.json
automation-analysis-*.md
mcp-validation-report.json
mcp-command-results.log
docs-command-results.log
gpt5_analysis.md
mcp_results.txt
target_files.txt
automation_analysis.log

# MCP local env
.env.mcp
