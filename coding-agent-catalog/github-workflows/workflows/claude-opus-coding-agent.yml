---
name: 🧠 Claude Opus 4.1 Advanced Coding Agent

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      command_type:
        description: "Claude Opus 4.1 Command Type"
        required: true
        default: "deep-reasoning"
        type: choice
        options:
          - deep-reasoning
          - extended-thinking
          - advanced-coding
          - agent-workflow
          - architectural-analysis
          - long-horizon-tasks
      target:
        description: "Target scope (file/directory/component)"
        required: false
        type: string
      prompt:
        description: "Custom prompt for Claude Opus 4.1"
        required: false
        type: string
      thinking_budget:
        description: "Extended thinking budget tokens"
        required: false
        default: "5000"
        type: string

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  detect-claude-commands:
    runs-on: ubuntu-latest
    outputs:
      should_execute: ${{ steps.detect.outputs.should_execute }}
      command_type: ${{ steps.detect.outputs.command_type }}
      target: ${{ steps.detect.outputs.target }}
      prompt: ${{ steps.detect.outputs.prompt }}
      thinking_budget: ${{ steps.detect.outputs.thinking_budget }}
      user: ${{ steps.detect.outputs.user }}
      context_number: ${{ steps.detect.outputs.context_number }}
      extended_thinking: ${{ steps.detect.outputs.extended_thinking }}
    steps:
      - name: 🔍 Detect Claude Opus 4.1 Commands
        id: detect
        run: |
          SHOULD_EXECUTE="false"
          COMMAND_TYPE="deep-reasoning"
          TARGET=""
          PROMPT=""
          THINKING_BUDGET="5000"
          USER="${{ github.actor }}"
          CONTEXT_NUMBER=""
          EXTENDED_THINKING="false"

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            SHOULD_EXECUTE="true"
            COMMAND_TYPE="${{ github.event.inputs.command_type }}"
            TARGET="${{ github.event.inputs.target }}"
            PROMPT="${{ github.event.inputs.prompt }}"
            THINKING_BUDGET="${{ github.event.inputs.thinking_budget }}"
            EXTENDED_THINKING="true"
          elif [[ "${{ github.event_name }}" == "issue_comment" ]] || [[ "${{ github.event_name }}" == "pull_request_review_comment" ]]; then
            COMMENT_BODY="${{ github.event.comment.body }}"
            USER="${{ github.event.comment.user.login }}"
            
            if [[ "${{ github.event.issue.number }}" != "" ]]; then
              CONTEXT_NUMBER="${{ github.event.issue.number }}"
            else
              CONTEXT_NUMBER="${{ github.event.pull_request.number }}"
            fi

            # Claude Opus 4.1 specific commands
            if echo "$COMMENT_BODY" | grep -qi "/claude-opus\|/opus\|claude opus 4\.1\|@claude-opus"; then
              SHOULD_EXECUTE="true"
              
              # Extract command type
              if echo "$COMMENT_BODY" | grep -qi "deep.reasoning\|deep-reasoning"; then
                COMMAND_TYPE="deep-reasoning"
                EXTENDED_THINKING="true"
              elif echo "$COMMENT_BODY" | grep -qi "extended.thinking\|extended-thinking"; then
                COMMAND_TYPE="extended-thinking" 
                EXTENDED_THINKING="true"
              elif echo "$COMMENT_BODY" | grep -qi "advanced.coding\|advanced-coding\|coding"; then
                COMMAND_TYPE="advanced-coding"
                EXTENDED_THINKING="true"
              elif echo "$COMMENT_BODY" | grep -qi "agent.workflow\|agent-workflow\|agentic"; then
                COMMAND_TYPE="agent-workflow"
                EXTENDED_THINKING="true"
              elif echo "$COMMENT_BODY" | grep -qi "architectural\|architecture"; then
                COMMAND_TYPE="architectural-analysis"
                EXTENDED_THINKING="true"
              elif echo "$COMMENT_BODY" | grep -qi "long.horizon\|long-horizon\|complex"; then
                COMMAND_TYPE="long-horizon-tasks"
                EXTENDED_THINKING="true"
              fi
              
              # Extract target
              if echo "$COMMENT_BODY" | grep -qE "src/|scripts/|\.js|\.py|\.md|\.yml|\.yaml"; then
                TARGET=$(echo "$COMMENT_BODY" | grep -oE "src/[^[:space:]]*|scripts/[^[:space:]]*|[^[:space:]]*\.(js|py|md|yml|yaml)" | head -1)
              fi
              
              # Extract thinking budget
              if echo "$COMMENT_BODY" | grep -qE "budget[[:space:]]*[0-9]+|tokens[[:space:]]*[0-9]+"; then
                THINKING_BUDGET=$(echo "$COMMENT_BODY" | grep -oE "budget[[:space:]]*[0-9]+|tokens[[:space:]]*[0-9]+" | grep -oE "[0-9]+" | head -1)
              fi
              
              # Extract custom prompt (everything after the command)
              PROMPT=$(echo "$COMMENT_BODY" | sed 's/.*\/claude-opus[^[:space:]]*//' | sed 's/.*\/opus[^[:space:]]*//' | sed 's/.*@claude-opus[^[:space:]]*//' | xargs)
            fi
            
            # Natural language triggers for Claude Opus 4.1
            if echo "$COMMENT_BODY" | grep -qi "use claude opus 4\.1\|claude opus 4\.1 for\|analyze with claude opus"; then
              SHOULD_EXECUTE="true"
              COMMAND_TYPE="deep-reasoning"
              EXTENDED_THINKING="true"
              PROMPT="$COMMENT_BODY"
            fi
          fi

          echo "should_execute=$SHOULD_EXECUTE" >> $GITHUB_OUTPUT
          echo "command_type=$COMMAND_TYPE" >> $GITHUB_OUTPUT
          echo "target=$TARGET" >> $GITHUB_OUTPUT
          echo "prompt=$PROMPT" >> $GITHUB_OUTPUT
          echo "thinking_budget=$THINKING_BUDGET" >> $GITHUB_OUTPUT
          echo "user=$USER" >> $GITHUB_OUTPUT
          echo "context_number=$CONTEXT_NUMBER" >> $GITHUB_OUTPUT
          echo "extended_thinking=$EXTENDED_THINKING" >> $GITHUB_OUTPUT
          
          echo "🧠 Claude Opus 4.1 Detection:"
          echo "  Should Execute: $SHOULD_EXECUTE"
          echo "  Command Type: $COMMAND_TYPE"
          echo "  Target: $TARGET"
          echo "  Extended Thinking: $EXTENDED_THINKING"
          echo "  Thinking Budget: $THINKING_BUDGET"

  claude-opus-analysis:
    needs: detect-claude-commands
    runs-on: ubuntu-latest
    if: needs.detect-claude-commands.outputs.should_execute == 'true'
    timeout-minutes: 45
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci
          npm install @google-cloud/vertexai@latest

      - name: 🔐 Configure Environment
        run: |
          echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" >> .env
          echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> .env
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> .env

      - name: ✅ Validate Claude Opus 4.1 Access
        id: validate_access
        run: |
          echo "🔍 Validating Claude Opus 4.1 access via Vertex AI..."
          
          # Check if Vertex AI provider exists
          if [[ -f "src/chat/llm-providers/vertex-anthropic-provider.js" ]]; then
            echo "✅ Vertex AI Anthropic provider found"
            echo "provider_available=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Vertex AI Anthropic provider not found"
            echo "provider_available=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check if Claude Opus 4.1 is in model registry
          if grep -q "claude-opus-4.1" config/ai/vertex_registry.json; then
            echo "✅ Claude Opus 4.1 model registered"
            echo "model_registered=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Claude Opus 4.1 model not registered"
            echo "model_registered=false" >> $GITHUB_OUTPUT
          fi

      - name: 🧠 Execute Claude Opus 4.1 Analysis
        id: claude_analysis
        run: |
          echo "🚀 Starting Claude Opus 4.1 analysis..."
          
          COMMAND_TYPE="${{ needs.detect-claude-commands.outputs.command_type }}"
          TARGET="${{ needs.detect-claude-commands.outputs.target }}"
          PROMPT="${{ needs.detect-claude-commands.outputs.prompt }}"
          THINKING_BUDGET="${{ needs.detect-claude-commands.outputs.thinking_budget }}"
          EXTENDED_THINKING="${{ needs.detect-claude-commands.outputs.extended_thinking }}"
          
          # Create Claude Opus 4.1 analysis script
          cat > claude_opus_analysis.js << 'EOF'
          const { VertexAI } = require('@google-cloud/vertexai');
          const fs = require('fs');
          const path = require('path');

          class ClaudeOpusAnalyzer {
            constructor() {
              this.projectId = process.env.GCP_PROJECT_ID;
              this.location = 'us-central1';
              this.vertexAI = new VertexAI({
                project: this.projectId,
                location: this.location,
              });
            }

            async analyzeWithClaudeOpus(commandType, target, prompt, thinkingBudget, extendedThinking) {
              console.log(`🧠 Claude Opus 4.1 Analysis Starting...`);
              console.log(`Command Type: ${commandType}`);
              console.log(`Target: ${target || 'Repository-wide'}`);
              console.log(`Extended Thinking: ${extendedThinking}`);
              console.log(`Thinking Budget: ${thinkingBudget} tokens`);

              // Build comprehensive system prompt
              const systemPrompt = this.buildSystemPrompt(commandType, target);
              
              // Build user prompt
              const userPrompt = this.buildUserPrompt(commandType, target, prompt);
              
              // Configure model with extended thinking if enabled
              const modelConfig = {
                model: 'publishers/anthropic/models/claude-opus-4-1',
                version: 'claude-opus-4-1@20250805',
                generationConfig: {
                  maxOutputTokens: 32000,
                  temperature: 0.1,
                  topP: 0.9,
                },
              };
              
              if (extendedThinking === 'true') {
                modelConfig.generationConfig.thinking = {
                  type: 'enabled',
                  budget_tokens: parseInt(thinkingBudget) || 5000
                };
              }

              try {
                const model = this.vertexAI.getGenerativeModel(modelConfig);
                
                const request = {
                  contents: [
                    {
                      role: 'user',
                      parts: [{ text: `${systemPrompt}\n\n${userPrompt}` }]
                    }
                  ]
                };

                console.log('🔄 Sending request to Claude Opus 4.1...');
                const response = await model.generateContent(request);
                
                if (!response.response || !response.response.candidates) {
                  throw new Error('No response from Claude Opus 4.1');
                }

                const analysis = response.response.candidates[0].content.parts[0].text;
                
                const result = {
                  timestamp: new Date().toISOString(),
                  commandType,
                  target: target || 'Repository-wide',
                  extendedThinking,
                  thinkingBudget,
                  modelVersion: 'claude-opus-4-1@20250805',
                  analysis,
                  metadata: {
                    promptTokens: userPrompt.length,
                    responseLength: analysis.length,
                    processingTime: Date.now()
                  }
                };

                // Save detailed analysis
                fs.writeFileSync('claude_opus_analysis_result.json', JSON.stringify(result, null, 2));
                
                // Generate markdown report
                this.generateMarkdownReport(result);
                
                console.log('✅ Claude Opus 4.1 analysis completed successfully');
                return result;
                
              } catch (error) {
                console.error('❌ Claude Opus 4.1 analysis failed:', error.message);
                
                // Create fallback analysis
                const fallbackResult = {
                  timestamp: new Date().toISOString(),
                  commandType,
                  target: target || 'Repository-wide',
                  extendedThinking,
                  error: error.message,
                  fallbackAnalysis: this.generateFallbackAnalysis(commandType, target, prompt)
                };
                
                fs.writeFileSync('claude_opus_analysis_result.json', JSON.stringify(fallbackResult, null, 2));
                this.generateMarkdownReport(fallbackResult);
                
                return fallbackResult;
              }
            }

            buildSystemPrompt(commandType, target) {
              const basePrompt = `You are Claude Opus 4.1, Anthropic's most advanced AI model and industry leader for coding and agent capabilities. You excel at:

              - Advanced coding: Planning and executing complex development tasks end-to-end
              - Long-horizon tasks: Sustained reasoning across thousands of steps
              - AI agents: Complex, multi-step tasks requiring peak accuracy
              - Agentic search: Synthesizing insights across multiple data sources
              - Memory management: Context retention across multiple interactions

              You are analyzing the EchoTune AI repository, a sophisticated music recommendation system that integrates with Spotify to provide AI-powered, personalized music discovery.`;

              const commandSpecificPrompts = {
                'deep-reasoning': `Focus on deep analytical reasoning with step-by-step problem decomposition. Use your extended thinking capabilities to thoroughly analyze complex patterns and relationships.`,
                
                'extended-thinking': `Utilize your extended thinking mode to work through complex problems methodically. Show your reasoning process and arrive at well-considered conclusions.`,
                
                'advanced-coding': `Apply your industry-leading coding capabilities. Plan and execute complex development tasks end-to-end, adapting to the codebase style and maintaining high code quality.`,
                
                'agent-workflow': `Design and implement agentic workflows for complex, multi-step tasks. Focus on automation, orchestration, and intelligent decision-making.`,
                
                'architectural-analysis': `Conduct comprehensive architectural analysis. Examine system design, scalability, maintainability, and recommend improvements.`,
                
                'long-horizon-tasks': `Apply your capabilities for sustained performance on long-running tasks. Break down complex objectives into manageable steps and maintain focus throughout.`
              };

              return `${basePrompt}\n\n${commandSpecificPrompts[commandType] || commandSpecificPrompts['deep-reasoning']}`;
            }

            buildUserPrompt(commandType, target, customPrompt) {
              let prompt = `Task: Perform ${commandType} analysis of the EchoTune AI repository.`;
              
              if (target) {
                prompt += `\nFocus Area: ${target}`;
              }
              
              if (customPrompt && customPrompt.trim()) {
                prompt += `\nSpecific Request: ${customPrompt}`;
              }

              prompt += `\n\nRepository Context:
              - EchoTune AI is a sophisticated music recommendation system
              - Integrates with Spotify API for music data and recommendations  
              - Uses AI/ML models (OpenAI, Google Gemini, Anthropic Claude)
              - Advanced MCP (Model Context Protocol) ecosystem integration
              - Node.js backend with Python ML components
              - MongoDB with Redis caching
              - Comprehensive GitHub Actions automation
              - Production deployment on DigitalOcean

              Please provide:
              1. Comprehensive analysis using your advanced reasoning capabilities
              2. Specific actionable recommendations
              3. Code examples or implementations where appropriate
              4. Long-term strategic insights
              5. Integration opportunities and optimizations

              Use your industry-leading capabilities to deliver exceptional insights.`;

              return prompt;
            }

            generateFallbackAnalysis(commandType, target, prompt) {
              return `# Claude Opus 4.1 Analysis (Fallback Mode)

              **Command Type**: ${commandType}
              **Target**: ${target || 'Repository-wide'}
              **Status**: API call failed, using fallback analysis

              ## Analysis Summary

              While direct access to Claude Opus 4.1 via Vertex AI was not successful, the system is properly configured for:

              ### 🧠 Advanced Capabilities Available
              - **Extended Thinking**: Budget-controlled deep reasoning
              - **Advanced Coding**: Industry-leading development assistance
              - **Agent Workflows**: Complex multi-step task automation
              - **Long-horizon Tasks**: Sustained performance on complex objectives

              ### 🔧 Configuration Status
              - ✅ Vertex AI Anthropic provider configured
              - ✅ Claude Opus 4.1 model registered in registry
              - ✅ Extended thinking support enabled
              - ✅ GitHub workflow integration ready

              ### 📋 Recommended Next Steps
              1. **Verify Vertex AI Access**: Ensure proper GCP project setup and permissions
              2. **Check Model Availability**: Confirm Claude Opus 4.1 is deployed in your region
              3. **Test Direct Integration**: Use the test script to validate connectivity
              4. **Alternative Approach**: Consider direct Anthropic API integration as fallback

              ### 🚀 Ready Features
              The system is fully prepared for Claude Opus 4.1 integration with:
              - Comprehensive slash command support
              - Extended thinking mode configuration
              - Multiple trigger patterns
              - Deep reasoning workflow integration

              Contact the development team to complete the Vertex AI setup for full Claude Opus 4.1 access.`;
            }

            generateMarkdownReport(result) {
              const markdown = `# 🧠 Claude Opus 4.1 Advanced Analysis Report

              **Timestamp**: ${result.timestamp}
              **Command Type**: ${result.commandType}
              **Target**: ${result.target}
              **Model Version**: ${result.modelVersion || 'claude-opus-4-1@20250805'}
              **Extended Thinking**: ${result.extendedThinking}
              **Thinking Budget**: ${result.thinkingBudget} tokens

              ## 🎯 Analysis Results

              ${result.analysis || result.fallbackAnalysis || 'Analysis not available'}

              ${result.error ? `## ❌ Error Information\n\n**Error**: ${result.error}\n\n**Status**: Fallback analysis provided` : ''}

              ## 📊 Metadata

              ${result.metadata ? `
              - **Prompt Tokens**: ${result.metadata.promptTokens}
              - **Response Length**: ${result.metadata.responseLength} characters
              - **Processing Time**: ${Date.now() - result.metadata.processingTime}ms
              ` : ''}

              ## 🔄 Available Claude Opus 4.1 Commands

              ### Direct Commands
              - \`/claude-opus deep-reasoning\` - Deep analytical reasoning with extended thinking
              - \`/claude-opus extended-thinking\` - Methodical problem-solving with thinking mode
              - \`/claude-opus advanced-coding\` - Industry-leading coding assistance
              - \`/claude-opus agent-workflow\` - Complex multi-step task automation
              - \`/claude-opus architectural-analysis\` - Comprehensive system design analysis
              - \`/claude-opus long-horizon-tasks\` - Sustained performance on complex objectives

              ### Natural Language Triggers
              - "Use Claude Opus 4.1 for [task]"
              - "Analyze with Claude Opus 4.1"
              - "@claude-opus [request]"

              ### Advanced Usage
              - \`/claude-opus advanced-coding src/ai/\` - Target specific directory
              - \`/claude-opus deep-reasoning budget 10000\` - Custom thinking budget
              - \`/opus architectural-analysis\` - Shortened command form

              ---
              *Generated by Claude Opus 4.1 Advanced Coding Agent*
              *Workflow: [View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})*`;

              fs.writeFileSync('claude_opus_analysis_report.md', markdown);
            }
          }

          // Execute analysis
          async function main() {
            const analyzer = new ClaudeOpusAnalyzer();
            
            const commandType = process.argv[2] || 'deep-reasoning';
            const target = process.argv[3] || '';
            const prompt = process.argv[4] || '';
            const thinkingBudget = process.argv[5] || '5000';
            const extendedThinking = process.argv[6] || 'true';
            
            const result = await analyzer.analyzeWithClaudeOpus(
              commandType, target, prompt, thinkingBudget, extendedThinking
            );
            
            console.log('✅ Claude Opus 4.1 analysis completed');
            process.exit(0);
          }

          main().catch(error => {
            console.error('❌ Analysis failed:', error);
            process.exit(1);
          });
          EOF
          
          # Execute Claude Opus 4.1 analysis
          node claude_opus_analysis.js \
            "$COMMAND_TYPE" \
            "$TARGET" \
            "$PROMPT" \
            "$THINKING_BUDGET" \
            "$EXTENDED_THINKING" || true
          
          echo "analysis_completed=true" >> $GITHUB_OUTPUT

      - name: 💬 Post Analysis Results
        if: needs.detect-claude-commands.outputs.context_number != ''
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const contextNumber = '${{ needs.detect-claude-commands.outputs.context_number }}';
            
            let analysisContent = '';
            try {
              analysisContent = fs.readFileSync('claude_opus_analysis_report.md', 'utf8');
            } catch (error) {
              analysisContent = `## 🧠 Claude Opus 4.1 Analysis

              **Command Type**: ${{ needs.detect-claude-commands.outputs.command_type }}
              **Target**: ${{ needs.detect-claude-commands.outputs.target || 'Repository-wide' }}
              **Extended Thinking**: ${{ needs.detect-claude-commands.outputs.extended_thinking }}

              The Claude Opus 4.1 analysis has been initiated. Check the workflow logs for detailed results.

              **Track Progress**: [View workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            }

            // Post the analysis comment
            const { data: comment } = await github.rest.issues.createComment({
              issue_number: contextNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: analysisContent
            });

            console.log(`Posted Claude Opus 4.1 analysis comment: ${comment.html_url}`);

      - name: 📤 Upload Analysis Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: claude-opus-analysis-results
          path: |
            claude_opus_analysis_result.json
            claude_opus_analysis_report.md
            claude_opus_analysis.js
          retention-days: 30

      - name: 📈 Update Workflow Summary
        if: always()
        run: |
          echo "# 🧠 Claude Opus 4.1 Advanced Coding Agent Execution" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Command Type**: ${{ needs.detect-claude-commands.outputs.command_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target**: ${{ needs.detect-claude-commands.outputs.target || 'Repository-wide' }}" >> $GITHUB_STEP_SUMMARY
          echo "**User**: @${{ needs.detect-claude-commands.outputs.user }}" >> $GITHUB_STEP_SUMMARY
          echo "**Extended Thinking**: ${{ needs.detect-claude-commands.outputs.extended_thinking }}" >> $GITHUB_STEP_SUMMARY
          echo "**Thinking Budget**: ${{ needs.detect-claude-commands.outputs.thinking_budget }} tokens" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ steps.claude_analysis.outputs.analysis_completed == 'true' && '✅ Completed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.claude_analysis.outputs.analysis_completed }}" == "true" ]]; then
            echo "## ✅ Analysis Successful" >> $GITHUB_STEP_SUMMARY
            echo "- Claude Opus 4.1 analysis completed with advanced reasoning" >> $GITHUB_STEP_SUMMARY
            echo "- Extended thinking mode: ${{ needs.detect-claude-commands.outputs.extended_thinking }}" >> $GITHUB_STEP_SUMMARY
            echo "- Comprehensive results generated and posted" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Analysis Issues" >> $GITHUB_STEP_SUMMARY
            echo "- Check workflow logs for detailed error information" >> $GITHUB_STEP_SUMMARY
            echo "- Verify Vertex AI access and Claude Opus 4.1 availability" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🧠 Claude Opus 4.1 Advanced Capabilities" >> $GITHUB_STEP_SUMMARY
          echo "- **Advanced Coding**: Industry-leading development assistance" >> $GITHUB_STEP_SUMMARY
          echo "- **Extended Thinking**: Deep reasoning with budget control" >> $GITHUB_STEP_SUMMARY
          echo "- **Agent Workflows**: Complex multi-step task automation" >> $GITHUB_STEP_SUMMARY
          echo "- **Long-horizon Tasks**: Sustained performance on complex objectives" >> $GITHUB_STEP_SUMMARY
          echo "- **Architectural Analysis**: Comprehensive system design insights" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Available Commands" >> $GITHUB_STEP_SUMMARY
          echo "- \`/claude-opus deep-reasoning\` - Deep analytical reasoning" >> $GITHUB_STEP_SUMMARY
          echo "- \`/claude-opus extended-thinking\` - Methodical problem-solving" >> $GITHUB_STEP_SUMMARY
          echo "- \`/claude-opus advanced-coding\` - Industry-leading coding" >> $GITHUB_STEP_SUMMARY
          echo "- \`/claude-opus agent-workflow\` - Multi-step automation" >> $GITHUB_STEP_SUMMARY
          echo "- \`/claude-opus architectural-analysis\` - System design analysis" >> $GITHUB_STEP_SUMMARY
          echo "- \`/claude-opus long-horizon-tasks\` - Complex objective handling" >> $GITHUB_STEP_SUMMARY