name: Lighthouse Performance Testing

on:
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      preview_url:
        description: 'Preview URL to test (optional)'
        required: false
        type: string

jobs:
  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    if: ${{ vars.PREVIEW_URL || github.event.inputs.preview_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Determine preview URL
        id: url
        run: |
          if [ -n "${{ github.event.inputs.preview_url }}" ]; then
            echo "url=${{ github.event.inputs.preview_url }}" >> $GITHUB_OUTPUT
          elif [ -n "${{ vars.PREVIEW_URL }}" ]; then
            echo "url=${{ vars.PREVIEW_URL }}" >> $GITHUB_OUTPUT
          else
            echo "url=http://localhost:3000" >> $GITHUB_OUTPUT
          fi
        
      - name: Wait for deployment
        if: ${{ steps.url.outputs.url != 'http://localhost:3000' }}
        run: |
          for i in {1..30}; do
            if curl -f "${{ steps.url.outputs.url }}/health" > /dev/null 2>&1; then
              echo "Site is ready"
              exit 0
            fi
            echo "Waiting for site to be ready... ($i/30)"
            sleep 10
          done
          echo "Site failed to become ready"
          exit 1
          
      - name: Start local server
        if: ${{ steps.url.outputs.url == 'http://localhost:3000' }}
        run: |
          npm start &
          # Wait for server to start
          for i in {1..30}; do
            if curl -f "http://localhost:3000/health" > /dev/null 2>&1; then
              echo "Local server is ready"
              exit 0
            fi
            echo "Waiting for local server... ($i/30)"
            sleep 2
          done
          echo "Local server failed to start"
          exit 1
        env:
          NODE_ENV: test
          
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ steps.url.outputs.url }}
            ${{ steps.url.outputs.url }}/chat
            ${{ steps.url.outputs.url }}/dashboard
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
          
      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: |
            .lighthouseci/
            lhci_reports/
          retention-days: 30
          
      - name: Comment PR with Lighthouse results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Find the manifest file
            const manifestPath = '.lighthouseci/manifest.json';
            if (fs.existsSync(manifestPath)) {
              const manifest = JSON.parse(fs.readFileSync(manifestPath));
              
              let comment = '## 🏠 Lighthouse Performance Report\n\n';
              
              if (manifest.length > 0) {
                manifest.forEach(result => {
                  const scores = result.summary || {};
                  comment += `### ${result.url}\n`;
                  comment += `- **Performance**: ${Math.round((scores.performance || 0) * 100)}/100\n`;
                  comment += `- **Accessibility**: ${Math.round((scores.accessibility || 0) * 100)}/100\n`;
                  comment += `- **Best Practices**: ${Math.round((scores['best-practices'] || 0) * 100)}/100\n`;
                  comment += `- **SEO**: ${Math.round((scores.seo || 0) * 100)}/100\n\n`;
                });
              } else {
                comment += 'No Lighthouse results found.\n';
              }
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }