version: '3.8'

services:
  # Main EchoTune AI application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
      - "3001:3001"  # MCP server port
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MCP_SERVER_PORT=3001
      - MONGODB_URI=mongodb://mongodb:27017/echotune_dev
      - REDIS_URL=redis://redis:6379
      - SPOTIFY_CLIENT_ID=${SPOTIFY_CLIENT_ID}
      - SPOTIFY_CLIENT_SECRET=${SPOTIFY_CLIENT_SECRET}
      - SPOTIFY_REDIRECT_URI=http://localhost:3000/auth/callback
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - XAI_API_KEY=${XAI_API_KEY}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - DEFAULT_LLM_PROVIDER=gemini
      - ENABLE_MOCK_PROVIDER=true
      - LOG_LEVEL=debug
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.npm
    depends_on:
      - mongodb
      - redis
    restart: unless-stopped
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB database
  mongodb:
    image: mongo:6
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
      - MONGO_INITDB_DATABASE=echotune_dev
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongodb-init.js:/docker-entrypoint-initdb.d/mongodb-init.js:ro
    restart: unless-stopped
    command: mongod --auth --bind_ip_all
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis cache and session store
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # MongoDB Express for database management (development only)
  mongo-express:
    image: mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=admin123
      - ME_CONFIG_MONGODB_URL=mongodb://admin:admin123@mongodb:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin123
    depends_on:
      - mongodb
    restart: unless-stopped
    profiles:
      - tools

  # Redis Commander for cache management (development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - tools

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: echotune_dev_network
    driver: bridge

# Development usage examples:
# 
# Start core services:
# docker-compose -f docker-compose.dev.yml up
#
# Start with management tools:
# docker-compose -f docker-compose.dev.yml --profile tools up
#
# Just database services:
# docker-compose -f docker-compose.dev.yml up mongodb redis
#
# View logs:
# docker-compose -f docker-compose.dev.yml logs -f app
#
# Execute commands in app container:
# docker-compose -f docker-compose.dev.yml exec app npm test
# docker-compose -f docker-compose.dev.yml exec app npm run lint
#
# Access services:
# - App: http://localhost:3000
# - MongoDB Express: http://localhost:8081 (admin/admin123)
# - Redis Commander: http://localhost:8082
#
# Stop and remove:
# docker-compose -f docker-compose.dev.yml down -v