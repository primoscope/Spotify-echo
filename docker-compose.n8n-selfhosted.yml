version: '3.8'

services:
  # ============================================================================
  # N8N WORKFLOW AUTOMATION PLATFORM
  # Self-hosted instance with community nodes and comprehensive configuration
  # ============================================================================
  n8n:
    image: n8nio/n8n:latest
    container_name: echotune-n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      # Core n8n Configuration
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=${N8N_PROTOCOL:-https}
      - WEBHOOK_URL=${N8N_WEBHOOK_BASE_URL:-https://localhost/webhook}
      - GENERIC_TIMEZONE=${TIMEZONE:-America/New_York}
      - NODE_ENV=${NODE_ENV:-production}
      
      # Authentication & Security
      - N8N_USER_MANAGEMENT_DISABLED=${N8N_USER_MANAGEMENT_DISABLED:-false}
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE:-true}
      - N8N_BASIC_AUTH_USER=${N8N_USERNAME}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      
      # Database Configuration
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${DB_POSTGRESDB_DATABASE:-n8n_production}
      - DB_POSTGRESDB_USER=${DB_POSTGRESDB_USER:-n8n_user}
      - DB_POSTGRESDB_PASSWORD=${DB_POSTGRESDB_PASSWORD}
      - DB_POSTGRESDB_SCHEMA=public
      
      # Redis Configuration
      - QUEUE_HEALTH_CHECK_ACTIVE=true
      - QUEUE_REDIS_HOST=redis
      - QUEUE_REDIS_PORT=6379
      - QUEUE_REDIS_PASSWORD=${REDIS_PASSWORD}
      - QUEUE_REDIS_DB=0
      
      # Email Configuration
      - N8N_EMAIL_MODE=smtp
      - N8N_SMTP_HOST=${N8N_SMTP_HOST:-smtp.gmail.com}
      - N8N_SMTP_PORT=${N8N_SMTP_PORT:-587}
      - N8N_SMTP_USER=${N8N_SMTP_USER}
      - N8N_SMTP_PASS=${N8N_SMTP_PASS}
      - N8N_SMTP_SSL=${N8N_SMTP_SSL:-true}
      
      # Performance & Monitoring
      - N8N_METRICS=true
      - N8N_LOG_LEVEL=${LOG_LEVEL:-info}
      - N8N_LOG_OUTPUT=console
      
      # Community Nodes Configuration
      - N8N_CUSTOM_EXTENSIONS=/home/node/.n8n/nodes
      
      # API Configuration
      - N8N_API_ENABLED=true
      - N8N_DISABLE_UI=false
      - N8N_EDITOR_BASE_URL=${N8N_API_URL}
      
      # Webhook Configuration
      - N8N_WEBHOOK_URL=${N8N_WEBHOOK_BASE_URL}
      - N8N_SKIP_WEBHOOK_DEREGISTRATION_SHUTDOWN=true
      
      # Security Configuration
      - N8N_SECURE_COOKIE=${N8N_PROTOCOL:-https}
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_VERSION_NOTIFICATIONS_ENABLED=false
      
    volumes:
      - n8n_data:/home/node/.n8n
      - n8n_files:/files
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./scripts:/scripts:ro
      - ./data:/data:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - echotune-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`${N8N_HOST}`)"
      - "traefik.http.routers.n8n.tls=true"
      - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"

  # ============================================================================
  # POSTGRESQL DATABASE
  # Primary database for n8n workflows and application data
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: echotune-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_POSTGRESDB_DATABASE:-n8n_production}
      - POSTGRES_USER=${DB_POSTGRESDB_USER:-n8n_user}
      - POSTGRES_PASSWORD=${DB_POSTGRESDB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - echotune-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_POSTGRESDB_USER:-n8n_user} -d ${DB_POSTGRESDB_DATABASE:-n8n_production}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres 
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # ============================================================================
  # REDIS CACHE & QUEUE MANAGEMENT
  # High-performance caching and job queue management
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: echotune-redis
    restart: unless-stopped
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - echotune-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    sysctls:
      - net.core.somaxconn=65535

  # ============================================================================
  # NGINX REVERSE PROXY & SSL TERMINATION
  # High-performance web server with SSL/TLS termination
  # ============================================================================
  nginx:
    image: nginx:alpine
    container_name: echotune-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - certbot_data:/var/www/certbot:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - n8n
    networks:
      - echotune-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # CERTBOT SSL CERTIFICATE MANAGEMENT
  # Automated SSL certificate generation and renewal
  # ============================================================================
  certbot:
    image: certbot/certbot:latest
    container_name: echotune-certbot
    volumes:
      - certbot_data:/var/www/certbot
      - certbot_conf:/etc/letsencrypt
    command: >
      sh -c 'trap exit TERM; while :; do certbot renew --webroot --webroot-path=/var/www/certbot --quiet; sleep 12h & wait $${!}; done'
    networks:
      - echotune-network

  # ============================================================================
  # MCP SERVERS ORCHESTRATION
  # Model Context Protocol servers for enhanced automation
  # ============================================================================
  mcp-filesystem:
    build: 
      context: ./mcp-servers/filesystem
      dockerfile: Dockerfile
    container_name: echotune-mcp-filesystem
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - MCP_SERVER_PORT=3001
      - MCP_ALLOWED_PATHS=/workspace,/tmp,/data
      - MCP_LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./data:/workspace:ro
      - /tmp:/tmp:rw
    networks:
      - echotune-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  mcp-puppeteer:
    build:
      context: ./mcp-servers/puppeteer
      dockerfile: Dockerfile
    container_name: echotune-mcp-puppeteer
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      - MCP_SERVER_PORT=3002
      - PUPPETEER_HEADLESS=${PUPPETEER_HEADLESS:-true}
      - PUPPETEER_TIMEOUT=${PUPPETEER_TIMEOUT:-30000}
      - MCP_LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - /tmp/downloads:/downloads
    networks:
      - echotune-network
    shm_size: 2gb
    security_opt:
      - seccomp:unconfined
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  mcp-analytics:
    build:
      context: ./mcp-servers/analytics
      dockerfile: Dockerfile
    container_name: echotune-mcp-analytics
    restart: unless-stopped
    ports:
      - "3004:3004"
    environment:
      - MCP_SERVER_PORT=3004
      - ANALYTICS_ENDPOINT=${TELEMETRY_ENDPOINT}
      - MCP_LOG_LEVEL=${LOG_LEVEL:-info}
    networks:
      - echotune-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # MONITORING & OBSERVABILITY STACK
  # Comprehensive monitoring with Prometheus, Grafana, and Loki
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: echotune-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - echotune-network

  grafana:
    image: grafana/grafana:latest
    container_name: echotune-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - echotune-network
    depends_on:
      - prometheus

  loki:
    image: grafana/loki:latest
    container_name: echotune-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - echotune-network

  promtail:
    image: grafana/promtail:latest
    container_name: echotune-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - nginx_logs:/var/log/nginx:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - echotune-network
    depends_on:
      - loki

  # ============================================================================
  # BACKUP & MAINTENANCE SERVICES
  # Automated backup and database maintenance
  # ============================================================================
  backup:
    image: alpine:latest
    container_name: echotune-backup
    restart: "no"
    volumes:
      - postgres_data:/postgres_data:ro
      - n8n_data:/n8n_data:ro
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: >
      sh -c 'crontab -l | { cat; echo "0 2 * * * /backup.sh"; } | crontab - && crond -f'
    networks:
      - echotune-network
    depends_on:
      - postgres
      - n8n

  # ============================================================================
  # ADDITIONAL SERVICES
  # ============================================================================
  
  # Watchtower for automatic container updates
  watchtower:
    image: containrrr/watchtower:latest
    container_name: echotune-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_POLL_INTERVAL=3600
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=true
    networks:
      - echotune-network

  # Docker socket proxy for security
  socket-proxy:
    image: tecnativa/docker-socket-proxy:latest
    container_name: echotune-socket-proxy
    restart: unless-stopped
    ports:
      - "2376:2375"
    environment:
      - CONTAINERS=1
      - SERVICES=1
      - SWARM=1
      - TASKS=1
      - POST=0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - echotune-network

# ============================================================================
# VOLUMES CONFIGURATION
# ============================================================================
volumes:
  n8n_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/n8n_data
  
  n8n_files:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/n8n_files
  
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/postgres_data
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/redis_data
  
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/prometheus_data
  
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/grafana_data
  
  loki_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/loki_data
  
  certbot_data:
    driver: local
  
  certbot_conf:
    driver: local
  
  nginx_logs:
    driver: local

# ============================================================================
# NETWORKS CONFIGURATION
# ============================================================================
networks:
  echotune-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: echotune-br0