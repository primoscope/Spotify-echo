# EchoTune AI - Docker Compose Configuration
# Simplified for development and basic production deployment

version: '3.8'

# Common configurations
x-common-variables: &common-variables
  NODE_ENV: ${NODE_ENV:-production}
  FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
  PORT: ${PORT:-3000}

x-restart-policy: &restart-policy
  restart: unless-stopped

networks:
  echotune:
    driver: bridge

volumes:
  mongodb-data:
    driver: local
  redis-data:
    driver: local
  app-logs:
    driver: local

services:
  # Main EchoTune AI application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: echotune-ai:latest
    container_name: echotune-app
    <<: *restart-policy
    ports:
      - "${PORT:-3000}:3000"
    environment:
      <<: *common-variables
      # Database connections
      MONGODB_URI: ${MONGODB_URI:-mongodb://mongodb:27017/echotune}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-secure_redis_password}
      # Security
      SESSION_SECRET: ${SESSION_SECRET:-change_this_in_production}
      JWT_SECRET: ${JWT_SECRET:-change_this_in_production}
      # Spotify API
      SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET}
      SPOTIFY_REDIRECT_URI: ${SPOTIFY_REDIRECT_URI:-http://localhost:3000/callback}
      # AI Providers
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      LLM_PROVIDER: ${LLM_PROVIDER:-openai}
      # MCP Server
      MCP_SERVER_PORT: ${MCP_SERVER_PORT:-3001}
    volumes:
      - app-logs:/app/logs
      - ./data:/app/data
      - ./ml_datasets:/app/ml_datasets
    networks:
      - echotune
    depends_on:
      - mongodb
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MCP Server for browser automation and tools
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: mcp-server
    image: echotune-mcp:latest
    container_name: echotune-mcp
    <<: *restart-policy
    ports:
      - "${MCP_SERVER_PORT:-3001}:3001"
    environment:
      <<: *common-variables
      MCP_SERVER_PORT: 3001
      # MCP-specific environment variables
      BROWSERBASE_API_KEY: ${BROWSERBASE_API_KEY}
      BROWSERBASE_PROJECT_ID: ${BROWSERBASE_PROJECT_ID}
    networks:
      - echotune
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB database
  mongodb:
    image: mongo:7.0-jammy
    container_name: echotune-mongodb
    <<: *restart-policy
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME:-echotune}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-secure_mongo_password}
      MONGO_INITDB_DATABASE: echotune
    volumes:
      - mongodb-data:/data/db
      - ./databases/mongodb-init:/docker-entrypoint-initdb.d:ro
    networks:
      - echotune
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis cache
  redis:
    image: redis:7.2-alpine
    container_name: echotune-redis
    <<: *restart-policy
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    volumes:
      - redis-data:/data
    networks:
      - echotune
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:1.25-alpine
    container_name: echotune-nginx
    <<: *restart-policy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - echotune
    depends_on:
      - app
    profiles:
      - production