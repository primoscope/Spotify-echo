version: '3.8'

services:
  # EchoTune API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://mongodb:27017/echotune
      REDIS_URL: redis://redis:6379
    env_file:
      - .env
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - echotune-network

  # Redis Cache Service
  redis:
    image: redis:7.2-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-defaultpassword}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - echotune-network

  # MongoDB Database Service
  mongodb:
    image: mongo:7.0
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME:-echotune}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-defaultpassword}
      MONGO_INITDB_DATABASE: echotune
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    networks:
      - echotune-network

  # Optional: Frontend Service (uncomment to enable)
  # frontend:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #     target: frontend
  #   ports:
  #     - "8080:80"
  #   depends_on:
  #     - api
  #   restart: unless-stopped
  #   networks:
  #     - echotune-network

# Persistent Data Volumes
volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

# Network Configuration
networks:
  echotune-network:
    driver: bridge