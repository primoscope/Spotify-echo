version: '3.9'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: echotune-ai:latest
    container_name: echotune-app
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NODE_ENV: production
      PORT: ${PORT:-3000}
      # Derived URLs commonly needed
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:${PORT:-3000}}
      # Internal service URLs for app
      MONGODB_URI: ${MONGODB_URI:-mongodb://mongo:27017/${MONGODB_DATABASE:-echotune_production}}
      REDIS_URL: ${REDIS_URL:-redis://:${REDIS_PASSWORD:-echotune_redis_pass}@redis:6379}
    ports:
      - "${PORT:-3000}:3000"
    depends_on:
      - mongo
      - redis
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:${PORT:-3000}/health"]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - echonet

  mongo:
    image: mongo:7
    container_name: echotune-mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE:-echotune_production}
    volumes:
      - mongo_data:/data/db
    ports:
      - "${MONGO_PORT:-27017}:27017"
    networks:
      - echonet

  redis:
    image: redis:7-alpine
    container_name: echotune-redis
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD:-echotune_redis_pass}"]
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-echotune_redis_pass}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - echonet

networks:
  echonet:
    driver: bridge

volumes:
  mongo_data:
    driver: local