import type { LlmMessage, LlmProvider, LlmGenerateOptions } from '../types';
export class GoogleGeminiProvider implements LlmProvider { name = 'google-gemini'; private apiKey: string; private model: string; private timeoutMs: number; constructor() { this.apiKey = process.env.GEMINI_API_KEY || ''; if (!this.apiKey) throw new Error('GEMINI_API_KEY missing'); this.model = process.env.GEMINI_MODEL || 'gemini-1.5-flash'; this.timeoutMs = parseInt(process.env.LLM_TIMEOUT_MS || '20000', 10); } getActiveModel() { return this.model; } private transformMessages(messages: LlmMessage[]) { return messages.map(m => ({ role: m.role === 'assistant' ? 'model' : 'user', parts: [{ text: m.content }] })); } async generate(messages: LlmMessage[], options?: LlmGenerateOptions): Promise<string> { const model = options?.model || this.model; const body = { contents: this.transformMessages(messages), generationConfig: { temperature: 0.7 } }; const controller = new AbortController(); const timeout = setTimeout(() => controller.abort(), options?.timeoutMs || this.timeoutMs); try { const url = `https://generativelanguage.googleapis.com/v1beta/models/${encodeURIComponent(model)}:generateContent?key=${this.apiKey}`; const res = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body), signal: controller.signal }); if (!res.ok) { const text = await res.text(); throw new Error(`Gemini error ${res.status}: ${text.slice(0,300)}`); } const data = await res.json(); const text = data?.candidates?.[0]?.content?.parts?.map((p: any) => p?.text).join('\n') || ''; return text; } finally { clearTimeout(timeout); } } }