{
  "core_servers": [],
  "community_servers": [
    {
      "name": "analytics-server",
      "files": 1,
      "has_readme": false,
      "has_package_json": false,
      "has_config": false,
      "main_files": [
        "analytics-mcp.js"
      ]
    },
    {
      "name": "code-sandbox",
      "files": 1,
      "has_readme": false,
      "has_package_json": false,
      "has_config": false,
      "main_files": [
        "code-sandbox-mcp.js"
      ]
    },
    {
      "name": "new-candidates",
      "files": 7,
      "has_readme": false,
      "has_package_json": false,
      "has_config": false,
      "main_files": []
    },
    {
      "name": "package-management",
      "files": 1,
      "has_readme": false,
      "has_package_json": false,
      "has_config": false,
      "main_files": [
        "package-version-mcp.js"
      ]
    },
    {
      "name": "sentry-mcp",
      "files": 5,
      "has_readme": true,
      "has_package_json": true,
      "has_config": false,
      "main_files": [
        "sentry-mcp-server.js",
        "test-sentry-mcp.js"
      ],
      "description": "Sentry MCP Server for comprehensive error monitoring and performance tracking in EchoTune AI",
      "version": "1.0.0",
      "main": "sentry-mcp-server.js"
    },
    {
      "name": "sequential-thinking",
      "files": 6,
      "has_readme": true,
      "has_package_json": true,
      "has_config": true,
      "main_files": [
        "index.ts"
      ],
      "description": "MCP server for sequential thinking and problem solving",
      "version": "0.6.2"
    },
    {
      "name": "testing-automation",
      "files": 1,
      "has_readme": false,
      "has_package_json": false,
      "has_config": false,
      "main_files": [
        "testing-automation-mcp.js"
      ]
    }
  ],
  "custom_servers": [
    {
      "filename": "coordination-server.js",
      "lines": 201,
      "has_exports": true,
      "has_mcp_references": true,
      "functions": [
        "express",
        "path",
        "status",
        "workflows",
        "execution"
      ],
      "description": "Custom MCP server implementation"
    },
    {
      "filename": "enhanced-mcp-orchestrator.js",
      "lines": 592,
      "has_exports": true,
      "has_mcp_references": true,
      "functions": [
        "express",
        "WebSocket",
        "cors",
        "fs",
        "path"
      ],
      "description": "Custom MCP server implementation"
    },
    {
      "filename": "enhanced-server.js",
      "lines": 347,
      "has_exports": true,
      "has_mcp_references": true,
      "functions": [
        "express",
        "puppeteer",
        "cors",
        "fs",
        "path"
      ],
      "description": "Custom MCP server implementation"
    },
    {
      "filename": "orchestration-engine.js",
      "lines": 313,
      "has_exports": true,
      "has_mcp_references": true,
      "functions": [
        "EventEmitter",
        "axios",
        "initialize",
        "executeWorkflow",
        "workflow"
      ],
      "description": "Custom MCP server implementation"
    },
    {
      "filename": "spotify_server.py",
      "lines": 1133,
      "has_exports": false,
      "has_mcp_references": true,
      "functions": [
        "correctly"
      ],
      "description": "Custom MCP server implementation"
    },
    {
      "filename": "workflow-manager.js",
      "lines": 238,
      "has_exports": true,
      "has_mcp_references": true,
      "functions": [
        "fs",
        "path",
        "initialize",
        "createCustomWorkflow",
        "workflowId"
      ],
      "description": "Custom MCP server implementation"
    }
  ],
  "package_dependencies": [
    {
      "name": "@browserbasehq/mcp-server-browserbase",
      "version": "github:browserbase/mcp-server-browserbase",
      "type": "automation"
    },
    {
      "name": "mcp-server-code-runner",
      "version": "^0.1.7",
      "type": "utility"
    },
    {
      "name": "mongodb-mcp-server",
      "version": "^0.2.0",
      "type": "utility"
    },
    {
      "name": "n8n-mcp",
      "version": "^2.10.3",
      "type": "utility"
    },
    {
      "name": "puppeteer-mcp-server",
      "version": "^0.7.2",
      "type": "automation"
    }
  ],
  "workflow_integrations": [
    {
      "filename": "#mcp-inntegration.yml",
      "mcp_references": [
        {
          "line": 1,
          "content": "name: MCP Servers Integration"
        },
        {
          "line": 7,
          "content": "- 'mcp-servers/**'"
        },
        {
          "line": 8,
          "content": "- 'scripts/mcp-manager.js'"
        },
        {
          "line": 10,
          "content": "- '.github/workflows/mcp-integration.yml'"
        },
        {
          "line": 14,
          "content": "- 'mcp-servers/**'"
        }
      ]
    },
    {
      "filename": "agent-mcp-automation.yml",
      "mcp_references": [
        {
          "line": 1,
          "content": "name: MCP Agent Automation & Validation"
        },
        {
          "line": 10,
          "content": "description: 'Run MCP discovery scan'"
        },
        {
          "line": 24,
          "content": "# Weekly MCP discovery on Sundays at 2 AM UTC"
        },
        {
          "line": 29,
          "content": "MCP_SERVER_PORT: 3001"
        },
        {
          "line": 32,
          "content": "mcp-discovery:"
        }
      ]
    },
    {
      "filename": "copilot-models.yml",
      "mcp_references": [
        {
          "line": 406,
          "content": "- **MCP Integration**: Advanced automation capabilities with 12+ MCP servers"
        },
        {
          "line": 541,
          "content": "- MCP server integration tests"
        }
      ]
    },
    {
      "filename": "copilot-slash-commands.yml",
      "mcp_references": [
        {
          "line": 510,
          "content": "MCP[MCP Automation Server]"
        },
        {
          "line": 540,
          "content": "LB --> MCP"
        },
        {
          "line": 554,
          "content": "MCP --> FILES"
        },
        {
          "line": 1042,
          "content": "# Start the MCP automation server (optional)"
        },
        {
          "line": 1043,
          "content": "npm run mcp-server"
        }
      ]
    },
    {
      "filename": "digitalocean-deploy.yml",
      "mcp_references": [
        {
          "line": 42,
          "content": "MCP_IMAGE: echotune-mcp"
        },
        {
          "line": 186,
          "content": "- name: mcp"
        },
        {
          "line": 187,
          "content": "dockerfile: mcp-server/Dockerfile"
        },
        {
          "line": 188,
          "content": "context: mcp-server"
        },
        {
          "line": 189,
          "content": "image: ${{ env.MCP_IMAGE }}"
        }
      ]
    },
    {
      "filename": "gemini-enhanced.yml",
      "mcp_references": [
        {
          "line": 9,
          "content": "- 'mcp-server/**'"
        },
        {
          "line": 99,
          "content": "src/*|mcp-server/*|scripts/*)"
        },
        {
          "line": 257,
          "content": "INPUT_INCLUDE: \"src,scripts,mcp-server,tests,.github/workflows\""
        },
        {
          "line": 288,
          "content": "-E \"(api[_-]?key||password|token)\" src/ scripts/ mcp-server/ 2>/dev/null | \\"
        }
      ]
    }
  ]
}