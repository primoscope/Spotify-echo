{
  "name": "echotune-ai",
  "version": "2.1.0",
  "description": "EchoTune AI - Advanced music discovery platform with AI-powered recommendations, conversational music search, and comprehensive analytics",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "start:original": "node src/index.js",
    "start:root": "node index.js",
    "mcp-server": "cd mcp-server && npm start",
    "mcp-orchestrator": "node mcp-server/enhanced-mcp-orchestrator.js",
    "mcp-workflow": "node mcp-server/workflow-manager.js",
    "mcp-community": "node scripts/test-community-mcp-servers.js",
    "mcp-install": "node scripts/mcp-manager.js install",
    "mcp-health": "node scripts/mcp-manager.js health",
    "mcp-test": "node scripts/mcp-manager.js test",
    "mcp-report": "node scripts/mcp-manager.js report",
    "validate": "node scripts/comprehensive-validation-suite.js",
    "validate:quick": "node scripts/comprehensive-validation-suite.js --quick",
    "mcp:validate-connectivity": "./mcp-config/validate_mcp.sh",
    "mcp:package-mgmt": "node mcp-servers/package-management/package-version-mcp.js",
    "mcp:code-sandbox": "node mcp-servers/code-sandbox/code-sandbox-mcp.js",
    "mcp:analytics": "node mcp-servers/analytics-server/analytics-mcp.js",
    "mcp:testing": "node mcp-servers/testing-automation/testing-automation-mcp.js",
    "mcp:sentry": "node mcp-servers/sentry-mcp/sentry-mcp-server.js",
    "mcp:sentry-test": "node mcp-servers/sentry-mcp/test-sentry-mcp.js",
    "mcp:sentry-health": "curl -f http://localhost:3012/health || exit 1",
    "mcp:filesystem": "node mcp-servers/filesystem/index.js",
    "mcp:memory": "node mcp-servers/memory/index.js",
    "mcp:github-repos": "node mcp-servers/github-repos-manager/index.js",
    "mcp:brave-search": "node mcp-servers/brave-search/brave-search-mcp.js",
    "mcp:sequential-thinking": "node mcp-servers/sequential-thinking/dist/index.js",
    "mcp:browserbase": "node mcp-servers/browserbase/browserbase-mcp.js",
    "mcp:start:all": "cd mcp-servers && npm run start:all",
    "mcp:test:all": "npm run mcp:test:comprehensive && npm run mcp:test:live-servers && npm run mcp:test:automation",
    "mcp:validate:all": "node mcp-comprehensive-server-test.js --validate-only",
    "mcp:health:all": "curl -s http://localhost:3002/health | jq '.' || echo 'Orchestrator not running'",
    "mcp:orchestrated-start": "node mcp-server/enhanced-mcp-orchestrator.js --start-all",
    "mcp:orchestrator-health": "curl -s http://localhost:3002/servers | jq '.' || echo 'Orchestrator not available'",
    "mcp:discover": "node scripts/discover-new-mcp-servers.js",
    "mcp:auto-docs": "node scripts/mcp-documentation-automator.js",
    "mcp:full-automation": "npm run mcp:discover && npm run mcp:auto-docs",
    "mcp:test-automation": "node scripts/test-mcp-automation.js",
    "mcp:health-all": "npm run mcp:health && curl -f http://localhost:3002/health && curl -f http://localhost:3003/status",
    "mcp:validate-comprehensive": "node scripts/comprehensive-mcp-validation.js",
    "mcp:enhanced-validation": "node scripts/enhanced-mcp-validation-pipeline.js",
    "mcp:enhanced-validation-fix": "npm install && node scripts/enhanced-mcp-validation-pipeline.js",
    "mcp:test:comprehensive": "node scripts/mcp/comprehensive-test-suite.js",
    "mcp:test:live-servers": "node scripts/mcp/live-server-test.js",
    "mcp:test:automation": "node scripts/mcp/automation-progress-test.js",
    "mcp:orchestrator-status": "node mcp-server/enhanced-registry-orchestrator.js status",
    "mcp:orchestrator-start": "node mcp-server/enhanced-registry-orchestrator.js start",
    "mcp:health-monitor": "node mcp-server/enhanced-health-monitor.js",
    "mcp:continuous-monitor": "node scripts/continuous-mcp-monitor.js",
    "mcpperplexity": "node mcp-servers/perplexity-mcp/perplexity-mcp-server.js",
    "testperplexity": "node -e \"const server = require('./mcp-servers/perplexity-mcp/perplexity-mcp-server.js'); console.log('Perplexity MCP server test passed');\"",
    "test:perplexity-enhanced": "node mcp-servers/perplexity-mcp/test-enhanced-perplexity.js",
    "validate:perplexity-enhanced": "./mcp-servers/perplexity-mcp/validate-enhanced-perplexity.sh",
    "generate-cursor-mcp": "node scripts/generate-cursor-mcp-enhanced.js",
    "dev": "nodemon src/index.js",
    "dev:frontend": "vite",
    "build": "vite build",
    "build:frontend": "vite build",
    "preview": "vite preview",
    "test": "jest --config tests/jest.config.js",
    "test:watch": "jest --config tests/jest.config.js --watch",
    "test:integration": "jest --config tests/jest.config.js tests/integration",
    "test:unit": "jest --config tests/jest.config.js tests/unit",
    "test:e2e": "jest --config tests/jest.config.js tests/e2e",
    "test:performance": "jest --config tests/jest.config.js tests/performance",
    "test:mcp": "jest --config tests/jest.config.js tests/integration/enhanced-mcp-tools.test.js",
    "test:mcp-performance": "jest --config tests/jest.config.js tests/performance/mcp-performance.test.js",
    "test:mcp-integration": "./tests/mcp-integration.test.sh",
    "lint": "npx eslint src/",
    "lint:fix": "npx eslint src/ --fix",
    "format": "npx prettier --write src/",
    "format:check": "npx prettier --check src/",
    "health-check": "curl -f http://localhost:3000/health || exit 1",
    "deploy": "./scripts/deploy.sh",
    "deploy:simple": "./scripts/simple-deploy.sh deploy",
    "deploy:digitalocean": "node scripts/digitalocean-manager.js deploy",
    "deploy:doctl": "bash scripts/deployment/install-doctl-ghpat.sh",
    "deploy:doctl-demo": "bash scripts/deployment/install-doctl-ghpat.sh --dry-run",
    "deploy:doctl-test": "bash scripts/deployment/install-doctl-ghpat.sh --app-platform --debug",
    "deploy:doctl-monitor": "bash scripts/deployment/install-doctl-ghpat.sh monitor",
    "deploy:open": "echo 'Opening deployment page...' && xdg-open http://localhost:3000/deploy/ || echo 'Open http://localhost:3000/deploy/'",
    "deploy:page": "echo 'One-click deployment page: http://localhost:3000/deploy/'",
    "validate-deployment": "./validate-deployment.sh",
    "setup-digitalocean": "./scripts/deployment/setup-digitalocean.sh",
    "integrate-mcp": "./scripts/integrate-mcp.sh",
    "complete-integrations": "./scripts/complete-integrations.sh",
    "mcp-integrate": "node scripts/integrate-mcp-servers.js",
    "mcp-test-filesystem": "node node_modules/FileScopeMCP/dist/index.js --help",
    "mcp-test-browserbase": "node scripts/browserbase-test.js",
    "mcp-generate-diagrams": "node scripts/integrate-mcp-servers.js --diagrams-only",
    "mcp-analyze-repo": "node scripts/integrate-mcp-servers.js --analyze-only",
    "mcp-server-start": "cd mcp-server && npm run orchestrator",
    "mcp-test-integration": "node scripts/test-mcp-integration.js",
    "test:deployment": "./tests/deployment-core.test.sh",
    "validate:deployment": "./tests/deployment-core.test.sh && ./tests/mcp-integration.test.sh",
    "validate:scripts": "bash -n scripts/*.sh && bash -n *.sh",
    "validate:env": "node -e \"require('dotenv').config(); console.log('Environment validation passed')\"",
    "analyze:json-data": "node scripts/analyze-json-data.js",
    "merge:json-data": "node scripts/merge-json-data.js",
    "validate:merged-data": "node scripts/validate-merged-data.js",
    "data:complete-analysis": "npm run analyze:json-data && npm run merge:json-data && npm run validate:merged-data",
    "validate:comprehensive": "node scripts/comprehensive-validation.js",
    "validate:api-keys": "node scripts/validate-api-keys.js --all",
    "validate:api-comprehensive": "node scripts/comprehensive-api-testing.js",
    "validate:spotify": "node scripts/validate-api-keys.js --spotify",
    "validate:openai": "node scripts/validate-api-keys.js --openai",
    "validate:gemini": "node scripts/validate-api-keys.js --gemini",
    "validate:mongodb": "node scripts/validate-api-keys.js --mongodb",
    "validate:mongodb-comprehensive": "node scripts/validate-mongodb-connection.js",
    "validate:mongodb-enhanced": "node scripts/validate-enhanced-mongodb.js",
    "populate:spotify-analytics": "node scripts/populate-spotify-analytics.js",
    "process:enhanced-data": "node scripts/process-enhanced-data.js",
    "analyze:listening-history": "node scripts/analyze-listening-history-merge.js",
    "enhance:audio-features": "node scripts/enhance-audio-features.js",
    "diagnostic:data": "node scripts/data-diagnostic.js",
    "optimize:database-ai": "node scripts/optimize-database-ai.js",
    "fetch:missing-audio-features": "node scripts/fetch-missing-audio-features.js",
    "implement:feature-vectors": "node scripts/implement-feature-vectors.js",
    "status:redis-roadmap": "node scripts/redis-roadmap-status.js",
    "validate:mcp-server": "node scripts/validate-api-keys.js --mcp-server",
    "validate:security": "node scripts/validate-api-keys.js --security",
    "validate:ssl": "node scripts/validate-api-keys.js --ssl",
    "validate:docker": "node scripts/validate-api-keys.js --docker",
    "test:servers": "node scripts/test-all-servers.js",
    "test:docker-hub": "node scripts/test-all-servers.js && echo 'Testing Docker Hub specifically...'",
    "test:digitalocean": "node scripts/test-all-servers.js && echo 'Testing DigitalOcean services...'",
    "test:registries": "node scripts/test-all-servers.js && echo 'Testing all container registries...'",
    "auth:wizard": "node scripts/auth-wizard.js",
    "auth:setup": "node scripts/auth-wizard.js",
    "deployment:status": "node scripts/deployment-status.js",
    "deployment:report": "node scripts/deployment-status.js && cat DEPLOYMENT_STATUS_REPORT.md",
    "do:status": "node scripts/digitalocean-manager.js status",
    "do:apps": "node scripts/digitalocean-manager.js apps",
    "do:droplets": "node scripts/digitalocean-manager.js droplets",
    "do:registries": "node scripts/digitalocean-manager.js registries",
    "do:k8s": "node scripts/digitalocean-manager.js k8s",
    "do:docker-login": "node scripts/digitalocean-manager.js docker-login",
    "do:deploy": "node scripts/digitalocean-manager.js deploy",
    "do:report": "node scripts/digitalocean-manager.js report",
    "do:auth": "node scripts/digitalocean-manager.js auth",
    "do:enhanced": "node scripts/enhanced-digitalocean-manager.js",
    "do:enhanced-test": "node scripts/enhanced-digitalocean-manager.js test",
    "do:enhanced-auth": "node scripts/enhanced-digitalocean-manager.js auth",
    "do:enhanced-registry-token": "node scripts/enhanced-digitalocean-manager.js registry-token",
    "do:enhanced-account": "node scripts/enhanced-digitalocean-manager.js account",
    "do:enhanced-update-env": "node scripts/enhanced-digitalocean-manager.js update-env",
    "config:report": "node scripts/update-env-config.js",
    "config:add-missing": "node scripts/update-env-config.js --add-missing --backup",
    "config:interactive": "node scripts/update-env-config.js --interactive",
    "config:dry-run": "node scripts/update-env-config.js --add-missing --dry-run",
    "automate:mcp": "node scripts/mcp-automation.js",
    "automate:validate": "node scripts/mcp-automation.js validate",
    "automate:test": "node scripts/mcp-automation.js test",
    "automate:docs": "node scripts/mcp-automation.js docs",
    "automate:health": "node scripts/mcp-automation.js health",
    "automate:optimize": "node scripts/mcp-automation.js optimize",
    "automate:all": "node scripts/mcp-automation.js all",
    "automate:status": "node scripts/mcp-automation.js status",
    "automate:report": "node scripts/mcp-automation.js report",
    "validate:comprehensive-mcp": "node scripts/comprehensive-mcp-validation.js",
    "automate:enhanced": "node scripts/enhanced-mcp-automation.js",
    "validate:full-system": "node scripts/enhanced-mcp-automation.js",
    "mcp-health-check": "curl -s http://localhost:3001/health | jq '.' || echo 'MCP server not running'",
    "mcp:registry-orchestrator": "node mcp-server/enhanced-registry-orchestrator.js",
    "mcp:orchestrator-stop": "node mcp-server/enhanced-registry-orchestrator.js stop",
    "mcp:comprehensive-suite": "npm run mcp:enhanced-validation && npm run mcp:health-monitor &",
    "mcp-manage": "node scripts/mcp-manager.js",
    "mcp-test-all": "node scripts/mcp-manager.js test",
    "mcp-validate": "node scripts/validate-mcp-integration.js",
    "merge-csv": "python scripts/merge_csv_data.py",
    "setup-db": "python scripts/database_setup.py",
    "populate-audio": "python scripts/populate_audio_features.py",
    "migrate-mongodb": "python scripts/migrate_to_mongodb.py",
    "migrate-supabase": "python scripts/migrate_to_supabase.py",
    "mcp-spotify": "cd mcp-server && python spotify_server.py",
    "analyze-data": "python scripts/analyze_listening_data.py",
    "train-model": "python scripts/train_recommendation_model.py",
    "prompts": "node prompts/tools/cli.js",
    "prompts:validate": "node prompts/tools/validator.js validate",
    "prompts:execute": "node prompts/tools/executor.js execute",
    "prompts:test": "node prompts/tools/executor.js test",
    "prompts:list": "node prompts/tools/executor.js list",
    "prompts:fix": "node prompts/tools/validator.js fix",
    "prompts:server": "node prompts/tools/cli.js server",
    "perplexity:exec": "node prompts/tools/executor.js execute analysis/user-driven-sonar-pro --user_prompt",
    "gemini-test": "node scripts/test-gemini-integration.js",
    "gemini-health": "node scripts/test-gemini-integration.js",
    "test:gemini-integration": "node scripts/test-gemini-integration.js",
    "test:automation-integration": "node scripts/test-automation-integration.js",
    "test:perplexity-grok4": "npm run test:integration -- --testPathPattern=perplexity-grok4-integration-tests.js",
    "demo:perplexity-grok4": "node demo-integration.js",
    "demo:automation": "node scripts/demo-automation-workflow.js",
    "status:automation": "node scripts/automation-system-status.js",
    "research:music": "node scripts/music-research-automation.js",
    "test:music-integration": "npm run test:integration -- --testPathPattern=music.*test",
    "test:perplexity-api": "npm run test:integration -- --testPathPattern=perplexity.*test",
    "test:browser-research": "npm run test:integration -- --testPathPattern=browser.*test",
    "production-check": "node scripts/production-readiness-orchestrator.js --production-check",
    "production-deploy": "./scripts/deploy-digitalocean.sh",
    "workflow:analyze": "node scripts/workflow-optimizer.js analyze",
    "workflow:optimize": "node scripts/workflow-optimizer.js optimize",
    "workflow:optimize:apply": "node scripts/workflow-optimizer.js optimize --apply",
    "workflow:status": "node agent-workflow/workflow-cli.js status",
    "workflow:report": "node scripts/workflow-optimizer.js report",
    "agent:run": "node scripts/continuous-agent.js",
    "agent:analyze": "node scripts/continuous-agent.js analyze",
    "agent:create-issue": "node scripts/continuous-agent.js create-issue",
    "agent:status": "node scripts/continuous-agent.js status",
    "agent:config": "cat agent-workflow/config/config.json",
    "agent:enable": "node -e \"const fs=require('fs'); const config=require('./agent-workflow/config/config.json'); config.enabled=true; fs.writeFileSync('./agent-workflow/config/config.json', JSON.stringify(config,null,2));\"",
    "agent:disable": "node -e \"const fs=require('fs'); const config=require('./agent-workflow/config/config.json'); config.enabled=false; fs.writeFileSync('./agent-workflow/config/config.json', JSON.stringify(config,null,2));\"",
    "workflow:templates": "node agent-workflow/workflow-cli.js templates",
    "workflow:create": "node agent-workflow/workflow-cli.js create",
    "workflow:active": "node agent-workflow/workflow-cli.js active",
    "workflow:validate": "node agent-workflow/workflow-cli.js validate",
    "workflow:generate": "node agent-workflow/workflow-cli.js generate",
    "workflow:cli": "node agent-workflow/workflow-cli.js",
    "validate:digitalocean": "./scripts/validate-digitalocean-deployment.sh",
    "validate:deployment-config": "./scripts/validate-digitalocean-deployment.sh",
    "docker:setup": "./scripts/docker/docker-ubuntu-setup.sh",
    "docker:deploy": "./scripts/simple-deploy.sh",
    "docker:manage": "./scripts/docker/docker-manager.sh",
    "docker:optimize": "./scripts/docker/docker-manager.sh optimize",
    "docker:monitor": "./scripts/docker/docker-manager.sh monitor",
    "docker:check": "./scripts/docker/docker-manager.sh check",
    "docker:report": "./scripts/docker/docker-manager.sh report",
    "deploy:docker": "./scripts/simple-deploy.sh deploy",
    "deploy:ubuntu": "./scripts/docker/docker-ubuntu-setup.sh && ./scripts/simple-deploy.sh",
    "setup:redis": "node scripts/setup-redis.js",
    "configure:redis": "node scripts/configure-redis.js",
    "validate:redis": "node -e \"const redis = require('./src/utils/redis-manager'); redis.ping().then(() => {console.log('✅ Redis connected'); return redis.close();}).catch(e => {console.error('❌ Redis failed:', e.message); process.exit(1);}).finally(() => process.exit(0))\"",
    "redis:health": "node -e \"const RedisManager = require('./scripts/configure-redis'); const r = new RedisManager(); r.initialize().then(() => r.healthCheck()).then(h => console.log(JSON.stringify(h, null, 2))).finally(() => r.close())\"",
    "redis:stats": "node -e \"const RedisManager = require('./scripts/configure-redis'); const r = new RedisManager(); r.initialize().then(() => r.getCacheStats()).then(s => console.log(JSON.stringify(s, null, 2))).finally(() => r.close())\"",
    "redis:clear": "node -e \"const RedisManager = require('./scripts/configure-redis'); const r = new RedisManager(); r.initialize().then(() => r.clearCache()).then(() => console.log('✅ Cache cleared')).finally(() => r.close())\"",
    "redis:clear-audio": "node -e \"const RedisManager = require('./scripts/configure-redis'); const r = new RedisManager(); r.initialize().then(() => r.clearCache('audio_features:*')).then(count => console.log('✅ Cleared', count, 'audio features')).finally(() => r.close())\"",
    "redis:clear-recommendations": "node -e \"const RedisManager = require('./scripts/configure-redis'); const r = new RedisManager(); r.initialize().then(() => r.clearCache('recommendations:*')).then(count => console.log('✅ Cleared', count, 'recommendations')).finally(() => r.close())\"",
    "performance:baseline": "node src/utils/performance-baseline.js",
    "performance:smoke-test": "node scripts/performance-smoke-test.js",
    "performance:mcp-analytics": "node -e \"const {MCPPerformanceAnalytics} = require('./src/utils/mcp-performance-analytics'); const analytics = new MCPPerformanceAnalytics(); analytics.runAnalytics().catch(console.error);\"",
    "test:performance-smoke": "npm run performance:smoke-test -- --duration 30",
    "security:audit": "./scripts/security-audit.sh",
    "security:check": "npm audit && ./scripts/security-audit.sh",
    "production:validate": "./scripts/security-audit.sh && npm audit --audit-level=high",
    "production:ready": "npm run lint && npm run test && npm run security:audit && npm run build",
    "mcp:n8n_mcp": "node mcp-servers/new-candidates/n8n-mcp/integration.js",
    "test:n8n_mcp": "jest mcp-servers/new-candidates/n8n-mcp/test.js",
    "mcp:mcp_server_code_runner": "node mcp-servers/new-candidates/mcp-server-code-runner/integration.js",
    "test:mcp_server_code_runner": "jest mcp-servers/new-candidates/mcp-server-code-runner/test.js",
    "mcp:mongodb_mcp_server": "node mcp-servers/new-candidates/mongodb-mcp-server/integration.js",
    "test:mongodb_mcp_server": "jest mcp-servers/new-candidates/mongodb-mcp-server/test.js",
    "mcp:puppeteer_mcp_server": "node mcp-servers/new-candidates/puppeteer-mcp-server/integration.js",
    "test:puppeteer_mcp_server": "jest mcp-servers/new-candidates/puppeteer-mcp-server/test.js",
    "mcp:hismaserver_puppeteer": "node mcp-servers/new-candidates/@hisma/server-puppeteer/integration.js",
    "test:hismaserver_puppeteer": "jest mcp-servers/new-candidates/@hisma/server-puppeteer/test.js",
    "mcp:candidates": "node scripts/run-all-candidates.js",
    "test:candidates": "jest mcp-servers/new-candidates/*/test.js",
    "enhanced-mcp:start": "node src/mcp/enhanced-multimodel-orchestrator.js",
    "enhanced-mcp:workflow": "node src/mcp/workflow-integration-manager.js",
    "enhanced-mcp:test": "node -e \"const WorkflowManager = require('./src/mcp/workflow-integration-manager'); const manager = new WorkflowManager(); console.log('Enhanced MCP system initialized successfully');\"",
    "enhanced-mcp:health": "curl -s http://localhost:3000/api/enhanced-mcp/health | jq '.' || echo 'Enhanced MCP server not running'",
    "enhanced-mcp:capabilities": "curl -s http://localhost:3000/api/enhanced-mcp/capabilities | jq '.' || echo 'Enhanced MCP server not running'",
    "enhanced-mcp:models": "curl -s http://localhost:3000/api/enhanced-mcp/models | jq '.' || echo 'Enhanced MCP server not running'",
    "production-readiness": "node scripts/production-readiness-analyzer.js",
    "production-automation": "node scripts/mcp-production-automation.js",
    "production-analysis": "node scripts/production-readiness-orchestrator.js",
    "production-analysis:quick": "node scripts/production-readiness-orchestrator.js --quick",
    "production-analysis:full": "node scripts/production-readiness-orchestrator.js --full",
    "production-fixes": "npm run lint:fix && npm audit fix && npm run format",
    "production-ready": "npm run production-analysis && echo 'Check PRODUCTION_READINESS_EXECUTIVE_SUMMARY.md for results'",
    "mcp:health:n8n": "node scripts/mcp/probes/probe-n8n.js",
    "mcp:health:mongodb": "node scripts/mcp/probes/probe-mongodb.js",
    "mcp:validate-all": "node validate-all-mcp-servers.js",
    "mcp:postgresql": "node mcp-servers/postgresql/index.js",
    "mcp:sqlite": "node mcp-servers/sqlite/index.js",
    "mcp:fetch": "node mcp-servers/fetch/index.js",
    "mcp:start:extended": "cd mcp-servers && npm run start:all",
    "continuous-analysis": "node scripts/continuous-analysis-system.js",
    "continuous-analysis:single": "node scripts/continuous-analysis-system.js single",
    "continuous-analysis:continuous": "node scripts/continuous-analysis-system.js continuous",
    "analysis:research": "node scripts/continuous-analysis-system.js single",
    "analysis:report": "echo 'Check automation-outputs/reports/ for latest analysis report'",
    "perplexity:research": "node -e \"const P = require('./src/chat/llm-providers/perplexity-provider'); const p = new P({apiKey: process.env.PERPLEXITY_API_KEY}); p.initialize().then(() => p.research(process.argv[1])).then(console.log).catch(console.error)\" -- ",
    "grok4:analyze": "node -e \"const G = require('./src/chat/llm-providers/grok4-provider'); const g = new G({apiKey: process.env.XAI_API_KEY}); g.initialize().then(() => g.analyzeRepository('sample code', 'comprehensive')).then(console.log).catch(console.error)\""
  },
  "keywords": [
    "music-discovery",
    "music-recommendations",
    "spotify-integration",
    "ai-music-chat",
    "music-analytics",
    "conversational-ai",
    "music-platform",
    "playlist-generation"
  ],
  "author": "EchoTune AI Team",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/dzp5103/Spotify-echo.git"
  },
  "bugs": {
    "url": "https://github.com/dzp5103/Spotify-echo/issues"
  },
  "homepage": "https://github.com/dzp5103/Spotify-echo#readme",
  "engines": {
    "node": ">=20.0.0",
    "npm": ">=10.0.0",
    "python": ">=3.8"
  },
  "dependencies": {
    "@babel/preset-react": "^7.27.1",
    "@browserbasehq/mcp-server-browserbase": "github:browserbase/mcp-server-browserbase",
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.1",
    "@google/generative-ai": "^0.2.1",
    "@hisma/server-puppeteer": "^0.6.5",
    "@modelcontextprotocol/sdk": "^1.17.3",
    "@modelcontextprotocol/server-filesystem": "^2025.7.29",
    "@modelcontextprotocol/server-memory": "^2025.8.4",
    "@modelcontextprotocol/server-puppeteer": "^2025.5.12",
    "@modelcontextprotocol/server-sequential-thinking": "^2025.7.1",
    "@mui/icons-material": "^7.3.1",
    "@mui/material": "^7.3.1",
    "@mui/system": "^7.3.1",
    "@octokit/rest": "^22.0.0",
    "@sentry/node": "^10.3.0",
    "@supabase/supabase-js": "^2.53.0",
    "ajv": "^8.12.0",
    "ajv-formats": "^2.1.1",
    "better-sqlite3": "^12.2.0",
    "commander": "^12.0.0",
    "compression": "^1.7.4",
    "cookie-parser": "^1.4.7",
    "cors": "^2.8.5",
    "csv-parser": "^3.2.0",
    "express": "^4.18.0",
    "express-rate-limit": "^7.1.5",
    "express-session": "^1.18.2",
    "express-slow-down": "^2.0.1",
    "FileScopeMCP": "github:admica/FileScopeMCP",
    "glob": "^11.0.3",
    "helmet": "^7.1.0",
    "js-yaml": "^4.1.0",
    "jsonwebtoken": "^9.0.2",
    "lodash": "^4.17.21",
    "mcp-server-code-runner": "^0.1.7",
    "mongodb-mcp-server": "^0.2.0",
    "multer": "^2.0.0",
    "n8n-mcp": "^2.10.2",
    "node-fetch": "^3.3.2",
    "openai": "^4.24.0",
    "prop-types": "^15.8.1",
    "puppeteer-mcp-server": "^0.7.2",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-router-dom": "^7.7.1",
    "redis": "^4.7.1",
    "socket.io": "^4.7.0",
    "socket.io-client": "^4.8.1",
    "sqlite3": "^5.1.7",
    "uuid": "^9.0.1",
    "ws": "^8.14.0"
  },
  "devDependencies": {
    "@azure/openai": "^2.0.0",
    "@babel/core": "^7.28.0",
    "@babel/plugin-transform-modules-commonjs": "^7.27.1",
    "@babel/preset-env": "^7.28.0",
    "@eslint/js": "^9.33.0",
    "@types/cors": "^2.8.0",
    "@types/express": "^4.17.0",
    "@types/jest": "^29.5.14",
    "@types/multer": "^1.4.0",
    "@types/node": "^20.19.11",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "@vitejs/plugin-react": "^4.7.0",
    "autoprefixer": "^10.4.21",
    "axios": "^1.11.0",
    "babel-jest": "^30.0.5",
    "concurrently": "^9.2.0",
    "dotenv": "^16.6.1",
    "eslint": "^8.0.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.0",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-react-hooks": "^5.2.0",
    "globals": "^16.3.0",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^30.0.5",
    "mongodb": "^6.18.0",
    "node-cache": "^5.1.2",
    "nodemon": "^3.0.0",
    "postcss": "^8.5.6",
    "prettier": "^3.0.0",
    "puppeteer": "^24.16.2",
    "supertest": "^7.1.4",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.1",
    "terser": "^5.43.1",
    "ts-jest": "^29.0.0",
    "ts-node": "^10.9.2",
    "typescript": "^5.9.2",
    "vite": "^7.0.6",
    "vite-plugin-compression": "^0.5.1",
    "web-vitals": "^3.5.2",
    "webpack": "^5.0.0",
    "webpack-cli": "^5.0.0"
  },
  "mcp": {
    "servers": {
      "browser": {
        "command": "npx",
        "args": [
          "@modelcontextprotocol/server-puppeteer"
        ],
        "env": {
          "PUPPETEER_HEADLESS": "true"
        }
      },
      "browserbase": {
        "command": "npx",
        "args": [
          "@browserbasehq/mcp-server-browserbase"
        ],
        "env": {
          "BROWSERBASE_API_KEY": "${BROWSERBASE_API_KEY}",
          "BROWSERBASE_PROJECT_ID": "${BROWSERBASE_PROJECT_ID}"
        }
      },
      "filesystem": {
        "command": "node",
        "args": [
          "node_modules/FileScopeMCP/dist/mcp-server.js"
        ],
        "env": {
          "ALLOWED_DIRECTORIES": "${PWD},${PWD}/src,${PWD}/scripts,${PWD}/mcp-server"
        }
      },
      "spotify": {
        "command": "python",
        "args": [
          "mcp-server/spotify_server.py"
        ],
        "env": {
          "SPOTIFY_CLIENT_ID": "${SPOTIFY_CLIENT_ID}",
          "SPOTIFY_CLIENT_SECRET": "${SPOTIFY_CLIENT_SECRET}"
        }
      },
      "sequential-thinking": {
        "command": "node",
        "args": [
          "mcp-servers/sequential-thinking/dist/index.js"
        ],
        "description": "Structured thinking and reasoning capabilities for complex tasks"
      },
      "screenshot-website": {
        "command": "node",
        "args": [
          "mcp-servers/screenshot-website/dist/index.js"
        ],
        "description": "Fast website screenshot capabilities for automation"
      },
      "enhanced-file-utilities": {
        "command": "node",
        "args": [
          "mcp-servers/enhanced-file-utilities.js"
        ],
        "description": "Enhanced file handling with validation and security"
      },
      "enhanced-browser-tools": {
        "command": "node",
        "args": [
          "mcp-servers/enhanced-browser-tools.js"
        ],
        "description": "Improved browser automation with error checking"
      },
      "comprehensive-validator": {
        "command": "node",
        "args": [
          "mcp-servers/comprehensive-validator.js"
        ],
        "description": "System-wide validation and monitoring"
      }
    }
  },
  "jest": {
    "testEnvironment": "jsdom",
    "setupFilesAfterEnv": [
      "<rootDir>/tests/setup.js"
    ],
    "testMatch": [
      "**/__tests__/**/*.test.{js,ts}",
      "**/tests/**/*.test.{js,ts}"
    ],
    "collectCoverageFrom": [
      "src/**/*.{js,ts}",
      "!src/**/*.d.ts"
    ],
    "coverageDirectory": "coverage",
    "coverageReporters": [
      "text",
      "lcov",
      "html"
    ],
    "moduleNameMapper": {
      "^@/(.*)$": "<rootDir>/src/$1"
    },
    "transform": {
      "^.+\\.js$": "babel-jest"
    },
    "transformIgnorePatterns": [
      "node_modules/(?!(mongodb|bson)/)"
    ]
  },
  "eslintConfig": {
    "extends": [
      "eslint:recommended",
      "plugin:react/recommended",
      "plugin:react-hooks/recommended"
    ],
    "plugins": [
      "react",
      "react-hooks"
    ],
    "env": {
      "node": true,
      "browser": true,
      "es2021": true,
      "jest": true
    },
    "parserOptions": {
      "ecmaVersion": 2021,
      "sourceType": "module",
      "ecmaFeatures": {
        "jsx": true
      }
    },
    "settings": {
      "react": {
        "version": "detect"
      }
    },
    "rules": {
      "no-unused-vars": [
        "error",
        {
          "argsIgnorePattern": "^_",
          "varsIgnorePattern": "^_"
        }
      ],
      "no-console": "off",
      "semi": [
        "error",
        "always"
      ],
      "quotes": [
        "error",
        "single"
      ],
      "react/react-in-jsx-scope": "off",
      "react/jsx-uses-react": "off",
      "react/prop-types": "off"
    },
    "overrides": [
      {
        "files": [
          "src/mobile/mobile-responsive.js",
          "src/security/security-manager.js",
          "src/utils/performance-manager.js"
        ],
        "env": {
          "browser": true,
          "node": true
        }
      },
      {
        "files": [
          "**/*.jsx",
          "**/*.tsx"
        ],
        "rules": {
          "react/react-in-jsx-scope": "off"
        }
      }
    ]
  },
  "prettier": {
    "semi": true,
    "trailingComma": "es5",
    "singleQuote": true,
    "printWidth": 100,
    "tabWidth": 2
  }
}
