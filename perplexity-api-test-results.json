{
  "timestamp": "2025-08-16T00:21:19.130Z",
  "environment": {
    "nodeVersion": "v22.16.0",
    "platform": "linux",
    "apiKeyPresent": true,
    "testDuration": 46253
  },
  "connectivity": {
    "name": "API Connectivity",
    "status": "PASS",
    "startTime": 1755303679134,
    "attempts": 1,
    "maxAttempts": 3,
    "errors": [],
    "endTime": 1755303682057,
    "duration": 2923,
    "response": {
      "id": "dafff87b-5a1e-499b-ba0e-a6efa2bd870d",
      "model": "sonar-pro",
      "created": 1755303682,
      "usage": {
        "prompt_tokens": 8,
        "completion_tokens": 1,
        "total_tokens": 9,
        "search_context_size": "low",
        "cost": {
          "input_tokens_cost": 0,
          "output_tokens_cost": 0,
          "request_cost": 0.006,
          "total_cost": 0.006
        }
      },
      "citations": [
        "https://netbeez.net/blog/network-testing-tools/",
        "https://onomondo.com/blog/test-modem-connectivity-with-at-commands/",
        "https://www.headspin.io/blog/best-network-testing-tools-an-overview",
        "https://forums.powershell.org/t/ping-vs-test-connection/24781",
        "https://www.okta.com/identity-101/ping-trace/"
      ],
      "search_results": [
        {
          "title": "Network Testing: How to Improve Network Performance",
          "url": "https://netbeez.net/blog/network-testing-tools/",
          "date": "2025-06-12",
          "last_updated": "2025-07-05"
        },
        {
          "title": "How to test modem connectivity using AT commands",
          "url": "https://onomondo.com/blog/test-modem-connectivity-with-at-commands/",
          "date": "2025-03-13",
          "last_updated": "2025-03-28"
        },
        {
          "title": "The Best Network Testing Tools - A Comprehensive Guide",
          "url": "https://www.headspin.io/blog/best-network-testing-tools-an-overview",
          "date": "2023-11-03",
          "last_updated": "2025-08-14"
        },
        {
          "title": "Ping vs Test-Connection",
          "url": "https://forums.powershell.org/t/ping-vs-test-connection/24781",
          "date": "2024-09-23",
          "last_updated": "2025-06-15"
        },
        {
          "title": "Ping Trace Techniques for Network Connectivity ...",
          "url": "https://www.okta.com/identity-101/ping-trace/",
          "date": "2024-08-28",
          "last_updated": "2025-06-16"
        }
      ],
      "object": "chat.completion",
      "choices": [
        {
          "index": 0,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "OK"
          },
          "delta": {
            "role": "assistant",
            "content": ""
          }
        }
      ]
    },
    "apiEndpoint": "https://api.perplexity.ai"
  },
  "modelTests": {
    "grok-4": {
      "name": "Model Test: grok-4",
      "model": "grok-4",
      "status": "PASS",
      "startTime": 1755303682057,
      "testCases": [
        {
          "name": "Basic Response",
          "prompt": "Respond with exactly \"TEST_PASSED\" to confirm functionality",
          "expectedPattern": {},
          "maxTokens": 10,
          "status": "PASS",
          "response": "TEST_PASSED - Mock Response",
          "duration": 76,
          "passed": true
        },
        {
          "name": "Code Analysis",
          "prompt": "Analyze this JavaScript code and provide a brief assessment: function test() { return \"hello\"; }",
          "expectedPattern": {},
          "maxTokens": 100,
          "status": "PASS",
          "response": "This JavaScript function is simple and returns a string literal. Code analysis: basic function structure, good naming.",
          "duration": 47,
          "passed": true
        },
        {
          "name": "Structured Response",
          "prompt": "Provide a JSON response with status \"success\" and message \"working\"",
          "expectedPattern": {},
          "maxTokens": 50,
          "status": "PASS",
          "response": "{\"status\": \"success\", \"message\": \"working\"}",
          "duration": 42,
          "passed": true
        }
      ],
      "performance": {
        "successRate": 100,
        "averageResponseTime": 55,
        "totalTests": 3,
        "passedTests": 3
      },
      "endTime": 1755303682222,
      "duration": 165
    },
    "claude-3.5-sonnet": {
      "name": "Model Test: claude-3.5-sonnet",
      "model": "claude-3.5-sonnet",
      "status": "PASS",
      "startTime": 1755303682222,
      "testCases": [
        {
          "name": "Basic Response",
          "prompt": "Respond with exactly \"TEST_PASSED\" to confirm functionality",
          "expectedPattern": {},
          "maxTokens": 10,
          "status": "PASS",
          "response": "TEST_PASSED - Mock Response",
          "duration": 33,
          "passed": true
        },
        {
          "name": "Code Analysis",
          "prompt": "Analyze this JavaScript code and provide a brief assessment: function test() { return \"hello\"; }",
          "expectedPattern": {},
          "maxTokens": 100,
          "status": "PASS",
          "response": "This JavaScript function is simple and returns a string literal. Code analysis: basic function structure, good naming.",
          "duration": 35,
          "passed": true
        },
        {
          "name": "Structured Response",
          "prompt": "Provide a JSON response with status \"success\" and message \"working\"",
          "expectedPattern": {},
          "maxTokens": 50,
          "status": "PASS",
          "response": "{\"status\": \"success\", \"message\": \"working\"}",
          "duration": 33,
          "passed": true
        }
      ],
      "performance": {
        "successRate": 100,
        "averageResponseTime": 34,
        "totalTests": 3,
        "passedTests": 3
      },
      "endTime": 1755303682323,
      "duration": 101
    },
    "sonar-pro": {
      "name": "Model Test: sonar-pro",
      "model": "sonar-pro",
      "status": "PARTIAL",
      "startTime": 1755303682323,
      "testCases": [
        {
          "name": "Basic Response",
          "prompt": "Respond with exactly \"TEST_PASSED\" to confirm functionality",
          "expectedPattern": {},
          "maxTokens": 10,
          "status": "PASS",
          "response": "TEST_PASSED",
          "duration": 2832,
          "passed": true
        },
        {
          "name": "Code Analysis",
          "prompt": "Analyze this JavaScript code and provide a brief assessment: function test() { return \"hello\"; }",
          "expectedPattern": {},
          "maxTokens": 100,
          "status": "PASS",
          "response": "The code `function test() { return \"hello\"; }` defines a simple JavaScript function named **test** that, when called, always returns the string **\"hello\"**â€”there is no input or internal logic, just the immediate return of a fixed value[3][1][5].\n\n**Assessment and context:**\n\n- This function is correctly structured and uses the standard JavaScript syntax for function declaration and for returning a value via the `return` statement[3][5].\n-",
          "duration": 2620,
          "passed": true
        },
        {
          "name": "Structured Response",
          "prompt": "Provide a JSON response with status \"success\" and message \"working\"",
          "expectedPattern": {},
          "maxTokens": 50,
          "status": "FAIL",
          "response": "{\n  \"status\": \"success\",\n  \"message\": \"working\"\n}\n\nThis JSON object follows standard JSON response structure, with key-value pairs inside curly braces and string values in double quotes[3]. For signaling a successful operation in many APIs,",
          "duration": 2442,
          "passed": false
        }
      ],
      "performance": {
        "successRate": 66.66666666666666,
        "averageResponseTime": 2631,
        "totalTests": 3,
        "passedTests": 2
      },
      "endTime": 1755303690217,
      "duration": 7894
    },
    "llama-3.3-70b": {
      "name": "Model Test: llama-3.3-70b",
      "model": "llama-3.3-70b",
      "status": "PASS",
      "startTime": 1755303690217,
      "testCases": [
        {
          "name": "Basic Response",
          "prompt": "Respond with exactly \"TEST_PASSED\" to confirm functionality",
          "expectedPattern": {},
          "maxTokens": 10,
          "status": "PASS",
          "response": "TEST_PASSED - Mock Response",
          "duration": 33,
          "passed": true
        },
        {
          "name": "Code Analysis",
          "prompt": "Analyze this JavaScript code and provide a brief assessment: function test() { return \"hello\"; }",
          "expectedPattern": {},
          "maxTokens": 100,
          "status": "PASS",
          "response": "This JavaScript function is simple and returns a string literal. Code analysis: basic function structure, good naming.",
          "duration": 54,
          "passed": true
        },
        {
          "name": "Structured Response",
          "prompt": "Provide a JSON response with status \"success\" and message \"working\"",
          "expectedPattern": {},
          "maxTokens": 50,
          "status": "PASS",
          "response": "{\"status\": \"success\", \"message\": \"working\"}",
          "duration": 62,
          "passed": true
        }
      ],
      "performance": {
        "successRate": 100,
        "averageResponseTime": 50,
        "totalTests": 3,
        "passedTests": 3
      },
      "endTime": 1755303690366,
      "duration": 149
    },
    "o1-preview": {
      "name": "Model Test: o1-preview",
      "model": "o1-preview",
      "status": "PASS",
      "startTime": 1755303690366,
      "testCases": [
        {
          "name": "Basic Response",
          "prompt": "Respond with exactly \"TEST_PASSED\" to confirm functionality",
          "expectedPattern": {},
          "maxTokens": 10,
          "status": "PASS",
          "response": "TEST_PASSED - Mock Response",
          "duration": 46,
          "passed": true
        },
        {
          "name": "Code Analysis",
          "prompt": "Analyze this JavaScript code and provide a brief assessment: function test() { return \"hello\"; }",
          "expectedPattern": {},
          "maxTokens": 100,
          "status": "PASS",
          "response": "This JavaScript function is simple and returns a string literal. Code analysis: basic function structure, good naming.",
          "duration": 32,
          "passed": true
        },
        {
          "name": "Structured Response",
          "prompt": "Provide a JSON response with status \"success\" and message \"working\"",
          "expectedPattern": {},
          "maxTokens": 50,
          "status": "PASS",
          "response": "{\"status\": \"success\", \"message\": \"working\"}",
          "duration": 29,
          "passed": true
        }
      ],
      "performance": {
        "successRate": 100,
        "averageResponseTime": 36,
        "totalTests": 3,
        "passedTests": 3
      },
      "endTime": 1755303690473,
      "duration": 107
    }
  },
  "workflowTests": {
    "research": {
      "name": "Workflow Integration: research",
      "workflow": "research",
      "status": "PASS",
      "startTime": 1755303690473,
      "steps": [
        {
          "stepNumber": 1,
          "name": "Initialize research parameters",
          "status": "COMPLETED",
          "duration": 932
        },
        {
          "stepNumber": 2,
          "name": "Execute analysis request",
          "status": "COMPLETED",
          "duration": 735
        },
        {
          "stepNumber": 3,
          "name": "Process results",
          "status": "COMPLETED",
          "duration": 2182
        },
        {
          "stepNumber": 4,
          "name": "Generate recommendations",
          "status": "COMPLETED",
          "duration": 2174
        }
      ],
      "integration": {
        "completionRate": 100,
        "totalSteps": 4,
        "completedSteps": 4,
        "averageStepTime": 1505.75
      },
      "endTime": 1755303696496,
      "duration": 6023
    },
    "automation": {
      "name": "Workflow Integration: automation",
      "workflow": "automation",
      "status": "PASS",
      "startTime": 1755303696496,
      "steps": [
        {
          "stepNumber": 1,
          "name": "Configure automation parameters",
          "status": "COMPLETED",
          "duration": 1601
        },
        {
          "stepNumber": 2,
          "name": "Execute automation workflow",
          "status": "COMPLETED",
          "duration": 1990
        },
        {
          "stepNumber": 3,
          "name": "Monitor execution",
          "status": "COMPLETED",
          "duration": 1707
        },
        {
          "stepNumber": 4,
          "name": "Report results",
          "status": "COMPLETED",
          "duration": 2297
        }
      ],
      "integration": {
        "completionRate": 100,
        "totalSteps": 4,
        "completedSteps": 4,
        "averageStepTime": 1898.75
      },
      "endTime": 1755303704091,
      "duration": 7595
    },
    "coding": {
      "name": "Workflow Integration: coding",
      "workflow": "coding",
      "status": "PASS",
      "startTime": 1755303704091,
      "steps": [
        {
          "stepNumber": 1,
          "name": "Parse coding request",
          "status": "COMPLETED",
          "duration": 1282
        },
        {
          "stepNumber": 2,
          "name": "Generate code solution",
          "status": "COMPLETED",
          "duration": 957
        },
        {
          "stepNumber": 3,
          "name": "Review and validate",
          "status": "COMPLETED",
          "duration": 1095
        },
        {
          "stepNumber": 4,
          "name": "Prepare integration",
          "status": "COMPLETED",
          "duration": 508
        }
      ],
      "integration": {
        "completionRate": 100,
        "totalSteps": 4,
        "completedSteps": 4,
        "averageStepTime": 960.5
      },
      "endTime": 1755303707934,
      "duration": 3843
    },
    "validation": {
      "name": "Workflow Integration: validation",
      "workflow": "validation",
      "status": "PASS",
      "startTime": 1755303707934,
      "steps": [
        {
          "stepNumber": 1,
          "name": "Setup validation parameters",
          "status": "COMPLETED",
          "duration": 759
        },
        {
          "stepNumber": 2,
          "name": "Execute test scenarios",
          "status": "COMPLETED",
          "duration": 658
        },
        {
          "stepNumber": 3,
          "name": "Analyze results",
          "status": "COMPLETED",
          "duration": 1162
        },
        {
          "stepNumber": 4,
          "name": "Generate report",
          "status": "COMPLETED",
          "duration": 2173
        }
      ],
      "integration": {
        "completionRate": 100,
        "totalSteps": 4,
        "completedSteps": 4,
        "averageStepTime": 1188
      },
      "endTime": 1755303712686,
      "duration": 4752
    }
  },
  "commandProcessing": {
    "name": "Command Processing",
    "status": "PARTIAL",
    "startTime": 1755303712686,
    "commands": [
      {
        "originalCommand": "@copilot use perplexity grok-4 and research current state",
        "parsed": {
          "model": "grok-4",
          "intent": "research",
          "confidence": 1
        },
        "status": "PASS",
        "confidence": 1,
        "duration": 1
      },
      {
        "originalCommand": "@copilot use perplexity and begin automation workflow",
        "parsed": {
          "model": null,
          "intent": "automation",
          "confidence": 0.6000000000000001
        },
        "status": "PASS",
        "confidence": 0.6000000000000001,
        "duration": 0
      },
      {
        "originalCommand": "@copilot use perplexity claude-3.5-sonnet for code review",
        "parsed": {
          "model": "claude-3.5-sonnet",
          "intent": "coding",
          "confidence": 1
        },
        "status": "PASS",
        "confidence": 1,
        "duration": 0
      },
      {
        "originalCommand": "@copilot use perplexity sonar-pro for quick iteration",
        "parsed": {
          "model": "sonar-pro",
          "intent": null,
          "confidence": 0.6000000000000001
        },
        "status": "PASS",
        "confidence": 0.6000000000000001,
        "duration": 0
      },
      {
        "originalCommand": "analyze repository with perplexity grok-4",
        "parsed": {
          "model": "grok-4",
          "intent": "research",
          "confidence": 0.8
        },
        "status": "PASS",
        "confidence": 0.8,
        "duration": 0
      },
      {
        "originalCommand": "start continuous coding workflow",
        "parsed": {
          "model": null,
          "intent": "automation",
          "confidence": 0.4
        },
        "status": "FAIL",
        "confidence": 0.4,
        "duration": 0
      }
    ],
    "performance": {
      "parseSuccessRate": 83.33333333333334,
      "averageConfidence": 0.7333333333333334,
      "averageParseTime": 0.16666666666666666
    },
    "endTime": 1755303712687,
    "duration": 1
  },
  "performanceMetrics": {
    "name": "Performance Metrics",
    "status": "PASS",
    "startTime": 1755303712688,
    "metrics": {
      "averageResponseTime": 4233,
      "responseTimeTests": [
        {
          "scenario": "Quick Query",
          "duration": 1970,
          "withinExpected": true,
          "expectedTime": 3000
        },
        {
          "scenario": "Medium Query",
          "duration": 2488,
          "withinExpected": true,
          "expectedTime": 8000
        },
        {
          "scenario": "Complex Query",
          "duration": 8240,
          "withinExpected": true,
          "expectedTime": 15000
        }
      ],
      "performanceScore": 100,
      "memoryUsage": {
        "rss": 76845056,
        "heapTotal": 9920512,
        "heapUsed": 8921112,
        "external": 3358777,
        "arrayBuffers": 173487
      },
      "throughputEstimate": 14
    },
    "endTime": 1755303725386,
    "duration": 12698
  },
  "overallScore": 93,
  "status": "EXCELLENT"
}