#!/usr/bin/env node
/**
 * One-time local repair of a corrupted .env file.
 * - Strips random "=" inserted into keys and values.
 * - Removes non-ASCII control/mojibake in values.
 * - Preserves quoting when needed.
 *
 * Usage:
 *   node scripts/repair-dotenv.js input.env output.env
 *   node scripts/repair-dotenv.js .env .env.local
 *
 * SECURITY: Do NOT commit the output. Use it locally or import into secret managers.
 */
const fs = require('fs');
const path = require('path');

function needsQuotes(v) {
  return /[\s#,]/.test(v);
}

function cleanKey(k) {
  // Remove all characters except letters, numbers, and underscore; uppercase
  return k.normalize('NFKD').replace(/[^\w]/g, '').toUpperCase();
}

function cleanValue(v) {
  let s = v.replace(/\r?\n/g, '').trim();
  if ((s.startsWith('"') && s.endsWith('"')) || (s.startsWith("'") && s.endsWith("'"))) {
    s = s.slice(1, -1);
  }
  s = s.replace(/=/g, '');
  s = s.replace(/[^\x09\x20-\x7E]/g, '');
  if (needsQuotes(s)) {
    s = `"${s.replace(/"/g, '\\"')}"`;
  }
  return s;
}

function processLine(line) {
  const trimmed = line.replace(/\r$/, '');
  if (!trimmed || trimmed.trim().length === 0) return trimmed;
  if (trimmed.trim().startsWith('#')) {
    // Clean up comments by removing mojibake and fixing formatting
    let comment = trimmed.trim();
    // Remove problematic characters from comments
    comment = comment.replace(/[^\x09\x20-\x7E]/g, '');
    // Fix repeated equals signs in comments
    comment = comment.replace(/=+/g, ' ');
    return comment;
  }
  const idx = trimmed.indexOf('=');
  if (idx === -1) return trimmed;
  const rawKey = trimmed.slice(0, idx);
  const rawVal = trimmed.slice(idx + 1);
  const key = cleanKey(rawKey);
  const val = cleanValue(rawVal);
  if (!key) return '';
  return `${key}=${val}`;
}

function main() {
  const inPath = process.argv[2];
  const outPath = process.argv[3];
  if (!inPath || !outPath) {
    console.error('Usage: node scripts/repair-dotenv.js <input.env> <output.env>');
    process.exit(1);
  }
  const input = fs.readFileSync(inPath, 'utf8').split('\n');
  const out = [
    '# GENERATED by scripts/repair-dotenv.js â€” DO NOT COMMIT THIS FILE',
    '# Review carefully before using. Secrets here are sensitive.',
  ];
  for (const line of input) {
    try {
      out.push(processLine(line));
    } catch (e) {
      out.push(`# REPAIR_ERROR: ${line}`);
    }
  }
  fs.mkdirSync(path.dirname(outPath), { recursive: true });
  fs.writeFileSync(outPath, out.join('\n'), 'utf8');
  console.log(`Wrote repaired env to ${outPath}`);
  console.log('SECURITY: Do NOT commit this file. Import into your secret manager instead.');
}

main();