{
  "timestamp": "2025-08-16T15:15:00.376Z",
  "demoSession": "perplexity-demo-1755357300376-gziqxdeuq",
  "researchTests": [
    {
      "category": "Music Technology",
      "query": "Latest developments in AI-powered music recommendation systems",
      "expectedTopics": [
        "machine learning",
        "collaborative filtering",
        "neural networks",
        "spotify api"
      ],
      "priority": "high",
      "responseTime": 644,
      "success": true,
      "sources": [
        {
          "url": "https://arxiv.org/abs/2024.music.rec",
          "title": "Neural Music Recommendation Systems",
          "domain": "arxiv.org",
          "credibility": 95
        },
        {
          "url": "https://developer.spotify.com/documentation/web-api",
          "title": "Spotify Web API Guide",
          "domain": "spotify.com",
          "credibility": 90
        },
        {
          "url": "https://github.com/spotify/echonestnest",
          "title": "Open Source Music Analysis",
          "domain": "github.com",
          "credibility": 85
        }
      ],
      "summary": "Recent advances in AI-powered music recommendation systems focus on deep learning approaches that combine collaborative filtering with content-based analysis. Modern systems like those used by Spotify integrate neural networks to understand user preferences and musical features, achieving significant improvements in recommendation accuracy.",
      "relevanceScore": 99,
      "citations": {
        "citationsGenerated": 3,
        "formatsSupported": [
          "APA",
          "MLA",
          "Chicago",
          "IEEE"
        ],
        "attributionAccuracy": 92,
        "verifiableLinks": 98,
        "transparencyScore": 98,
        "generationTime": 126
      },
      "topicsFound": [
        "machine learning",
        "collaborative filtering",
        "neural networks",
        "spotify api"
      ],
      "confidence": 87,
      "sourceValidation": {
        "totalSources": 3,
        "validSources": 3,
        "blockedSources": 0,
        "averageCredibility": 90,
        "workingLinks": 96,
        "validationTime": 156
      }
    },
    {
      "category": "Browser Automation",
      "query": "Best practices for Puppeteer automation in production environments",
      "expectedTopics": [
        "puppeteer",
        "headless chrome",
        "performance optimization",
        "error handling"
      ],
      "priority": "medium",
      "responseTime": 679,
      "success": true,
      "sources": [
        {
          "url": "https://pptr.dev/guides/production",
          "title": "Puppeteer Production Guide",
          "domain": "pptr.dev",
          "credibility": 95
        },
        {
          "url": "https://github.com/puppeteer/puppeteer/issues",
          "title": "Puppeteer Issues & Solutions",
          "domain": "github.com",
          "credibility": 80
        },
        {
          "url": "https://developer.chrome.com/docs/puppeteer",
          "title": "Chrome DevTools Puppeteer",
          "domain": "developer.chrome.com",
          "credibility": 92
        }
      ],
      "summary": "Production deployment of Puppeteer requires careful consideration of resource management, error handling, and performance optimization. Best practices include using headless Chrome efficiently, implementing proper timeout handling, and monitoring system resources to ensure stable automation workflows.",
      "relevanceScore": 87,
      "citations": {
        "citationsGenerated": 3,
        "formatsSupported": [
          "APA",
          "MLA",
          "Chicago",
          "IEEE"
        ],
        "attributionAccuracy": 96,
        "verifiableLinks": 98,
        "transparencyScore": 89,
        "generationTime": 160
      },
      "topicsFound": [
        "puppeteer",
        "headless chrome",
        "performance optimization"
      ],
      "confidence": 94,
      "sourceValidation": {
        "totalSources": 3,
        "validSources": 3,
        "blockedSources": 0,
        "averageCredibility": 89,
        "workingLinks": 98,
        "validationTime": 183
      }
    },
    {
      "category": "Research Validation",
      "query": "Automated fact-checking systems for AI-generated content",
      "expectedTopics": [
        "fact checking",
        "nlp",
        "verification",
        "trust scoring"
      ],
      "priority": "high",
      "responseTime": 657,
      "success": true,
      "sources": [
        {
          "url": "https://www.nature.com/articles/fact-checking-ai",
          "title": "AI Fact-Checking Research",
          "domain": "nature.com",
          "credibility": 98
        },
        {
          "url": "https://github.com/fact-checkers/ai-validation",
          "title": "Open Source Fact Checking",
          "domain": "github.com",
          "credibility": 82
        },
        {
          "url": "https://arxiv.org/abs/2024.fact.check",
          "title": "Automated Verification Systems",
          "domain": "arxiv.org",
          "credibility": 94
        }
      ],
      "summary": "Automated fact-checking systems for AI-generated content employ natural language processing and knowledge graph validation to verify claims. These systems combine multiple verification strategies including source credibility assessment, cross-reference validation, and consistency checking to provide reliable accuracy scores.",
      "relevanceScore": 87,
      "citations": {
        "citationsGenerated": 3,
        "formatsSupported": [
          "APA",
          "MLA",
          "Chicago",
          "IEEE"
        ],
        "attributionAccuracy": 98,
        "verifiableLinks": 94,
        "transparencyScore": 89,
        "generationTime": 100
      },
      "topicsFound": [
        "fact checking",
        "nlp"
      ],
      "confidence": 98,
      "sourceValidation": {
        "totalSources": 3,
        "validSources": 3,
        "blockedSources": 0,
        "averageCredibility": 91,
        "workingLinks": 90,
        "validationTime": 150
      }
    }
  ],
  "browserIntegration": [
    {
      "task": "Website Screenshot Capture",
      "url": "https://example.com",
      "action": "screenshot",
      "executionTime": 318,
      "success": true,
      "qualityScore": 99,
      "details": {
        "captured": true,
        "resolution": "1920x1080",
        "fileSize": "245KB"
      },
      "browserUsed": "Chrome Headless",
      "timestamp": "2025-08-16T15:15:03.516Z"
    },
    {
      "task": "Content Extraction",
      "url": "https://research.example.com",
      "action": "extract",
      "executionTime": 311,
      "success": true,
      "qualityScore": 96,
      "details": {
        "contentLength": 1839,
        "elementsFound": 61,
        "extractedData": "Text content, links, metadata"
      },
      "browserUsed": "Chrome Headless",
      "timestamp": "2025-08-16T15:15:03.827Z"
    },
    {
      "task": "Performance Monitoring",
      "url": "https://test.example.com",
      "action": "monitor",
      "executionTime": 291,
      "success": true,
      "qualityScore": 95,
      "details": {
        "loadTime": 1317,
        "renderTime": 528,
        "performanceScore": 95
      },
      "browserUsed": "Chrome Headless",
      "timestamp": "2025-08-16T15:15:04.118Z"
    }
  ],
  "validationResults": [],
  "performanceMetrics": {
    "totalDuration": 4174,
    "averageResponseTime": 1391,
    "successRate": 100,
    "memoryUsage": {
      "rss": 46575616,
      "heapTotal": 6266880,
      "heapUsed": 4717288,
      "external": 1779924,
      "arrayBuffers": 16659
    },
    "throughput": 1,
    "efficiency": 100
  }
}